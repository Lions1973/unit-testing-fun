<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Rock.Framework</name>
  </assembly>
  <members>
    <member name="T:Rock.Framework.Collections.RoundRobinCollection`1">
      <summary>
            Custom collection that implements a round-robin method for returning elements in order
            and when it reaches the end of collection it starts with the first element.
            </summary>
      <typeparam name="T">Type in the collection</typeparam>
      <remarks>
        <h3>About RoundRobinCollection</h3>
            We like to think of the RoundRobinCollection as a built-in load balancer within the framework.  It 
            was built out of the need to load balance between servers for <see cref="T:Rock.Framework.Logging.Logger" /> 
            providers.  There are other uses for it as well.  For example, say you had a help desk application you were 
            building and you needed to assign help desk tickets to team members.  While you could use a random function to do it
            it wouldn't be completely fair (someone will wind up with more or less).  
            Scenarios like this is where RoundRobinCollection comes in. You may also 
            have multiple vendors that provide a particular service (think credit for example) that you need to try to pull 
            credit from in a particular vendor in order if the first one fails.  Whatever the case is this object will take 
            any collection and start at the first item and continue to loop through the items starting back over 
            when it gets to the end.  If you need to start a certain point then call Next() until you get to where you need to 
            start from (easy to write).
            </remarks>
      <example>
        <para>
          <h3>Simple Unit Test</h3>
        </para>
        <code><![CDATA[
             RoundRobinCollection<int> robin = new RoundRobinCollection<int>(new List<int>{1,2,3});
             for(i=0; i<99;i++)
                {
                    Console(robin.Next().ToString());
                }
             ]]></code>
        <para>
                The above output will be:  1, 2, 3, 1, 2, 3, 1, 2, 3.....
            </para>
      </example>
    </member>
    <member name="M:Rock.Framework.Collections.RoundRobinCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Collections.RoundRobinCollection`1" /> class.
            </summary>
      <param name="collection">The collection.</param>
    </member>
    <member name="M:Rock.Framework.Collections.RoundRobinCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Rock.Framework.Collections.RoundRobinCollection`1.Next">
      <summary>
            Get the next element in the collection. When it reaches the end it starts over from the beginning. 
            </summary>
      <returns>The next item in the collection.</returns>
    </member>
    <member name="M:Rock.Framework.Collections.RoundRobinCollection`1.ReplaceCurrentItem(`0)">
      <summary>
            Replaces the current item.
            </summary>
      <param name="newItem">The new item.</param>
    </member>
    <member name="T:Rock.Framework.Collections.SerializableDictionary`2">
      <summary>
            Provides a serializable dictionary that supports XML serialization since there isn't one in .Net by default.
            </summary>
      <remarks>
            If you are creating objects that need to serialize to XML that require dictionaries, use this type.  
            </remarks>
      <example>
        <code><![CDATA[
              SerializableDictionary<int, PersonHelper> people = new SerializableDictionary<int, PersonHelper>();
              people.Add(1, new PersonHelper { FirstName = "Keith", LastName = "Elder", Email = "keithelder@quickenloans.com" });
              string xml = Rock.Framework.Xml.Serializer.ToXml(people);
            ]]></code>
      </example>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:Rock.Framework.Collections.SerializableDictionary`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Collections.SerializableDictionary`2" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Collections.SerializableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Collections.SerializableDictionary`2" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Collections.SerializableDictionary`2.GetSchema">
      <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
      <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
    </member>
    <member name="M:Rock.Framework.Collections.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
      <summary>
            Generates an object from its XML representation.
            </summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
    </member>
    <member name="M:Rock.Framework.Collections.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
      <summary>
            Converts an object into its XML representation.
            </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
    </member>
    <member name="T:Rock.Framework.Configuration.SqlSettingsProvider">
      <summary>
             Custom application settings provider that allows developers to easily store 
             application settings in the database instead of storing them in the config file.
             </summary>
      <remarks>
        <para>
             While storing appSettings within the app.config or web.config work on single tier applications, 
             it becomes difficult to manage settings for applicatios that are setup on multiple servers.  Usually 
             making a change requires a push to the code. SqlSettingsProvider provides a standard way of 
             storing application settings in the database as well as updating those settings back to the database which means 
             developers can write their own custom control panels easily.  The database store uses LINQ to SQL to 
             fetch and save data.
             </para>
        <para>
             To get started with the SqlSettingsProvider, go to C:\Program Files\Quicken Loans\Core Framework\x.x.x.x\Configuration and 
             open the ApplicationSettings.sql file.  This file provides the SQL Table you need to add to your database.
             </para>
        <para>
             After your database is prepared, add a connectionString in your application config called "AppSettings".
             <code><![CDATA[
             <connectionStrings>
            	   <add connectionString="Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|ApplicationSettings.mdf;Integrated Security=True;User Instance=True" name="AppSettings"/>
             </connectionStrings>
             ]]></code></para>
        <para>
             Next, create a class that inherits from <see cref="T:System.Configuration.ApplicationSettingsBase" />.  
             Attribute the class with the SettingsProvider attribute with the type of SqlSettingsProvider.  
             Within this class, add the properties you want to persist to the database.  Each settings must 
             have thea attribute of [ApplicationScopedSetting] applied.  Here is a working example.
             <code>
              [SettingsProvider(typeof(Rock.Framework.Configuration.SqlSettingsProvider))]
              public class MyAppSettings : ApplicationSettingsBase
              {
            
               /// <summary>
               /// Override the Save method so a SettingsSaved event could be created.
               /// This will allow the application to monitor settings and change itself
               /// when settings have been updated.
               /// 
               /// Use this pattern if want to have your applications updated automatically
               /// when settings are saved.  Especially if you are using a static settings 
               /// property as this example does.
               /// </summary>
               public override void Save()
               {
                   base.Save();
                   OnSettingsSaved();
               }
            
               /// <summary>
               /// Custom event handler to monitor when settings are saved.
               /// </summary>
               public event EventHandler SettingsSaved;
            
               private void OnSettingsSaved()
               {
                   var handler = SettingsSaved;
                   if (handler != null)
                   {
                       handler(this, new EventArgs());
                   }
               }
            
               [ApplicationScopedSetting]
               [DefaultSettingValue("itteamcore@quickenloans.com")]
               public string FromEmailAddress
               {
                   get { return (string)this["FromEmailAddress"]; }
                   set { this["FromEmailAddress"] = value; }
               }
            
               [ApplicationScopedSetting]
               [DefaultSettingValue("Client File a Complaint")]
               public string ApplicationName
               {
                   get
                   {
                       return (string)this["ApplicationName"];
                   }
                   set
                   {
                       this["ApplicationName"] = value;
                   }
               }
             }
             </code></para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Configuration.SqlSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the specified name.
            </summary>
      <param name="name">The name.</param>
      <param name="config">The col.</param>
    </member>
    <member name="M:Rock.Framework.Configuration.SqlSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
      <summary>
            Returns the collection of settings property values for the specified application instance and settings property group.
            </summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext" /> describing the current application use.</param>
      <param name="collection">A <see cref="T:System.Configuration.SettingsPropertyCollection" /> containing the settings property group whose values are to be retrieved.</param>
      <returns>
            A <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> containing the values for the specified settings property group.
            </returns>
    </member>
    <member name="M:Rock.Framework.Configuration.SqlSettingsProvider.HandlePropertiesNotInDatabase(System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsPropertyValueCollection,System.Collections.Generic.List{System.String})">
      <summary>
            Handles the properties that were found to not be in the database.
            </summary>
      <param name="collection">The collection of setting properties.</param>
      <param name="coll">The collection of returned value properties.</param>
      <param name="keys">The keys of the properties in the database.</param>
    </member>
    <member name="M:Rock.Framework.Configuration.SqlSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
      <summary>
            Sets the values of the specified group of property settings.
            </summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext" /> describing the current application usage.</param>
      <param name="collection">A <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> representing the group of property settings to set.</param>
    </member>
    <member name="M:Rock.Framework.Configuration.SqlSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)">
      <summary>
            Returns the value of the specified settings property for the previous version of the same application.
            </summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext" /> describing the current application usage.</param>
      <param name="property">The <see cref="T:System.Configuration.SettingsProperty" /> whose value is to be returned.</param>
      <returns>
            A <see cref="T:System.Configuration.SettingsPropertyValue" /> containing the value of the specified property setting as it was last set in the previous version of the application; or null if the setting cannot be found.
            </returns>
    </member>
    <member name="M:Rock.Framework.Configuration.SqlSettingsProvider.Reset(System.Configuration.SettingsContext)">
      <summary>
            Not supported with SqlSettings provider.  Do not use.
            </summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext" /> describing the current application usage.</param>
    </member>
    <member name="M:Rock.Framework.Configuration.SqlSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
      <summary>
            Indicates to the provider that the application has been upgraded. This offers the provider an opportunity to upgrade its stored settings as appropriate.
            </summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext" /> describing the current application usage.</param>
      <param name="properties">A <see cref="T:System.Configuration.SettingsPropertyCollection" /> containing the settings property group whose values are to be retrieved.</param>
    </member>
    <member name="P:Rock.Framework.Configuration.SqlSettingsProvider.AppSettingsConnectionString">
      <summary>
            Gets the app settings connection string.
            </summary>
      <value>The app settings connection string.</value>
    </member>
    <member name="P:Rock.Framework.Configuration.SqlSettingsProvider.ApplicationName">
      <summary>
            Gets or sets the name of the currently running application.
            </summary>
      <value>
      </value>
      <returns>A <see cref="T:System.String" /> that contains the application's shortened name, which does not contain a full path or extension, for example, SimpleAppSettings.</returns>
    </member>
    <member name="T:Rock.Framework.Core.CodeCompiler">
      <summary>
            Used to generate code and assemblies.
            </summary>
    </member>
    <member name="M:Rock.Framework.Core.CodeCompiler.Execute(System.String,System.String,System.String,System.Object[])">
      <summary>
            Executes the specified source.
            </summary>
      <param name="source">The source.</param>
      <param name="className">Name of the class.</param>
      <param name="functionName">Name of the function.</param>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Core.CodeCompiler.Execute(System.Reflection.Assembly,System.String,System.String,System.Object[],System.Object@)">
      <summary>
            Executes the specified assembly.
            </summary>
      <param name="asm">Assembly.</param>
      <param name="className">Name of the class.</param>
      <param name="functionName">Name of the function.</param>
      <param name="parameters">The parameters.</param>
      <param name="callingObject">The calling object.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Core.CodeCompiler.Execute(System.Reflection.Assembly,System.String,System.String,System.Object[])">
      <summary>
            Executes the specified assembly.
            </summary>
      <param name="assembly">The assembly.</param>
      <param name="className">Name of the class.</param>
      <param name="functionName">Name of the function.</param>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Core.CodeCompiler.CompileCode(System.String)">
      <summary>
            Compiles the code.
            </summary>
      <param name="source">The source.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Rock.Framework.DataQuality.AsciiDecoder">
      <summary>
            An object that converts a UTF-8 string into its ASCII equivalent.
            </summary>
    </member>
    <member name="M:Rock.Framework.DataQuality.AsciiDecoder.DecodeUtf8(System.String)">
      <summary>
            Translates UTF-8 characters into the closest ASCII match, and HTML decodes the string.
            For instance, a grave A (À) is translated to A.  One half (½) is translated to 1/2.
            The HTML decoding translates HTML-safe characters back into ASCII, so ' becomes '.
            Lower UTF-8 characters which cannot be mapped are translated to a default ?.
            Higher UTF-8 characters (such as the emoticons) may be skipped entirely, resulting in a blank string.
            This is all based on the custom fallback decoder at http://msdn.microsoft.com/en-us/library/ms404377(v=vs.110).aspx#fallbackstrategy
            UTF-8 character tables came from http://www.utf8-chartable.de/unicode-utf8-table.pl?utf8=dec
            </summary>
      <param name="utf">The UTF-8 string/</param>
      <returns>HTML decoded ASCII version of the input.</returns>
    </member>
    <member name="T:Rock.Framework.DataQuality.CustomMapper">
      <summary>
            Provides a mechanism for converting UTF-8 strings to ASCII strings.
            </summary>
    </member>
    <member name="M:Rock.Framework.DataQuality.CustomMapper.#ctor">
      <summary>
            Initializes a new instance of the CustomMapper class.
            </summary>
    </member>
    <member name="M:Rock.Framework.DataQuality.CustomMapper.#ctor(System.String)">
      <summary>
            Initializes a new instance of the CustomMapper class using the specified default string.
            </summary>
      <param name="defaultString">The default string to use when an equivalent ASCII character does not exist for a UTF-8 character.</param>
    </member>
    <member name="M:Rock.Framework.DataQuality.CustomMapper.CreateFallbackBuffer">
      <summary>
            Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackBuffer" /> class.
            </summary>
      <returns>An object that provides a fallback buffer for an encoder.</returns>
    </member>
    <member name="P:Rock.Framework.DataQuality.CustomMapper.MaxCharCount">
      <summary>
            Gets the maximum number of characters the current System.Text.EncoderFallback object can return.
            </summary>
    </member>
    <member name="T:Rock.Framework.DataQuality.EmailQuality">
      <summary>
            Contains functions to canonicalize email addresses by removing dots and plus/minus addressing per domain rules.
            For custom domains, nothing will really happen.
            GMail domains: gmail.com, google.com, googlemail.com |&gt; plus addressing and dots removed
                (e.g., "dan.gilbert+ql@gmail.com" becomes "dangilbert@gmail.com")
            Yahoo domains: yahoo.com, ymail.com |&gt; minus addressing removed
                (e.g., "dan.gilbert-ql@ymail.com" becomes "dan.gilbert@ymail.com")
            Outlook domains: outlook.com, hotmail.com, msn.com, live.com |&gt; plus addressing removed
                (e.g., "dan.gilbert+ql@msn.com" becomes "dan.gilbert@msn.com")
            </summary>
    </member>
    <member name="M:Rock.Framework.DataQuality.EmailQuality.GetDomain(System.String)">
      <summary>
            Gets the domain of the email address.
            </summary>
      <param name="email">The email address.</param>
      <returns>The domain of the email address.  Blank, null or addresses lacking @ return null.</returns>
    </member>
    <member name="M:Rock.Framework.DataQuality.EmailQuality.GetMailbox(System.String)">
      <summary>
            Gets the mailbox of the email address.
            </summary>
      <param name="email">The email address.</param>
      <returns>The mailbox of the email address.  Blank, null or addresses lacking @ return null.</returns>
    </member>
    <member name="M:Rock.Framework.DataQuality.EmailQuality.CleanEmail(System.String)">
      <summary>
            Removes dots and plus/minus addressing per domain rules.
            </summary>
      <param name="email">The email address to be cleaned</param>
      <returns>The canonical email address.  Blank, null or addresses lacking @ return null.</returns>
    </member>
    <member name="T:Rock.Framework.Data.DataMapper">
      <summary>
            Used to map properties in one object to another object.
            </summary>
    </member>
    <member name="M:Rock.Framework.Data.DataMapper.Map(System.Object,System.Object)">
      <summary>
            Maps the properties of the specified source object to the properties of the specified target object.
            </summary>
      <param name="source">The source.</param>
      <param name="target">The target.</param>
      <example>
        <code>
            Source s = new Source { FirstName = "Keith", LastName = "Elder", Email = "keith@quickenloans.com", IsAwesome = false };
            Target t = new Target();
            Rock.Framework.Data.DataMapper.Map(s, t);
              </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Data.DataMapper.Map(System.Object,System.Object,System.Boolean)">
      <summary>
            Maps the properties of the specified source object to the properties of the specified target object and allows exceptions to be surpressed.
            </summary>
      <param name="source">The source.</param>
      <param name="target">The target.</param>
      <param name="suppressExceptions">if set to <c>true</c> [suppress exceptions].</param>
      <example>
        <code>
            Source s = new Source { FirstName = "Keith", LastName = "Elder", Email = "keith@quickenloans.com", IsAwesome = false };
            Target t = new Target();
            Rock.Framework.Data.DataMapper.Map(s, t, true);
              </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Data.DataMapper.Map(System.Object,System.Object,System.Boolean,System.String[])">
      <summary>
            Maps the properties of the specified source object to the properties of the specified target object.
            </summary>
      <param name="source">The source.</param>
      <param name="target">The target.</param>
      <param name="suppressExceptions">if set to <c>true</c> [suppress exceptions].</param>
      <param name="ignoreList">The ignore list.</param>
      <example>
        <code>
            Source s = new Source { FirstName = "Keith", LastName = "Elder", Email = "keith@quickenloans.com", IsAwesome = false };
            Target t = new Target();
            Rock.Framework.Data.DataMapper.Map(s, t, true, new string[] {"Email"});
            Assert.IsTrue(String.IsNullOrEmpty(t.Email));
              </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Data.DataMapper.Map(System.Object,System.Object,System.Boolean,System.Boolean,System.String[])">
      <summary>
            Maps the properties of the specified source object to the properties of the specified target object.
            </summary>
      <param name="source">The source.</param>
      <param name="target">The target.</param>
      <param name="suppressExceptions">if set to <c>true</c> [suppress exceptions].</param>
      <param name="useEmptyStrings">if set to <c>true</c> [use empty strings].</param>
      <param name="ignoreList">The ignore list.</param>
      <example>
        <code>
            Source s = new Source { FirstName = "Keith", LastName = "Elder", Email = "keith@quickenloans.com", IsAwesome = false };
            Target t = new Target();
            Rock.Framework.Data.DataMapper.Map(s, t, true, false, new string[] {"Email"}); // ignores the email property
            Assert.IsTrue(String.IsNullOrEmpty(t.Email));
              </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Data.DataMapper.Map``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{``1})">
      <summary>
            Maps a collection of objects and their properties to the specified target collection.
            </summary>
      <typeparam name="S">The type of item in the source collection.</typeparam>
      <typeparam name="T">The type of item in the target collection.</typeparam>
      <param name="source">The source list.</param>
      <param name="target">The target list.</param>
    </member>
    <member name="M:Rock.Framework.Data.DataMapper.Map``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{``1},System.Boolean)">
      <summary>
            Maps a collection of objects and their properties to the specified target collection.
            </summary>
      <typeparam name="S">The type of item in the source collection.</typeparam>
      <typeparam name="T">The type of item in the target collection.</typeparam>
      <param name="source">The source list.</param>
      <param name="target">The target list.</param>
      <param name="suppressExceptions">if set to <c>true</c> [suppress exceptions].</param>
    </member>
    <member name="M:Rock.Framework.Data.DataMapper.Map``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{``1},System.Boolean,System.String[])">
      <summary>
            Maps a collection of objects and their properties to the specified target collection.
            </summary>
      <typeparam name="S">The type of item in the source collection.</typeparam>
      <typeparam name="T">The type of item in the target collection.</typeparam>
      <param name="source">The source list.</param>
      <param name="target">The target list.</param>
      <param name="suppressExceptions">if set to <c>true</c> [suppress exceptions].</param>
      <param name="ignoreList">The ignore list.</param>
    </member>
    <member name="M:Rock.Framework.Data.DataMapper.Map``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{``1},System.Boolean,System.Boolean,System.String[])">
      <summary>
            Maps a collection of objects and their properties to the specified target collection.
            </summary>
      <typeparam name="S">The type of item in the source collection.</typeparam>
      <typeparam name="T">The type of item in the target collection.</typeparam>
      <param name="source">The source list.</param>
      <param name="target">The target list.</param>
      <param name="suppressExceptions">if set to <c>true</c> [suppress exceptions].</param>
      <param name="useEmptyStrings">if set to <c>true</c> [use empty strings].</param>
      <param name="ignoreList">The ignore list.</param>
    </member>
    <member name="T:Rock.Framework.DirectoryServices.ActiveDirectoryAuthenticator">
      <summary>
            Authenticates to ActiveDirectory.  Can be used in applications that want to make sure the user name and password 
            provided to the application are correct and current.  Specifically for anonymous applications.
            </summary>
      <remarks>Multiple attempts to authenticate to active directory with invalid permissions will lock the account.</remarks>
      <example>
            The following example shows how to authenticate with a user name and password.
            <code>
            ActiveDirectoryAuthenticator auth = new ActiveDirectoryAuthenticator("asdf", "asdf");
            if (auth.IsAuthenticated)
            {
              // credentials are authenticated to active directory
            } else
            {
              // credentials are invalid
            }
            </code></example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryAuthenticator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.DirectoryServices.ActiveDirectoryAuthenticator" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryAuthenticator.#ctor(Rock.Framework.Settings.Configuration.IDirectoryServicesConfiguration)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.DirectoryServices.ActiveDirectoryAuthenticator" /> class.
            </summary>
      <param name="config">The config.</param>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryAuthenticator.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.DirectoryServices.ActiveDirectoryAuthenticator" /> class.
            </summary>
      <param name="userName">Name of the user.</param>
      <param name="password">The password.</param>
      <remarks>If IsAuthenticated is "true", then the user is authenticated to AD with the passed in credentials.</remarks>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryAuthenticator.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.DirectoryServices.ActiveDirectoryAuthenticator" /> class.
            </summary>
      <param name="ldapServer">The LDAP server. Defaults to LDAP://ldapquery.mi.corp.rockfin.com</param>
      <param name="userName">Name of the user.</param>
      <param name="password">The password.</param>
      <remarks>
            If IsAuthenticated is "true", then the user is authenticated to AD with the passed in credentials.
            </remarks>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryAuthenticator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryAuthenticator.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Rock.Framework.DirectoryServices.ActiveDirectoryAuthenticator" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ActiveDirectoryAuthenticator.IsAuthenticated">
      <summary>
            Gets or sets a value indicating whether this instance is authenticated to AD.
            </summary>
      <value>
        <c>true</c> if this instance is authenticated; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ActiveDirectoryAuthenticator.DirectoryEntry">
      <summary>
            Provides access to the DirectoryEntry object which is needed for
            other calls.
            </summary>
    </member>
    <member name="T:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1">
      <summary>
            Interface for ActiveDirectoryRepository
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetByCommonId(System.Int32)">
      <summary>
            Gets the team member by common id.
            </summary>
      <param name="id">The id.</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<LolaUser>();
            var user = rep.GetTeamMember(ADProperty.CommonId, "1002696");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetByUserName(System.String)">
      <summary>
            Gets a team member based on their username.
            </summary>
      <param name="userName">Name of the user.</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<TaraUser>();
            var user = rep.GetByUserName(User.Identity.Name);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetByOfficeCity(System.String)">
      <summary>
            Gets all of the team members in a specific office city.
            </summary>
      <param name="location">The location.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<CariUser>();
            var user = rep.GetByOfficeCity("Livonia");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetByName(System.String,System.String)">
      <summary>
            Gets a collection of team members by name.
            </summary>
      <param name="firstName">The first name.</param>
      <param name="lastName">The last name.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<AMPUser>();
            var user = rep.GetByName("dan", "gilbert");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetByFax(System.String)">
      <summary>
            Gets a team member the by fax.
            </summary>
      <param name="fax">The fax # in the format of (xxx) xxx-xxxx".</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var user = rep.GetByFax("(123) 123-1234");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetByExtension(System.String)">
      <summary>
            Gets a team member by extension.  
            </summary>
      <param name="extension">The extension.</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<CTIUser>();
            var user = rep.GetByExtension("51999");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetByTeam(System.String)">
      <summary>
            Gets team members by their team.
            </summary>
      <param name="team">The team.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<YouCustomUserEntity>();
            var user = rep.GetByTeam("Technology");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetPaidHourly">
      <summary>
            Gets team members that are paid hourly.
            </summary>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<HourlyTeamMember>();
            var user = rep.GetPaidHourly();
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetBySubTeam(System.String)">
      <summary>
            Gets team members by sub team.
            </summary>
      <param name="subTeam">The sub team.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<CoreEngineer>();
            var user = rep.GetBySubTeam("Core Engineering");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetTeamMember(Rock.Framework.DirectoryServices.ADProperty,System.String)">
      <summary>
            Returns a single user object that can be uniquely identified by one
            attribute in Active Directory.  Even if the user object is hidden from the
            global address book it will return that user.
            </summary>
      <param name="field">The field.</param>
      <param name="fieldValue">The field value.</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<User>();
            var user = rep.GetTeamMember(ADProperty.CommonId, "1002696");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetTeamMemberOrGroup(Rock.Framework.DirectoryServices.ADProperty,System.String)">
      <summary>
            Returns a single user object or group that can be uniquely identified by one
            attribute in Active Directory.  Even if the user object is hidden from the
            global address book it will return that user.
            </summary>
      <param name="field">The field.</param>
      <param name="fieldValue">The field value.</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<User>();
            var user = rep.GetTeamMember(ADProperty.CommonId, "1002696");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetTeamMembers(Rock.Framework.DirectoryServices.ADProperty,System.String,System.Boolean)">
      <summary>
            Gets team members by an <see cref="T:Rock.Framework.DirectoryServices.ADProperty" /> and a value.  Allows hidden accounts to be returned or not returned.
            </summary>
      <param name="field">The field.</param>
      <param name="fieldValue">The field value.</param>
      <param name="returnHiddenAccounts">if set to <c>true</c> [return hidden accounts].</param>
      <returns>collection of T</returns>
      <remarks>To do a wildcard search specify a * on one or both sides of the fieldValue.</remarks>
      <example>
        <code><![CDATA[
            // get all users in IT, even if they have been terminated in the last 30 days
            var rep = new ActiveDirectoryRepository<ITTeamMember>();
            var user = rep.GetTeamMembers(ADProperty.Team, "Technology", true);
            ]]></code>
        <code><![CDATA[
            // find all users that have smith in their name
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var user = rep.GetTeamMembers(ADProperty.LastName, "*smith*");
            ]]></code>
        <code><![CDATA[
            // find all users that have a first name that starts with "dan"
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var user = rep.GetTeamMembers(ADProperty.FirstName, "dan*");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetTeamMembersAndGroups(Rock.Framework.DirectoryServices.ADProperty,System.String,System.Boolean)">
      <summary>
            Gets team members and groups by an <see cref="T:Rock.Framework.DirectoryServices.ADProperty" /> and a value.  Allows hidden accounts to be returned or not returned.
            </summary>
      <param name="field">The field.</param>
      <param name="fieldValue">The field value.</param>
      <param name="returnHiddenAccounts">if set to <c>true</c> [return hidden accounts].</param>
      <returns>collection of T</returns>
      <remarks>To do a wildcard search specify a * on one or both sides of the fieldValue.</remarks>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetTeamMemberByObjectGuid(System.String)">
      <summary>
            Gets the team member by object GUID.
            </summary>
      <param name="id">The id.</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<IHRUser>();
            var user = rep.GetTeamMemberByObjectGuid("1c019845-746d-4c36-9b23-125a57f30d1d");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetTeamMembers(System.Object)">
      <summary>
            Gets the team members by an anonymous search criteria.  Does not return hidden accounts.  Wildcards are supported as well as 
            the combination of multiple values.  
            </summary>
      <remarks>The anonymous type is a dictionary of ADProperty enums as the key, and the search value as the value.  Example: new {FirstName="sara*", OfficeCity="Livonia" } 
            would find all users that names start with sara in Livonia.</remarks>
      <param name="anonymousSearchCriteria">The anonymous search criteria.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            // find all users with firstname keith
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetTeamMembers(new { FirstName = "keith" });
            ]]></code>
        <code><![CDATA[
            // get all of the users in Michigan with the lastname of smith
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetTeamMembers(new { State = "MI", LastName="smith" });
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetTeamMembers(System.Object,System.Boolean)">
      <summary>
            Gets the team members by an anonymous type search criteria with ability to return hidden accounts.
            Wildcards are supported as well as the combination of multiple values.  
            </summary>
      <remarks>The anonymous type is a dictionary of ADProperty enums as the key, and the search value as the value.  Example: new {FirstName="sara*", OfficeCity="Livonia" } 
            would find all users that names start with sara in Livonia.</remarks>
      <param name="anonymousSearchCriteria">The anonymous search criteria.</param>
      <param name="returnHiddenAccounts">if set to <c>true</c> [return hidden accounts].</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            // find all users with firstname keith
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetTeamMembers(new { FirstName = "keith" }, true);
            ]]></code>
        <code><![CDATA[
            // get all of the users in Michigan with the lastname of smith
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetTeamMembers(new { State = "MI", LastName="smith" }, true);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetTeamMembers(System.Collections.Generic.Dictionary{Rock.Framework.DirectoryServices.ADProperty,System.String})">
      <summary>
            Gets the team members by multiple search criteria using a of Dictionary&lt;ADProperty,string&gt;.
            </summary>
      <param name="searchCriteria">The search criteria.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            // find all users with lastname smith that work in Michigan
            Dictionary<ADProperty, string> dict = new Dictionary<ADProperty, string>();
            dict.Add(ADProperty.LastName, "*smith*");
            dict.Add(ADProperty.State, "MI");
            var users = rep.GetTeamMembers(dict);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetTeamMembers(System.String)">
      <summary>
            This method allows a developer to pass in any search filter he/she wants to
            return a list of users based on any type.
            </summary>
      <param name="ldapQuery">The LDAP query.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            // find the user account with a specific login
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetTeamMembers("(&(samaccountname=kelder))");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetTeamMembers(System.Collections.ObjectModel.Collection{System.String})">
      <summary>
            Takes a collection of distinguished names and returns team member data based on the type. 
            </summary>
      <param name="distinguishedNames">The distinguished names.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[ 
            Collection<string> dnames = new Collection<string>();
            dnames.Add(dn1);
            dnames.Add(dn2);
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetTeamMembers(dnames);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetTeamMembersEmployedHourly">
      <summary>
             Queries Active directory and retrieves all users that are paid hourly.
            </summary>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[ 
            var rep = new ActiveDirectoryRepository<NonSalariedTeamMembers>();
            var users = rep.GetTeamMembersEmployedHourly();
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.DistinguishedNameToObject(System.String)">
      <summary>
            Take a user's distinguished name and converts it to a user object.
            </summary>
      <param name="distinguishedName">Name of the distinguished.</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[ 
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var user = rep.DistinguishedNameToObject(@"CN=Elder\, Keith,OU=Users,OU=Livonia Users,OU=Livonia,DC=mi,DC=corp,DC=rockfin,DC=com");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.GetUsersInGroup(System.String)">
      <summary>
            Returns a collection of team members that are in a specified group.  Supports nested groups.  See remarks in docs.
            </summary>
      <remarks>
        <para>If the group being used does not have nested groups it is considerably faster to not use this and rather use 
            a query based on the distinguished name of the group using the memberOf attribute.  See <see cref="M:Rock.Framework.DirectoryServices.ADUtil.GetDistinguishedNameByCommonName(System.String)" /> 
            to get a distinguished name from a common name.</para>
      </remarks>
      <param name="group">The group.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[ 
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetUsersInGroup("IT ALL");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.IsUserInGroup(System.String,System.String)">
      <summary>
            Check if a user is in a AD group. It looks recursively into the groups.
            </summary>
      <param name="userName">
      </param>
      <param name="groupName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.IActiveDirectoryRepository`1.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1">
      <summary>
		Provides the ability to retrieve team member information from active directory by inheriting
		from <see cref="T:Rock.Framework.DirectoryServices.TeamMemberBase" /> and then adding additional properties needed.
	</summary>
      <remarks>
        <para>
          <h1>Using Active Directory</h1>
          <para>
				This is the main library that allows team member information to be retrieved from active directory.  It supports the ability for developers to create their own
				custom team member types in their own applications.  A base object is provided called <see cref="T:Rock.Framework.DirectoryServices.TeamMemberBase" /> that is an
				abstract class.  Developers inherit from this class and then add additional properties as needed for their applicaiton by applying
				the <see cref="T:Rock.Framework.DirectoryServices.DirectoryAttributeAttribute" />.
			</para>
        </para>
      </remarks>
      <typeparam name="T">
        <para>
			Each application can create their own custom Team Member entity that is fetched from active directory.  The type can be any object that
			has properties attributed with the <see cref="T:Rock.Framework.DirectoryServices.DirectoryAttributeAttribute" />.  Only properties with this attribute are loaded and fetched
			from active directory.
		</para>
        <code><![CDATA[
		[Serializable]
		public class IHRUser : TeamMemberBase
		{
			// Note: commonid and displayname are in the base class
			
			[DirectoryAttribute(ADProperty.FirstName)]
			public string FirstName { get; set; }

			[DirectoryAttribute(ADProperty.LastName)]
			public string LastName { get; set; }
			
			[DirectoryAttribute(ADProperty.TeamLeader)]
			public string TeamLeaderDN { get; set; }
		}

		]]></code>
      </typeparam>
      <example>
        <para>
          <h2>Optional Configuration</h2>
			This is the easy part. There isn't any configuration needed, it is completely optional and was mainly added for testing.
			That's right, you do not have to configure anything or do anything in your config file to use
			this library.  However, there is a way to specify a different LDAP Server and/or a different username/password
			if needed by adding the following attribute to
			the &lt;rock.framework&gt; section in your config file.  Here is a sample.
		</para>
        <para>
			Add the following DirectoryServicesSection.
		</para>
        <code><![CDATA[ 
			<sectionGroup name="rock.framework" type="Rock.Framework.Settings.Configuration.SettingsSectionGroup, Rock.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848" >
				<section name="environment" type="Rock.Framework.Settings.Configuration.EnvironmentSection, Rock.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848" requirePermission="false"/>
				<!-- THE FOLLOWING LINE NEEDS TO BE IN THIS SECTION -->
				<section name="directoryServices" type="Rock.Framework.Settings.Configuration.DirectoryServicesSection, Rock.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848" requirePermission="false"/>
			</sectionGroup>
			]]></code>
        <para>Once added, you can then add the directoryServices attribute as shown below.</para>
        <code><![CDATA[ 
			<rock.framework>
				<environment name="Test"/>
				<directoryServices ldapServer="LDAP://qcloud" />
			</rock.framework>
			]]></code>
        <para>
          <h2>Application Specific Types</h2>
			Developers should create their own unique team member objects and retrieve just the fields from active directory they are going to use.  See the example in the generic template section at the top
			of this page for a comprehensive example on how this is done using the <see cref="T:Rock.Framework.DirectoryServices.DirectoryAttributeAttribute" />.
		</para>
        <para>
          <h3>Creating and Using Custom Types</h3>
			The following TeamMember class is a full example utilizing all fields.  Do NOT copy and paste this full
			object.  Create your own and only include the properties you are going to use.
		</para>
        <code><![CDATA[
			/// <summary>
    /// Active Directory User. This sample entity represents all the <see cref="ADProperty"/> enumerations values.  
	/// Developers will create their own type as outlined here containing only the fields they need.
    /// </summary>
    [XmlRootAttribute("TeamMember", Namespace = "Rock.Framework.DirectoryServices", IsNullable = false)]
    [Serializable]
    public class TeamMember : TeamMemberBase
    {
        #region Properties
        /// <summary>
        /// User name of the user. Does not have the leading domain prefix.
        /// </summary>
        [DirectoryAttribute(ADProperty.UserName)]
        public string UserName { get; set; }


        /// <summary>
        /// Gets or sets the first name.
        /// </summary>
        /// <value>The first name.</value>
        [DirectoryAttribute(ADProperty.FirstName)]
        public string FirstName { get; set; }


        /// <summary>
        /// Gets or sets the last name.
        /// </summary>
        /// <value>The last name.</value>
        [DirectoryAttribute(ADProperty.LastName)]
        public string LastName { get; set; }


        /// <summary>
        /// Gets or sets the name of the maiden.
        /// </summary>
        /// <value>The name of the maiden.</value>
        [DirectoryAttribute(ADProperty.MaidenName)]
        public string MaidenName { get; set; }


        /// <summary>
        /// Gets or sets the email.
        /// </summary>
        /// <value>The email.</value>
        [DirectoryAttribute(ADProperty.Email)]
        public string Email { get; set; }

        /// <summary>
        /// The SIP address of the user that is used with
        /// windows communicator.
        /// </summary>
        /// <value>The sip address.</value>
        [DirectoryAttribute(ADProperty.SipAddress)]
        public string SipAddress { get; set; }

        /// <summary>
        /// Full phone number of user.
        /// </summary>
        [DirectoryAttribute(ADProperty.Phone)]
        public string Phone { get; set; }

        /// <summary>
        /// Last five digits of phone number.
        /// </summary>
        /// <value>The extension.</value>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
        public string Extension
        {
            get
            {
                string tmp;
                //TODO: Fix this so the ext. is set and read from the extension property
                try
                {
                    tmp = Phone.Substring(8);
                    return tmp.Replace("-", "");
                }
                catch
                {
                    return "XXXXX";
                }
            }

        }

        /// <summary>
        /// Gets or sets the team.
        /// </summary>
        /// <value>The team.</value>
        [DefaultValue("N/A")]
        [DirectoryAttribute(ADProperty.Team)]
        public string Team { get; set; }


        /// <summary>
        /// Gets or sets the sub team.
        /// </summary>
        /// <value>The sub team.</value>
        [DefaultValue("N/A")]
        [DirectoryAttribute(ADProperty.SubTeam)]
        public string SubTeam { get; set; }


        /// <summary>
        /// Gets or sets the team leader distinguished name.
        /// </summary>
        /// <value>The team leader DN.</value>
        [DirectoryAttribute(ADProperty.TeamLeader)]
        public string TeamLeaderDN { get; set; }

        /// <summary>
        /// Gets or sets the cell phone.  N/A is returned if the user doesn't have one.
        /// </summary>
        /// <value>The cell phone.</value>
        [DefaultValue("N/A")]
        [DirectoryAttribute(ADProperty.CellPhone)]
        public string CellPhone { get; set; }


        /// <summary>
        /// Gets or sets the employee id.
        /// </summary>
        /// <value>The employee id.</value>
        [DirectoryAttribute(ADProperty.EmployeeId)]
        public string EmployeeId { get; set; }


        /// <summary>
        /// Gets or sets the hire date.
        /// </summary>
        /// <value>The hire date.</value>
        [DirectoryAttribute(ADProperty.HireDate)]
        public DateTime HireDate { get; set; }

        /// <summary>
        /// Gets or sets the fax number.  N/A is returned if one isn't assigned.
        /// </summary>
        /// <value>The fax.</value>
        [DefaultValue("N/A")]
        [DirectoryAttribute(ADProperty.Fax)]
        public string Fax { get; set; }


        /// <summary>
        /// Gets or sets the team members that report to this team member.
        /// </summary>
        /// <value>The team members.</value>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays"), DirectoryAttribute(ADProperty.TeamMembers)]
        public string[] TeamMembers { get; set; }

        /// <summary>
        /// Gets the boolean value to denote if the user has anyone that reports to them.
        /// </summary>
        /// <value><c>true</c> if this instance is leader; otherwise, <c>false</c>.</value>
        public bool IsLeader 
        {
            get
            {
                if (TeamMembers.Length > 0) return true;
                return false;
            }
        }

        /// <summary>
        /// Self distinguished name.
        /// </summary>
        /// <value>The distinguished name.</value>
        [DirectoryAttribute(ADProperty.DistinguishedName)]
        public string DN { get; set; }

        /// <summary>
        /// Gets or sets the state the user is located in.
        /// </summary>
        /// <value>The state.</value>
        [DirectoryAttribute(ADProperty.State)]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the zip.
        /// </summary>
        /// <value>The zip.</value>
        [DirectoryAttribute(ADProperty.Zip)]
        public string Zip { get; set; }

        /// <summary>
        /// Gets or sets the city the user is located in.
        /// </summary>
        /// <value>The office city.</value>
        [DirectoryAttribute(ADProperty.OfficeCity)]
        public string OfficeCity { get; set; }

        /// <summary>
        /// Gets or sets the office.
        /// </summary>
        /// <value>The office.</value>
        [DirectoryAttribute(ADProperty.Office)]
        public string Office { get; set; }

        /// <summary>
        /// The company the user works for.
        /// </summary>
        /// <value>The company.</value>
        [DirectoryAttribute(ADProperty.Company)]
        public string Company { get; set; }

        /// <summary>
        /// Gets or sets the team member's title.
        /// </summary>
        /// <value>The title.</value>
        [DirectoryAttribute(ADProperty.Title)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the pager.  N/A is returned if one isn't identified.
        /// </summary>
        /// <value>The pager.</value>
        [DefaultValue("N/A")]
        [DirectoryAttribute(ADProperty.Pager)]
        public string Pager { get; set; }

        /// <summary>
        /// TGets or sets the AD object guid.
        /// </summary>
        /// <value>The object GUID.</value>
        [DirectoryAttribute(ADProperty.ObjectGuid)]
        public Guid ObjectGuid { get; set; }


        /// <summary>
        /// Gets the a boolean value denoting the user's object is hidden in active directory.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this instance is object hidden; otherwise, <c>false</c>.
        /// </value>
        [DirectoryAttribute(ADProperty.IsObjectHidden)]
        public bool IsObjectHidden { get; set; }

        /// <summary>
        /// Gets or sets the if the user is hourly or salary based.
        /// </summary>
        /// <value>The type of the employment.</value>
        [DirectoryAttribute(ADProperty.IsHourly)]
        public EmploymentType EmploymentType { get; set; }


        /// <summary>
        /// Gets or sets the if the team member has team members that report to them that are hourly. 
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this instance has hourly employees; otherwise, <c>false</c>.
        /// </value>
        [DirectoryAttribute(ADProperty.HasHourlyEmployees)]
        public bool HasHourlyEmployees { get; set; }



        /// <summary>
        /// Gets or sets the groups the team member belongs to.  Some may be distribution lists, others may be security related.
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays"), XmlElement("Groups")]
        [DirectoryAttribute(ADProperty.Groups)]
        public string[] Groups { get; set; }


        /// <summary>
        /// Gets the link to the team member's mysite page in Rockworld.
        /// </summary>
        /// <value>My site.</value>
        public string MySite
        {
            get
            {
                if (UserName != null)
                {
                    return "http://rockworld/MySite/Public.aspx?accountname=MI%5c" + UserName;
                }
                return "#";
            }
        }

        /// <summary>
        /// Gets the URL of the team member's uncompressed picture.
        /// </summary>
        /// <value>The picture URL.</value>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1056:UriPropertiesShouldNotBeStrings")]
        [DirectoryAttribute(ADProperty.PictureUrl)]
        public string PictureUrl { get; set; }        

        /// <summary>
        /// Gets the URL of the team member's thumbnail picture.
        /// </summary>
        /// <value>The picture thumbnail URL.</value>
        public string PictureThumbnailUrl
        {
            get
            {
                if (PictureUrl != null)
                {
                    string path = PictureUrl.Replace("http://rockworldapps/", "../");
                    return "http://rockworldapps/roster/createthumb.aspx?image=" + path + "&size=60";
                }
                else
                {
                    return "http://rockworldapps/badgephotos/noimage.png";
                }
            }
        }

        /// <summary>
        /// Gets or sets if the team member is remote (work from home).
        /// </summary>
        /// <value>The remote.</value>
        [DirectoryAttribute(ADProperty.Remote)]
        public string Remote { get; set; }
        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamMember"/> class.
        /// </summary>
        public TeamMember()
        { }
    }
			
		public class Default : Page 
		{
			IHRUser user;
			
			public Default
			{
				GetCurrentUser();
			}
			
			void GetCurrentUser()
			{
				var rep = ActiveDirectoryRepository<IHRUser>();
				var user = rep.GetByUserName(Page.User.Identity.Name);
			}
		}
		
		// Custom application entity
		[Serializable]
		public class IHRUser : TeamMemberBase
		{

			[DirectoryAttribute(ADProperty.FirstName)]
			public string FirstName { get; set; }

			[DirectoryAttribute(ADProperty.LastName)]
			public string LastName { get; set; }

			[DirectoryAttribute(ADProperty.TeamLeader)]
			public string TeamLeaderDN { get; set; }

			/// <summary>
			/// This uses a lazy loading pattern. We don't get it until it is requested.
			//</summary>
			private IHRTeamLeader _teamLeader;
			public IHRTeamLeader TeamLeader
			{
				get
				{
					if (_teamLeader == null)
					{
						_teamLeader = new IHRTeamLeader();
						ActiveDirectoryRepository<IHRTeamLeader> rep = new ActiveDirectoryRepository<IHRTeamLeader>();
						_teamLeader = rep.GetTeamMember(ADProperty.DistinguishedName, TeamLeaderDN);
					}
					return _teamLeader;
				}
		

			public IHRUser()
			{	}
		}
		
		// entity to represent team leader hiearchy
		public class IHRTeamLeader : TeamMemberBase
		{
			[DirectoryAttribute(ADProperty.FirstName)]
			public string FirstName { get; set; }

			[DirectoryAttribute(ADProperty.LastName)]
			public string LastName { get; set; }

			public IHRTeamLeader()
			{

			}
		}
		]]></code>
        <para>
          <h2>Examples</h2>
        </para>
        <para>
          <h3>Get Team Members By Phone</h3>
			Note:  The phone number specified has to be in the following format since that is how they are stored in Active Directory:  (xxx) xxx-xxxx
		</para>
        <code><![CDATA[
		    public void DirectoryServices_Query_By_Phone()
			{
				var rep = new ActiveDirectoryRepository<TeamMember>();
				var users = rep.GetTeamMembers(ADProperty.Phone, "(734) 805-7841", false);
			}
		]]></code>
        <para>
          <h3>Get Team Members In A Specific Group Where There Are No Nested Groups</h3>
			This query uses the "memberOf" attribute in active directory.  This can be used in groups where there are not nested groups.
		</para>
        <code><![CDATA[
		public void DirectoryServices_Query_By_MemberOf()
        {
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetTeamMembers(ADProperty.Groups, ADUtil.GetDistinguishedNameByCommonName("IT Team Core Engineering"), false);
        }
		]]></code>
        <para>
          <h3>Get Team Member by Extension</h3>
        </para>
        <code><![CDATA[
		   public void DirectoryServices_Query_By_Extension()
			{
				var rep = new ActiveDirectoryRepository<TeamMember>();
				var user = rep.GetByExtension("57841");
			}
		]]></code>
        <para>
          <h3>Get Team Members By Custom LDAP Query</h3>
			This override allows one to query any way they want in active directory as long as a user object is returned (does not support group, computer object types etc).
		</para>
        <code><![CDATA[
		   public void DirectoryServices_Query_By_Filter()
			{
				var rep = new ActiveDirectoryRepository<TeamMember>();
				var users = rep.GetTeamMembers("(&(samaccountname=kelder))");
			}
		]]></code>
        <para>
          <h3>
				Get Team Members By Specific <see cref="T:Rock.Framework.DirectoryServices.ADProperty" /> Attributes
			</h3>
			There are a number of active directory attributes.  We've made them simple by creating a comprehensive enumeration called <see cref="T:Rock.Framework.DirectoryServices.ADProperty" />.
			For each enumeration we added a description attribute with the "real" attribute used by active directory.  As a side not, a description value can be gotten by using the extension method for enumerations
			called <see cref="M:Rock.Framework.Extensions.EnumExtensions.Description(System.Enum)" />.
		</para>
        <code><![CDATA[
		   public void DirectoryServices_Query_By_State()
	        {
		        var rep = new ActiveDirectoryRepository<TeamMember>();
			    var users = rep.GetTeamMembers(ADProperty.State, "AZ", false);
			}
		]]></code>
        <para>
          <h3>Get Team Members Using Anonymous Query and Multiple Fields</h3>
			By using an anonymous type of ADProperties, a query can be created to query team members and also allow for multiple parameters.
			The following query returns all team members with the lastname of Smith that are located in Michigan.
		</para>
        <code><![CDATA[ 
			   public void DirectoryServices_Query_GetTeamMembersBy_AnonymousType_MultiQuery()
				{
					var rep = new ActiveDirectoryRepository<TeamMember>();
					var users = rep.GetTeamMembers(new { State = "MI", LastName="smith" });
					Assert.IsTrue(users.Count > 1);
				}
			]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1" /> class.
            </summary>
      <remarks>
            When an instance is created the first time, another process is kicked off on another thread 
            to build up a directory cache of user objects.  The reason this cache is built up is to speed up 
            queries which query nested groups.  Performing queries on large nested groups can take a considerable 
            amount of time since there is recursion involved to grab each user from the group and check which 
            type of object they have in active directory.  This cache is loaded only once during the execution of the 
            application.
            </remarks>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.#ctor(Rock.Framework.Settings.Configuration.IDirectoryServicesConfiguration)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1" /> class.
            </summary>
      <param name="config">The config.</param>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1" /> class.
            </summary>
      <param name="userName">Name of the user.</param>
      <param name="password">The password.</param>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1" /> class.
            </summary>
      <param name="ldapServer">The LDAP server.</param>
      <param name="userName">Name of the user.</param>
      <param name="password">The password.</param>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.LoadCache">
      <summary>
            In order to make searching by groups faster, we start this on a background thread so a cache 
            can be built of the distinguished names that are either a group or a user.
            </summary>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.SearchResultToUserObject(System.DirectoryServices.SearchResult)">
      <summary>
            This method is what does all the work in converting from active directory
            to a user object.
            </summary>
      <param name="searchResult">The search result.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetByCommonId(System.Int32)">
      <summary>
            Gets the team member by common id.
            </summary>
      <param name="id">The id.</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<LolaUser>();
            var user = rep.GetTeamMember(ADProperty.CommonId, "1002696");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetByUserName(System.String)">
      <summary>
            Gets a team member based on their username.
            </summary>
      <param name="userName">Name of the user.</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<TaraUser>();
            var user = rep.GetByUserName(User.Identity.Name);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetByOfficeCity(System.String)">
      <summary>
            Gets all of the team members in a specific office city.
            </summary>
      <param name="location">The location.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<CariUser>();
            var user = rep.GetByOfficeCity("Livonia");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetByName(System.String,System.String)">
      <summary>
            Gets a collection of team members by name.
            </summary>
      <param name="firstName">The first name.</param>
      <param name="lastName">The last name.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<AMPUser>();
            var user = rep.GetByName("dan", "gilbert");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetByFax(System.String)">
      <summary>
            Gets a team member the by fax.
            </summary>
      <param name="fax">The fax # in the format of (xxx) xxx-xxxx".</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var user = rep.GetByFax("(123) 123-1234");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetByExtension(System.String)">
      <summary>
            Gets a team member by extension.  
            </summary>
      <param name="extension">The extension.</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<CTIUser>();
            var user = rep.GetByExtension("51999");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetByTeam(System.String)">
      <summary>
            Gets team members by their team.
            </summary>
      <param name="team">The team.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<YouCustomUserEntity>();
            var user = rep.GetByTeam("Technology");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetPaidHourly">
      <summary>
            Gets team members that are paid hourly.
            </summary>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<HourlyTeamMember>();
            var user = rep.GetPaidHourly();
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetBySubTeam(System.String)">
      <summary>
            Gets team members by sub team.
            </summary>
      <param name="subTeam">The sub team.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<CoreEngineer>();
            var user = rep.GetBySubTeam("Core Engineering");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetTeamMember(Rock.Framework.DirectoryServices.ADProperty,System.String)">
      <summary>
            Returns a single user object that can be uniquely identified by one
            attribute in Active Directory.  Even if the user object is hidden from the
            global address book it will return that user.
            </summary>
      <param name="field">The field.</param>
      <param name="fieldValue">The field value.</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<User>();
            var user = rep.GetTeamMember(ADProperty.CommonId, "1002696");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetTeamMemberOrGroup(Rock.Framework.DirectoryServices.ADProperty,System.String)">
      <summary>
            Returns a single user object or group that can be uniquely identified by one
            attribute in Active Directory.  Even if the user object is hidden from the
            global address book it will return that user.
            </summary>
      <param name="field">The field.</param>
      <param name="fieldValue">The field value.</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<User>();
            var user = rep.GetTeamMember(ADProperty.CommonId, "1002696");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetTeamMembers(Rock.Framework.DirectoryServices.ADProperty,System.String,System.Boolean)">
      <summary>
            Gets team members by an <see cref="T:Rock.Framework.DirectoryServices.ADProperty" /> and a value.  Allows hidden accounts to be returned or not returned.
            </summary>
      <param name="field">The field.</param>
      <param name="fieldValue">The field value.</param>
      <param name="returnHiddenAccounts">if set to <c>true</c> [return hidden accounts].</param>
      <returns>collection of T</returns>
      <remarks>To do a wildcard search specify a * on one or both sides of the fieldValue.</remarks>
      <example>
        <code><![CDATA[
            // get all users in IT, even if they have been terminated in the last 30 days
            var rep = new ActiveDirectoryRepository<ITTeamMember>();
            var user = rep.GetTeamMembers(ADProperty.Team, "Technology", true);
            ]]></code>
        <code><![CDATA[
            // find all users that have smith in their name
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var user = rep.GetTeamMembers(ADProperty.LastName, "*smith*");
            ]]></code>
        <code><![CDATA[
            // find all users that have a first name that starts with "dan"
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var user = rep.GetTeamMembers(ADProperty.FirstName, "dan*");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetTeamMembersAndGroups(Rock.Framework.DirectoryServices.ADProperty,System.String,System.Boolean)">
      <summary>
            Gets team members and groups by an <see cref="T:Rock.Framework.DirectoryServices.ADProperty" /> and a value.  Allows hidden accounts to be returned or not returned.
            </summary>
      <param name="field">The field.</param>
      <param name="fieldValue">The field value.</param>
      <param name="returnHiddenAccounts">if set to <c>true</c> [return hidden accounts].</param>
      <returns>collection of T</returns>
      <remarks>To do a wildcard search specify a * on one or both sides of the fieldValue.</remarks>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetTeamMemberByObjectGuid(System.String)">
      <summary>
            Gets the team member by object GUID.
            </summary>
      <param name="id">The id.</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[
            var rep = new ActiveDirectoryRepository<IHRUser>();
            var user = rep.GetTeamMemberByObjectGuid("1c019845-746d-4c36-9b23-125a57f30d1d");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetTeamMembers(System.Object)">
      <summary>
            Gets the team members by an anonymous search criteria.  Does not return hidden accounts.  Wildcards are supported as well as 
            the combination of multiple values.  
            </summary>
      <remarks>The anonymous type is a dictionary of ADProperty enums as the key, and the search value as the value.  Example: new {FirstName="sara*", OfficeCity="Livonia" } 
            would find all users that names start with sara in Livonia.</remarks>
      <param name="anonymousSearchCriteria">The anonymous search criteria.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            // find all users with firstname keith
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetTeamMembers(new { FirstName = "keith" });
            ]]></code>
        <code><![CDATA[
            // get all of the users in Michigan with the lastname of smith
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetTeamMembers(new { State = "MI", LastName="smith" });
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetTeamMembers(System.Object,System.Boolean)">
      <summary>
            Gets the team members by an anonymous type search criteria with ability to return hidden accounts.
            Wildcards are supported as well as the combination of multiple values.  
            </summary>
      <remarks>The anonymous type is a dictionary of ADProperty enums as the key, and the search value as the value.  Example: new {FirstName="sara*", OfficeCity="Livonia" } 
            would find all users that names start with sara in Livonia.</remarks>
      <param name="anonymousSearchCriteria">The anonymous search criteria.</param>
      <param name="returnHiddenAccounts">if set to <c>true</c> [return hidden accounts].</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            // find all users with firstname keith
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetTeamMembers(new { FirstName = "keith" }, true);
            ]]></code>
        <code><![CDATA[
            // get all of the users in Michigan with the lastname of smith
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetTeamMembers(new { State = "MI", LastName="smith" }, true);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetTeamMembers(System.Collections.Generic.Dictionary{Rock.Framework.DirectoryServices.ADProperty,System.String})">
      <summary>
            Gets the team members by multiple search criteria using a of Dictionary&lt;ADProperty,string&gt;.
            </summary>
      <param name="searchCriteria">The search criteria.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            // find all users with lastname smith that work in Michigan
            Dictionary<ADProperty, string> dict = new Dictionary<ADProperty, string>();
            dict.Add(ADProperty.LastName, "*smith*");
            dict.Add(ADProperty.State, "MI");
            var users = rep.GetTeamMembers(dict);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetTeamMembers(System.String)">
      <summary>
            This method allows a developer to pass in any search filter he/she wants to
            return a list of users based on any type.
            </summary>
      <param name="ldapQuery">The LDAP query.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[
            // find the user account with a specific login
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetTeamMembers("(&(samaccountname=kelder))");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetTeamMembers(System.Collections.ObjectModel.Collection{System.String})">
      <summary>
            Takes a collection of distinguished names and returns team member data based on the type. 
            </summary>
      <param name="distinguishedNames">The distinguished names.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[ 
            Collection<string> dnames = new Collection<string>();
            dnames.Add(dn1);
            dnames.Add(dn2);
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetTeamMembers(dnames);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetTeamMembersEmployedHourly">
      <summary>
             Queries Active directory and retrieves all users that are paid hourly.
            </summary>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[ 
            var rep = new ActiveDirectoryRepository<NonSalariedTeamMembers>();
            var users = rep.GetTeamMembersEmployedHourly();
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.DistinguishedNameToObject(System.String)">
      <summary>
            Take a user's distinguished name and converts it to a user object.
            </summary>
      <param name="distinguishedName">Name of the distinguished.</param>
      <returns>type of T</returns>
      <example>
        <code><![CDATA[ 
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var user = rep.DistinguishedNameToObject(@"CN=Elder\, Keith,OU=Users,OU=Livonia Users,OU=Livonia,DC=mi,DC=corp,DC=rockfin,DC=com");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.GetUsersInGroup(System.String)">
      <summary>
            Returns a collection of team members that are in a specified group.  Supports nested groups.  See remarks in docs.
            </summary>
      <remarks>
        <para>If the group being used does not have nested groups it is considerably faster to not use this and rather use 
            a query based on the distinguished name of the group using the memberOf attribute.  See <see cref="M:Rock.Framework.DirectoryServices.ADUtil.GetDistinguishedNameByCommonName(System.String)" /> 
            to get a distinguished name from a common name.</para>
      </remarks>
      <param name="group">The group.</param>
      <returns>collection of T</returns>
      <example>
        <code><![CDATA[ 
            var rep = new ActiveDirectoryRepository<TeamMember>();
            var users = rep.GetUsersInGroup("IT ALL");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.IsUserInGroup(System.String,System.String)">
      <summary>
            Check if a user is in a AD group. It looks recursively into the groups.
            </summary>
      <param name="userName">
      </param>
      <param name="groupName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Rock.Framework.DirectoryServices.ActiveDirectoryRepository`1" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="T:Rock.Framework.DirectoryServices.ADProperty">
      <summary>
            Contains a comprehensive set of active directory attributes used to retrieve information from active directory.  
            Each enumeration uses the <see cref="T:System.ComponentModel.DescriptionAttribute" /> attribute to hold the actual active directory attribute.
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.UserName">
      <summary>
            User name (sAMAccountName)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.FirstName">
      <summary>
            First name (givenName)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.LastName">
      <summary>
            Last name (sn)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.DisplayName">
      <summary>
            Display name of the user in the format of LastName, FirstName (displayName)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.MaidenName">
      <summary>
            Maiden name (extensionattribute9)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.Email">
      <summary>
            Email address (mail)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.SipAddress">
      <summary>
            SIP Address used with communicator and other presence applications (msRTCSIP-PrimaryUserAddress)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.Phone">
      <summary>
            Phone (telephonenumber)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.CommonId">
      <summary>
            CommonId (extensionattribute8)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.Team">
      <summary>
            Team (description)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.SubTeam">
      <summary>
            Sub team (department)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.CellPhone">
      <summary>
            Mobile phone # (mobile)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.EmployeeId">
      <summary>
            EmployeeId that is in Ultipro (extensionattribute1)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.HireDate">
      <summary>
            The date the team member was hired (extensionattribute5)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.Fax">
      <summary>
            Fax (facsimiletelephonenumber)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.DistinguishedName">
      <summary>
            Fully qualified distinguished name (distinguishedName)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.State">
      <summary>
            State (st)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.Zip">
      <summary>
            Zip (postalcode)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.OfficeCity">
      <summary>
            City the team member is in (physicalDeliveryOfficeName)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.Company">
      <summary>
            Company the team member works for (company)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.Title">
      <summary>
            Team member's title (title)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.Pager">
      <summary>
            Pager if applicable (pager)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.ObjectGuid">
      <summary>
            Active Directory GUID (objectguid)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.IsHourly">
      <summary>
            Denotes if the team member is hourly or salaried. Uses extensionAttribute4 which stores either "h" or "s". (extensionattribute4)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.HasHourlyEmployees">
      <summary>
            Denotes if the team member has team members that report to them. (extensionattribute2)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.Groups">
      <summary>
            Uses the "memberof" attribute.  Commonly used to search for users in a given group using the fully qualified distinguished name or to 
            hold all of the groups a user is apart of.  When used as a query, only those users that are placed in the group will be returned, nested 
            groups are not supported. (memberof)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.TeamMembers">
      <summary>
            Team members that report to a given account. (directreports)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.IsObjectHidden">
      <summary>
            Denotes wheither the team member's account is hidden from the global address book.  Terminated accounts are hidden, and other 
            admin accounts are hidden. (msexchhidefromaddresslists)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.TeamLeader">
      <summary>
            Provides the Team Leader's DN (manager).
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.Office">
      <summary>
            The office the team member is in. (l)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.Remote">
      <summary>
            Yes if a user is remote, no if they are not. (extensionattribute13)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.PictureUrl">
      <summary>
            The URL of the picture of the user. (extensionattribute6)
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.SignatureUrl">
      <summary>
            The URL to be used in the signature. Updated from the mail signature application.
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.Extension">
      <summary>
            The phone extension number (typically 5 digits).
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.ADProperty.UnixId">
      <summary>
            The Unix Id.
            </summary>
    </member>
    <member name="T:Rock.Framework.DirectoryServices.ADUser">
      <summary>
            Active Directory User. An entity that represents all the <see cref="T:Rock.Framework.DirectoryServices.ADProperty" /> enumerations values.  NOTE: Developers should create their own 
            type of this object as to not put extra strain on active directory servers.
            </summary>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ADUser.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.DirectoryServices.ADUser" /> class.
            </summary>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.UserName">
      <summary>
            User name of the user. Does not have the leading domain prefix.
            </summary>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.FirstName">
      <summary>
            Gets or sets the first name.
            </summary>
      <value>The first name.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.LastName">
      <summary>
            Gets or sets the last name.
            </summary>
      <value>The last name.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.MaidenName">
      <summary>
            Gets or sets the name of the maiden.
            </summary>
      <value>The name of the maiden.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.DisplayName">
      <summary>
            Display name of user in the format of LastName, FirstName
            </summary>
      <value>The display name.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.Email">
      <summary>
            Gets or sets the email.
            </summary>
      <value>The email.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.SipAddress">
      <summary>
            The SIP address of the user that is used with
            windows communicator.
            </summary>
      <value>The sip address.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.Phone">
      <summary>
            Full phone number of user.
            </summary>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.Extension">
      <summary>
            Last five digits of phone number.
            </summary>
      <value>The extension.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.CommonId">
      <summary>
            Common ID
            </summary>
      <value>The common id.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.Team">
      <summary>
            Gets or sets the team.
            </summary>
      <value>The team.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.SubTeam">
      <summary>
            Gets or sets the sub team.
            </summary>
      <value>The sub team.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.TeamLeaderDN">
      <summary>
            Gets or sets the team leader distinguished name.
            </summary>
      <value>The team leader DN.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.CellPhone">
      <summary>
            Gets or sets the cell phone.  N/A is returned if the user doesn't have one.
            </summary>
      <value>The cell phone.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.EmployeeId">
      <summary>
            Gets or sets the employee id.
            </summary>
      <value>The employee id.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.HireDate">
      <summary>
            Gets or sets the hire date.
            </summary>
      <value>The hire date.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.Fax">
      <summary>
            Gets or sets the fax number.  N/A is returned if one isn't assigned.
            </summary>
      <value>The fax.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.TeamMembers">
      <summary>
            Gets or sets the team members that report to this team member.
            </summary>
      <value>The team members.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.IsLeader">
      <summary>
            Gets the boolean value to denote if the user has anyone that reports to them.
            </summary>
      <value>
        <c>true</c> if this instance is leader; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.DN">
      <summary>
            Self distinguished name.
            </summary>
      <value>The distinguished name.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.State">
      <summary>
            Gets or sets the state the user is located in.
            </summary>
      <value>The state.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.Zip">
      <summary>
            Gets or sets the zip.
            </summary>
      <value>The zip.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.OfficeCity">
      <summary>
            Gets or sets the city the user is located in.
            </summary>
      <value>The office city.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.Office">
      <summary>
            Gets or sets the office.
            </summary>
      <value>The office.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.Company">
      <summary>
            The company the user works for.
            </summary>
      <value>The company.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.Title">
      <summary>
            Gets or sets the team member's title.
            </summary>
      <value>The title.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.Pager">
      <summary>
            Gets or sets the pager.  N/A is returned if one isn't identified.
            </summary>
      <value>The pager.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.ObjectGuid">
      <summary>
            TGets or sets the AD object guid.
            </summary>
      <value>The object GUID.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.IsObjectHidden">
      <summary>
            Gets the a boolean value denoting the user's object is hidden in active directory.
            </summary>
      <value>
        <c>true</c> if this instance is object hidden; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.EmploymentType">
      <summary>
            Gets or sets the if the user is hourly or salary based.
            </summary>
      <value>The type of the employment.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.HasHourlyEmployees">
      <summary>
            Gets or sets the if the team member has team members that report to them that are hourly. 
            </summary>
      <value>
        <c>true</c> if this instance has hourly employees; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.Groups">
      <summary>
            Gets or sets the groups the team member belongs to.  Some may be distribution lists, others may be security related.
            </summary>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.MySite">
      <summary>
            Gets the link to the team member's mysite page in Rockworld.
            </summary>
      <value>My site.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.PictureUrl">
      <summary>
            Gets the URL of the team member's uncompressed picture.
            </summary>
      <value>The picture URL.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.PictureThumbnailUrl">
      <summary>
            Gets the URL of the team member's thumbnail picture.
            </summary>
      <value>The picture thumbnail URL.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.Remote">
      <summary>
            Gets or sets if the team member is remote (work from home).
            </summary>
      <value>The remote.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ADUser.UnixId">
      <summary>
            Gets or sets the unix id.
            </summary>
      <value>
            The unix id.
            </value>
    </member>
    <member name="T:Rock.Framework.DirectoryServices.ADUtil">
      <summary>
            Active Directory utilities.
            </summary>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ADUtil.GetDistinguishedNameByCommonName(System.String)">
      <summary>
            Gets the name of the distinguished name by common name.
            </summary>
      <param name="commonName">Common name</param>
      <returns>fully qualified distinguished name</returns>
      <example>elder, keith or "IT ALL"</example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ADUtil.GetSubTeams">
      <summary>
            Returns a read only collection of sub teams from Active Directory.
            This method goes through all team member accounts and builds a unique list of sub teams. 
            </summary>
      <remarks>The result of this method should be cached in the calling application.  Do not call this repeatedly in an application, be sure to cache the result.</remarks>
      <returns>list of Sub-teams</returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ADUtil.GetTeams">
      <summary>
            Retrieves a list of all of the teams in the company.
            This method goes through all active employee objects and builds a unique list of team names
            using the description field in AD.
            </summary>
      <remarks>
            The result of this method should be cached in the calling application.  Do not call this repeatedly in an application.  
            Team names that start with an "_" and "disabled windows user account" are not returned.
            </remarks>
      <returns>list of team names</returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.ADUtil.GetLocations">
      <summary>
            Returns a read only collection of Locations from Active Directory.
            This method goes through all team member accounts and builds a unique list of Locations. 
            </summary>
      <remarks>The result of this method should be cached in the calling application.  Do not call this repeatedly in an application, be sure to cache the result.</remarks>
      <returns>list of Locations</returns>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ConfigSettings.UserName">
      <summary>
            Gets the name of the user.
            </summary>
      <value>The name of the user.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ConfigSettings.Password">
      <summary>
            Gets the password.
            </summary>
      <value>The password.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.ConfigSettings.Server">
      <summary>
            Gets the server.  Uses the default value unless one is specified in the config file.
            </summary>
      <value>The server.</value>
    </member>
    <member name="T:Rock.Framework.DirectoryServices.DirectoryAttributeAttribute">
      <summary>
            Loads property from active directory.
            </summary>
      <example>
        <code>
                public class TeamMember : TeamMemberBase
            	{
            		[DirectoryAttribute(ADProperty.Email)]
            		public string Email { get; set; }
            	}
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryAttributeAttribute.#ctor(Rock.Framework.DirectoryServices.ADProperty)">
      <summary>
            Creates a new attribute binding attribute for a entity class field or property.
            </summary>
      <param name="attribute">Name of the attribute to query for.</param>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.DirectoryAttributeAttribute.Attribute">
      <summary>
            Name of the attribute to query for.
            </summary>
    </member>
    <member name="T:Rock.Framework.DirectoryServices.DirectoryServicesException">
      <summary>
            An exception thrown when the login specified in the IsSecurityGroup method is in AD, but is not a name of a group
            </summary>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesException.#ctor">
      <summary>
            The default constructor for a DirectoryServicesException
            </summary>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesException.#ctor(System.String)">
      <summary>
            Constructor for DirectoryServicesException with custom message
            </summary>
      <param name="message">The message you want to display in the exception</param>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesException.#ctor(System.String,System.Exception)">
      <summary>
            Constructor for DirectoryServicesException with custom message and an inner exception
            </summary>
      <param name="message">The message you want to display in the exception</param>
      <param name="innerException">The Exception instance that caused the current exception</param>
    </member>
    <member name="T:Rock.Framework.DirectoryServices.DirectoryServicesUtilities">
      <summary>
            DirectoryServicesUtils class. Provides methods to manipulate AD Objects.
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.DirectoryServicesUtilities._rootDsePath">
      <summary>
            (Root DSE is a set of standard operational attributes
             that the user can read to find out fundamental characteristics of the directory and the server.)
            </summary>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.LookupAccountSid(System.String,System.Byte[],System.Text.StringBuilder,System.UInt32@,System.Text.StringBuilder,System.UInt32@,Rock.Framework.DirectoryServices.DirectoryServicesUtilities.SID_NAME_USE@)">
      <summary>
            Lookups the account sid.
            </summary>
      <param name="lpSystemName">Name of the lp system.</param>
      <param name="Sid">The sid.</param>
      <param name="lpName">Name of the lp.</param>
      <param name="cchName">Name of the CCH.</param>
      <param name="ReferencedDomainName">Name of the referenced domain.</param>
      <param name="cchReferencedDomainName">Name of the CCH referenced domain.</param>
      <param name="peUse">The pe use.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.IsGroup(System.Byte[])">
      <summary>
            Determines whether the specified sid is group.
            </summary>
      <param name="sid">The sid.</param>
      <returns>
        <c>true</c> if the specified sid is group; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.IsGroup(System.String)">
      <summary>
            Determines whether the specified login is group.
            </summary>
      <param name="login">The login.</param>
      <returns>
        <c>true</c> if the specified login is group; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.IsSecurityGroup(System.String)">
      <summary>
            Determines whether the specified group is a security group.
            </summary>
      <param name="group">The group name.</param>
      <returns>
        <c>true</c> if the specified group is a security group; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.ConvertSidToString(System.Byte[])">
      <summary>
            Converts the owner to string.
            </summary>
      <param name="sidBytes">The owner bytes.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.ConvertStringToSid(System.String)">
      <summary>
            Converts the string to owner.
            </summary>
      <param name="sid">The owner.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.GetMemberInfo(System.String,System.String@,System.Boolean@)">
      <summary>
            Gets the member info.
            </summary>
      <param name="sid">The sid.</param>
      <param name="memberName">Name of the member.</param>
      <param name="isLocal">if set to <c>true</c> [is local].</param>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.GetMemberInfo(System.String,System.String@,System.Boolean@,System.Boolean@)">
      <summary>
            Gets the member info.
            </summary>
      <param name="sid">The object owner.</param>
      <param name="memberName">Name of the member.</param>
      <param name="isAGroup">if set to <c>true</c> [is A group].</param>
      <param name="isLocal">if set to <c>true</c> [is local].</param>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.ExecuteLDAPQuery(System.String)">
      <summary>
            Executes the LDAP query.
            </summary>
      <param name="lDapQuery">The l dap query.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.TestLDAPQuery(System.String)">
      <summary>
            Executes the LDAP query.
            </summary>
      <param name="lDapQuery">The l dap query.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.GetRootDSEPart(System.String)">
      <summary>
            Gets the root DSE part. (Root DSE is a set of standard operational attributes
             that the user can read to find out fundamental characteristics of the directory and the server.)
            </summary>
      <param name="LDAPQuery">The LDAP query.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.GetLDAPQueryPart(System.String)">
      <summary>
            Return the LDAP Query portion of a Authorizer LDAPQuery
            </summary>
      <param name="LDAPQuery">The Authorizer LDAP Query</param>
      <returns>the LDAP Query portion</returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.SetActiveDirectoryLookUpCredential(System.String,System.String)">
      <summary>
            Sets the active directory look up credential.
            </summary>
      <param name="username">The username.</param>
      <param name="password">The password.</param>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.newDirectoryEntry(System.String)">
      <summary>
            News the directory entry.
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.GetSecurityIdentifierForUserName(System.String)">
      <summary>
            Gets the name of the security identifier for user.
            </summary>
      <param name="userName">Name of the user.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.DirectoryServicesUtilities.RootDsePath">
      <summary>
            (Root DSE is a set of standard operational attributes
            </summary>
      <value>The root dse path.</value>
    </member>
    <member name="T:Rock.Framework.DirectoryServices.EmploymentType">
      <summary>
            Team members are broken down into two different types: hourly and salary.  This enumeration represents both of those types.
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.EmploymentType.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.EmploymentType.Hourly">
      <summary>
            Hourly team members
            </summary>
    </member>
    <member name="F:Rock.Framework.DirectoryServices.EmploymentType.Salary">
      <summary>
            Salaried team members
            </summary>
    </member>
    <member name="T:Rock.Framework.DirectoryServices.TeamMemberBase">
      <summary>
            Base class for team member information.
            </summary>
      <remarks>
            Developers should inherit from this base class and create their own custom 
            type in their application.  This class provides minimal information (commonid and displayname).  
            Simply add new properties and add a <see cref="T:Rock.Framework.DirectoryServices.DirectoryAttributeAttribute" /> 
            onto the property to fetch data from AD.
            </remarks>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.TeamMemberBase.CommonId">
      <summary>
            Gets or sets the common id.
            </summary>
      <value>The common id.</value>
    </member>
    <member name="P:Rock.Framework.DirectoryServices.TeamMemberBase.DisplayName">
      <summary>
            Gets or sets the display name.
            </summary>
      <value>The display name.</value>
    </member>
    <member name="T:Rock.Framework.Extensions.AssemblyExtensions">
      <summary>
            Extension methods for the type Assembly.
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.AssemblyExtensions.GetAssemblyAttribute``1(System.Reflection.Assembly)">
      <summary>
            Return a particular assembly attribute value if exist or if not found then return null.
            </summary>
      <param name="assembly">assembly value</param>
      <typeparam name="T">
      </typeparam>
      <returns>null for nothing, or desired type</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.ActionExtensions">
      <summary>
            Extension methods for the type Action.
            </summary>
      <remarks>
        <para>The ActionExtensions class provides helpers for retrying an action 
            The action is executed, and if the expected exception is
            encountered, the action is retried a certain number of times.  If the
            action never succeeds, the last encountered exception is thrown up the
            stack.  If an exception that wasn't expected is encountered, it is
            passed up the stack without any retries.</para>
        <para>Overloads are provided for catching multiple types of exceptions, so
            catching <see cref="T:System.Exception" /> is not necessary.</para>
      </remarks>
      <example>
            This example tries to move a file three times.  If an
            <see cref="T:System.IO.IOException" /> is encountered when trying to move
            the file on the first two tries, the thread sleeps 5 seconds then tries
            again.  On the third try, if an IOException is encountered, it is
            thrown.
            <code><![CDATA[
            Action action = () => System.IO.File.Move(source, destination);
            action.ReTry<System.IO.IOException>(3, 5 * 1000);
            ]]></code></example>
    </member>
    <member name="M:Rock.Framework.Extensions.ActionExtensions.ReTry``1(System.Action,System.Int32,System.Int32)">
      <summary>
            Retry an action if a TException is encountered
            </summary>
      <typeparam name="TException">exception type to catch</typeparam>
      <param name="action">action to execute</param>
      <param name="numberOfTries">number of times to try action</param>
      <param name="millesecondsSleepBetweenRetry">milleseconds to
            sleep before next retry if exception is encountered</param>
      <exception cref="T:System.ArgumentNullException">thrown when action
            is null</exception>
      <example>
            This example tries to move a file three times.  If an
            <see cref="T:System.IO.IOException" /> is encountered when trying to move
            the file on the first two tries, the thread sleeps 5 seconds then tries
            again.  On the third try, if an IOException is encountered, it is
            thrown.
            <code><![CDATA[
            Action action = () => System.IO.File.Move(source, destination);
            action.ReTry<System.IO.IOException>(3, 5 * 1000);
            ]]></code></example>
    </member>
    <member name="M:Rock.Framework.Extensions.ActionExtensions.ReTry``2(System.Action,System.Int32,System.Int32)">
      <summary>
            Retry an action if a TException1 or TException2 is encountered
            </summary>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <param name="action">action to execute</param>
      <param name="numberOfTries">number of times to try action</param>
      <param name="millesecondsSleepBetweenRetry">milleseconds to
            sleep before next retry if exception is encountered</param>
      <exception cref="T:System.ArgumentNullException">thrown when action
            is null</exception>
      <example>
            This example tries to move a file three times.  If an
            <see cref="T:System.IO.IOException" /> or
            <see cref="T:System.UnauthorizedAccessException" /> is encountered
            when trying to move the file on the first two tries, the thread
            sleeps 5 seconds then tries again.  On the third try, if an
            IOException or UnauthorizedAccessException is encountered, it is thrown.
            <code><![CDATA[
            Action action = () => System.IO.File.Move(source, destination);
            action.ReTry<System.IO.IOException, System.IO.UnauthorizedAccessException>(3, 5 * 1000);
            ]]></code></example>
    </member>
    <member name="M:Rock.Framework.Extensions.ActionExtensions.ReTry``3(System.Action,System.Int32,System.Int32)">
      <summary>
            Retry an action if a TException1, TException2, or TException3 is
            encountered
            </summary>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <typeparam name="TException3">exception type to catch</typeparam>
      <param name="action">action to execute</param>
      <param name="numberOfTries">number of times to try action</param>
      <param name="millesecondsSleepBetweenRetry">milleseconds to
            sleep before next retry if exception is encountered</param>
      <exception cref="T:System.ArgumentNullException">thrown when action
            is null</exception>
      <example>
            This example tries to move a file three times.  If an
            <see cref="T:System.IO.IOException" />,
            <see cref="T:System.IO.DirectoryNotFoundException" />, or
            <see cref="T:System.UnauthorizedAccessException" /> is encountered
            when trying to move the file on the first two tries, the thread
            sleeps 5 seconds then tries again.  On the third try, if an
            IOException, DirectoryNotFound, or UnauthorizedAccessException is
            encountered, it is thrown.
            <code><![CDATA[
            Action action = () => System.IO.File.Move(source, destination);
            action.ReTry<
                System.IO.IOException,
                System.IO.UnauthorizedAccessException,
                System.IO.DirectoryNotFoundException>(3, 5 * 1000);
            ]]></code></example>
    </member>
    <member name="M:Rock.Framework.Extensions.ActionExtensions.ReTry``2(System.Action{``0},``0,System.Int32,System.Int32)">
      <summary>
            Retry an action if a TException is encountered
            </summary>
      <typeparam name="TException">exception type to catch</typeparam>
      <typeparam name="T">parameter type</typeparam>
      <param name="parameter">action parameter</param>
      <param name="action">action to execute</param>
      <param name="numberOfTries">number of times to try action</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <exception cref="T:System.ArgumentNullException">thrown when action
            is null</exception>
      <example>
        <code><![CDATA[
              public static void ActOnDocument(int documentId)
              {
                return Wcf.Service<ILifeCycle>.Use( (serviceProxy)=>{ serviceProxy.AddToLifeCycle(documentId); } );
              }
              
              public static void ActOnDocument(int documentId, int attempts, int waitBetweenAttempts)
              {
                Action<int> action = ReprocessDocument;
                action.ReTry<int, Exception>(documentId, attempts, waitBetweenAttempts); 
              }
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.ActionExtensions.ReTry``3(System.Action{``0},``0,System.Int32,System.Int32)">
      <summary>
            Retry an action if a TException1 or TException2 is encountered
            </summary>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <typeparam name="T">parameter type</typeparam>
      <param name="parameter">action parameter</param>
      <param name="action">action to execute</param>
      <param name="numberOfTries">number of times to try action</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <exception cref="T:System.ArgumentNullException">thrown when action
            is null</exception>
      <example>
        <code><![CDATA[
              public static void ActOnDocument(int documentId)
              {
                return Wcf.Service<ILifeCycle>.Use( (serviceProxy)=>{ serviceProxy.AddToLifeCycle(documentId); } );
              }
              
              public static void ActOnDocument(int documentId, int attempts, int waitBetweenAttempts)
              {
                Action<int> action = ReprocessDocument;
                action.ReTry<int, TimeoutException, CommunicationException>(documentId, attempts, waitBetweenAttempts); 
              }
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.ActionExtensions.ReTry``4(System.Action{``0},``0,System.Int32,System.Int32)">
      <summary>
            Retry an action if a TException1, TException2, or TException3 is
            encountered
            </summary>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <typeparam name="TException3">exception type to catch</typeparam>
      <typeparam name="T">parameter type</typeparam>
      <param name="parameter">action parameter</param>
      <param name="action">action to execute</param>
      <param name="numberOfTries">number of times to try action</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <exception cref="T:System.ArgumentNullException">thrown when action
            is null</exception>
      <example>
        <code><![CDATA[
              public static void ActOnDocument(int documentId)
              {
                return Wcf.Service<ILifeCycle>.Use( (serviceProxy)=>{ serviceProxy.AddToLifeCycle(documentId); } );
              }
              
              public static void ActOnDocument(int documentId, int attempts, int waitBetweenAttempts)
              {
                Action<int> action = ReprocessDocument;
                action.ReTry<int, TimeoutException, CommunicationException, FaultException<RetriableDetail>>(documentId, attempts, waitBetweenAttempts); 
              }
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.ActionExtensions.ReTry``3(System.Action{``0,``1},``0,``1,System.Int32,System.Int32)">
      <summary>
            Retry an action if a TException is encountered
            </summary>
      <typeparam name="TException">exception type to catch</typeparam>
      <typeparam name="T1">parameter1 type</typeparam>
      <typeparam name="T2">parameter2 type</typeparam>
      <param name="parameter1">action parameter1</param>
      <param name="parameter2">action parameter2</param>
      <param name="action">action to execute</param>
      <param name="numberOfTries">number of times to try action</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <exception cref="T:System.ArgumentNullException">thrown when action
            is null</exception>
      <example>
        <code><![CDATA[
            Action<string, string> action = System.IO.File.Move;
            action.ReTry<string, string, System.IO.IOException>(source, destination, 3, 5 * 1000);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.ActionExtensions.ReTry``4(System.Action{``0,``1},``0,``1,System.Int32,System.Int32)">
      <summary>
            Retry an action if a TException1 or TException2 is encountered
            </summary>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <typeparam name="T1">parameter1 type</typeparam>
      <typeparam name="T2">parameter2 type</typeparam>
      <param name="parameter1">action parameter1</param>
      <param name="parameter2">action parameter2</param>
      <param name="action">action to execute</param>
      <param name="numberOfTries">number of times to try action</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <exception cref="T:System.ArgumentNullException">thrown when action
            is null</exception>
      <example>
        <code><![CDATA[
            Action<string, string> action = System.IO.File.Move;
            action.ReTry<string, string, System.IO.IOException, UnauthorizedAccessException>(source, destination, 3, 5 * 1000);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.ActionExtensions.ReTry``5(System.Action{``0,``1},``0,``1,System.Int32,System.Int32)">
      <summary>
            Retry an action if a TException1, TException2, or TException3 is
            encountered
            </summary>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <typeparam name="TException3">exception type to catch</typeparam>
      <typeparam name="T1">parameter1 type</typeparam>
      <typeparam name="T2">parameter2 type</typeparam>
      <param name="parameter1">action parameter1</param>
      <param name="parameter2">action parameter2</param>
      <param name="action">action to execute</param>
      <param name="numberOfTries">number of times to try action</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <exception cref="T:System.ArgumentNullException">thrown when action
            is null</exception>
      <example>
        <code><![CDATA[
            Action<string, string> action = System.IO.File.Move;
            action.ReTry<string, string, System.IO.IOException, UnauthorizedAccessException, System.IO.DirectoryNotFoundException>(source, destination, 3, 5 * 1000);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.ActionExtensions.ReTry``4(System.Action{``0,``1,``2},``0,``1,``2,System.Int32,System.Int32)">
      <summary>
            Retry an action if a TException is encountered
            </summary>
      <typeparam name="TException">exception type to catch</typeparam>
      <typeparam name="T1">parameter1 type</typeparam>
      <typeparam name="T2">parameter2 type</typeparam>
      <typeparam name="T3">parameter3 type</typeparam>
      <param name="parameter1">action parameter1</param>
      <param name="parameter2">action parameter2</param>
      <param name="parameter3">action parameter3</param>
      <param name="action">action to execute</param>
      <param name="numberOfTries">number of times to try action</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <exception cref="T:System.ArgumentNullException">thrown when action
            is null</exception>
      <example>
        <code><![CDATA[
            Action<string, string, boolean> action = System.IO.File.Copy;
            action.ReTry<string, string, boolean, System.IO.IOException>("originalFile", "newFile", true, 3, 5 * 1000);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.ActionExtensions.ReTry``5(System.Action{``0,``1,``2},``0,``1,``2,System.Int32,System.Int32)">
      <summary>
            Retry an action if a TException is encountered
            </summary>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <typeparam name="T1">parameter1 type</typeparam>
      <typeparam name="T2">parameter2 type</typeparam>
      <typeparam name="T3">parameter3 type</typeparam>
      <param name="parameter1">action parameter1</param>
      <param name="parameter2">action parameter2</param>
      <param name="parameter3">action parameter3</param>
      <param name="action">action to execute</param>
      <param name="numberOfTries">number of times to try action</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <exception cref="T:System.ArgumentNullException">thrown when action
            is null</exception>
      <example>
        <code><![CDATA[
            Action<string, string, boolean> action = System.IO.File.Copy;
            action.ReTry<string, string, boolean, System.IO.IOException>("originalFile", "newFile", true, 3, 5 * 1000);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.ActionExtensions.ReTry``6(System.Action{``0,``1,``2},``0,``1,``2,System.Int32,System.Int32)">
      <summary>
            Retry an action if a TException1, TException2, or TException3 is
            encountered
            </summary>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <typeparam name="TException3">exception type to catch</typeparam>
      <typeparam name="T1">parameter1 type</typeparam>
      <typeparam name="T2">parameter2 type</typeparam>
      <typeparam name="T3">parameter3 type</typeparam>
      <param name="parameter1">action parameter1</param>
      <param name="parameter2">action parameter2</param>
      <param name="parameter3">action parameter3</param>
      <param name="action">action to execute</param>
      <param name="numberOfTries">number of times to try action</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <exception cref="T:System.ArgumentNullException">thrown when action
            is null</exception>
      <example>
        <code><![CDATA[
            Action<string, string, boolean> action = System.IO.File.Copy;
            action.ReTry<string, string, boolean, System.IO.IOException, UnauthorizedAccessException, System.IO.DirectoryNotFoundException>(source, destination, true, 3, 5 * 1000);
            ]]></code>
      </example>
    </member>
    <member name="T:Rock.Framework.Extensions.BooleanExtensions">
      <summary>
            Provides extensions methods for dealing with booleans.
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.BooleanExtensions.ToInt32(System.Boolean)">
      <summary>
            Converts a boolean value to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">bool value</param>
      <returns>1 for true, 0 for false</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.BooleanExtensions.IsTrue(System.Nullable{System.Boolean})">
      <summary>
            Returns True if value is True and False if value is null or False.
            </summary>
      <param name="input">nullable bool value</param>
      <returns>True if value is True and False if value is null or False.</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.BooleanExtensions.IsFalse(System.Nullable{System.Boolean})">
      <summary>
            Returns True if value is False and False if value is null or True.
            </summary>
      <param name="input">nullable bool value</param>
      <returns>True if value is False and False if value is null or True</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.BooleanExtensions.IsNull(System.Nullable{System.Boolean})">
      <summary>
            Returns False if value exist (either true or false) and True if value is null.
            </summary>
      <param name="input">nullable bool value</param>
      <returns>False if value exist (either true or false) and True if value is null</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.BooleanExtensions.ToStringValue(System.Nullable{System.Boolean})">
      <summary>
            Returns "True" if True, "False" if False, or null if null.
            </summary>
      <param name="value">nullable bool value</param>
      <returns>"True" if True, "False" if False, or null if null</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.BooleanExtensions.ToDbString(System.Boolean)">
      <summary>
            Converts a boolean value to DbString, return "1" if true and "0" if false.
            </summary>
      <param name="value">bool value</param>
      <returns>"1" if True and "0" if False</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.BooleanExtensions.ToDbString(System.Nullable{System.Boolean})">
      <summary>
            Converts a boolean value to DbString ("1", "0", "NULL"), return "1" if true, "0" if false, and "NULL" if null.
            </summary>
      <param name="value">nullable bool value</param>
      <returns>"1" if True, "0" if False, "NULL" if null</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.ByteArrayExtensions">
      <summary>
            Byte array extensions
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.ByteArrayExtensions.ToHexString(System.Byte[])">
      <summary>
            Converts the given byte array into its equivalent hexidecimal string representation. The
            resulting string will have "0x" at the beginning.
            </summary>
      <param name="buffer">The byte array to convert.</param>
      <returns>The hexadecimal string reprentation of <paramref name="buffer" />.</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.ByteArrayExtensions.ToHexString(System.Byte[],System.Boolean)">
      <summary>
            Converts the given byte array into its equivalent hexidecimal string representation.
            </summary>
      <param name="buffer">The byte array to convert.</param>
      <param name="include0x">Whether to include "0x" at the beginning of the return value.</param>
      <returns>The hexadecimal string reprentation of <paramref name="buffer" />.</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.ByteArrayExtensions.ToHash(System.Byte[],Rock.Framework.Extensions.HashType)">
      <summary>
            Computes the hash value for the specified byte array.
            </summary>
      <param name="hashType">The type of algorithm to use when computing the hash.</param>
      <param name="data">The input to compute the hash code for.</param>
      <returns>The computed hash code.</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.ComparerExtensions">
      <summary>
            Comparer extension methods for types that implement <see cref="T:System.IComparable" />. 
            </summary>
      <remarks>
        <code><![CDATA[
            public class PersonHelper : IComparable<PersonHelper>
            {
                public string FirstName { get; set; }
                public string LastName { get; set; }
            
                public int CompareTo(PersonHelper other)
                {
                    return this.LastName.CompareTo(other.LastName);
                }
            }
            
            var p1 = new PersonHelper { LastName = "Person1" };
            var p2 = new PersonHelper { LastName = "Person2" };
            Console.WriteLine(p2.LessOrEqualThan(p1)); // will print false
            Console.WriteLine(p2.LessOrEqualThan(p2)); // will print true
            Console.WriteLine(p1.LessOrEqualThan(p2)); // will print true
            ]]></code>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Extensions.ComparerExtensions.LessThan``1(``0,``0)">
      <summary>
            Compares if the current object is less than <paramref name="right" /></summary>
      <typeparam name="T">Type to compare.</typeparam>
      <param name="left">The left.</param>
      <param name="right">The object to compare to.</param>
      <returns>boolean</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.ComparerExtensions.GreaterThan``1(``0,``0)">
      <summary>
            Compares if the current object is less than <paramref name="right" /></summary>
      <typeparam name="T">Type to compare.</typeparam>
      <param name="left">The left.</param>
      <param name="right">The object to compare to.</param>
      <returns>boolean</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.ComparerExtensions.LessOrEqualThan``1(``0,``0)">
      <summary>
            Compares if the current object is less or equal than <paramref name="right" /></summary>
      <typeparam name="T">Type to compare.</typeparam>
      <param name="left">The left.</param>
      <param name="right">The object to compare to.</param>
      <returns>boolean</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.ComparerExtensions.GreaterOrEqualThan``1(``0,``0)">
      <summary>
            Compares if the current object is greater or equal than <paramref name="right" /></summary>
      <typeparam name="T">Type to compare.</typeparam>
      <param name="left">The left.</param>
      <param name="right">The object to compare to.</param>
      <returns>boolean</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.ComparerExtensions.Equal``1(``0,``0)">
      <summary>
            Compares if the current object is equal with <paramref name="right" /></summary>
      <typeparam name="T">Type to compare.</typeparam>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>boolean</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.DateTimeExtensions">
      <summary>
            Provides extensions methods for dealing with date/times. To use the built in extensions within the
            framework add the following to the top of your files.
            <para><code>using Rock.Framework.Extensions;</code></para></summary>
    </member>
    <member name="F:Rock.Framework.Extensions.DateTimeExtensions.sr_startBusinessTime">
      <summary>
            Start Business Time - 9:00 am
            </summary>
    </member>
    <member name="F:Rock.Framework.Extensions.DateTimeExtensions.sr_endBusinessTime">
      <summary>
            End Business Time - 5:30 pm
            </summary>
    </member>
    <member name="F:Rock.Framework.Extensions.DateTimeExtensions.sr_nonBusinessDaysOfWeek">
      <summary>
            Non-Business Days of the Week - Saturday and Sunday
            </summary>
    </member>
    <member name="F:Rock.Framework.Extensions.DateTimeExtensions.sr_companyHolidays">
      <summary>
            Company Holidays - New Years Day, Martin Luther King Jr.'s Birthday, Memorial Day, Independence Day, Labor Day, Thanksgiving Day, Christmas Day
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.ToSocialDate(System.DateTime)">
      <summary>
            Converts the time into a Social Time
            </summary>
      <param name="postedTime">The left.</param>
      <returns>Social Time String</returns>
      <remarks>
            Assuming current date and time is June 6, 2009 1:00:00 PM and this is a Sunday
            The following posted dates and times return the following results:
            <list type="bullet"><item>May 10, 1:30:00 PM returns "May 10 at 1:30 PM"</item><item>June 2, 4:59:00 PM returns "Wednesday at 4:59 PM"</item><item>June 5, 2:30:00 PM returns "Yesterday at 2:30 PM"</item><item>June 6, 8:00:00 AM returns "5 hours ago"</item><item>June 6, 12:00:00 PM returns "1 hour ago"</item><item>June 6, 12:30:00 PM returns "30 minutes ago"</item><item>June 6, 12:59:00 PM returns "1 minute ago"</item><item>June 6, 12:59:35 PM returns "25 seconds ago"</item><item>June 6, 12:59:59 PM returns "1 second ago ago"</item><item>June 6, 1:00:01 PM returns "in 1 second"</item><item>June 6, 1:00:08 PM returns "in 8 seconds"</item><item>June 6, 1:01:00 PM returns "in 1 minute"</item><item>June 6, 1:14:00 PM returns "in 14 minutes"</item><item>June 6, 2:00:00 PM returns "in 1 hour"</item><item>June 6, 4:00:00 PM returns "in 3 hours"</item><item>June 7, 5:00:00 PM returns "Tomorrow at 5:00 PM"</item><item>June 10, 3:30:00 PM returns "June 10 at 3:30 PM"</item></list></remarks>
      <example>
        <code>
            DateTime dTime = DateTime.Now.AddSeconds(-1);
            string socialTime = DateTimeExtensions.ToSocialDate(dTime);
            (Here, socialTime will be "1 second ago")
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.IsWeekday(System.DateTime)">
      <summary>
            Determines whether the DayOfWeek property is a weekday (Monday through Friday).
            </summary>
      <param name="calendarDate">The calendar date.</param>
      <returns>
        <c>true</c> if the DayOfWeek property is a weekday (Monday through Friday); otherwise, <c>false</c>.
            </returns>
      <remarks>
            Using dates from Monday, June 28th 2010 through Sunday, July 4th 2010
            will return the following results:
            <list type="bullet"><item>Monday, June 28th returns true</item><item>Tuesday, June 29th returns true</item><item>Wednesday, June 30th returns true</item><item>Thursday, July 1st returns true</item><item>Friday, July 2nd returns true</item><item>Saturday, July 3rd returns false</item><item>Sunday, July 4th returns false</item></list>
            Code Example uses Monday, June 28th and Saturday, July 3rd
            </remarks>
      <example>
        <code>
            DateTime dateTime = DateTime.Parse("6/28/2010");
            bool isWeekday = dateTime.IsWeekday();
            (isWeekday will be true)
            
            DateTime dateTime = DateTime.Parse("7/3/2010");
            bool isWeekday = dateTime.IsWeekday();
            (isWeekday will be false)
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.IsHoliday(System.DateTime)">
      <summary>
            Determines whether the date is in Rock.Framework.Dates.CompanyHolidays.
            </summary>
      <param name="calendarDate">The calendar date.</param>
      <returns>
        <c>true</c> if the date is in Rock.Framework.Dates.CompanyHolidays; otherwise, <c>false</c>.
            </returns>
      <remarks>
            Using dates from Friday, July 2nd 2010 through Tuesday, July 6th 2010,
            where Monday, July 5th was a Company Holiday,
            will return the following results:
            <list type="bullet"><item>Friday, July 2nd returns false</item><item>Saturday, July 3rd returns false</item><item>Sunday, July 4th returns false</item><item>Monday, July 5th returns true</item><item>Tuesday, July 6th returns false</item></list>
            Code Example uses Monday, June 28th and Monday, July 5th
            </remarks>
      <example>
        <code>
            DateTime dateTime = DateTime.Parse("6/28/2010");
            bool isHoliday = dateTime.IsHoliday();
            (isHoliday will be false)
            
            DateTime dateTime = DateTime.Parse("7/5/2010");
            bool isHoliday = dateTime.IsHoliday();
            (isHoliday will be true)
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.IsBusinessTime(System.DateTime)">
      <summary>
            Determines whether the date and time is a business date and time.
            <remarks>
            Considers Saturday, Sunday and all Rock.Framework.Dates.CompanyHolidays as non-business days
            and times outside of 9:00 AM to 5:30 PM as non-business hours.
            </remarks></summary>
      <param name="calendarDate">The calendar date.</param>
      <returns>
        <c>true</c> if the date and time is a business date and time; otherwise, <c>false</c>.
            </returns>
      <remarks>
            Using dates from Friday, July 2nd 2010 through Tuesday, July 6th 2010,
            where Monday, July 5th was a Company Holiday,
            will return the following results:
            <list type="bullet"><item>Wednesday, June 30th 8:30 am returns false</item><item>Wednesday, June 30th 6:30 pm returns false</item><item>Saturday, July 3rd 2:30 pm returns false</item><item>Monday, July 5th 12:30 pm returns false</item><item>Wednesday, June 30th 12:30 pm returns true</item></list>
            Code Example uses Wednesday, June 30th 12:30 pm and Saturday, July 3rd at 2:30 pm
            </remarks>
      <example>
        <code>
            DateTime dateTime = new DateTime(2010, 6, 30, 12, 30, 0);
            bool isBusinessDay = dateTime.IsBusinessTime();
            (isBusinessDay will be true)
            
            DateTime dateTime = new DateTime(2010, 7, 3, 14, 30, 0);
            bool isBusinessDay = dateTime.IsBusinessTime();
            (isBusinessDay will be false)
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.IsBusinessTime(System.DateTime,System.TimeSpan,System.TimeSpan)">
      <summary>
            Determines whether [is business time] [the specified calendar date].
            </summary>
      <param name="calendarDate">The calendar date.</param>
      <param name="startBusinessTime">The start business time.</param>
      <param name="endBusinessTime">The end business time.</param>
      <returns>
        <c>true</c> if [is business time] [the specified calendar date]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.IsBusinessTime(System.DateTime,System.TimeSpan,System.TimeSpan,System.Collections.Generic.IEnumerable{System.DayOfWeek})">
      <summary>
            Determines whether [is business time] [the specified calendar date].
            </summary>
      <param name="calendarDate">The calendar date.</param>
      <param name="startBusinessTime">The start business time.</param>
      <param name="endBusinessTime">The end business time.</param>
      <param name="nonBusinessDaysOfWeek">The non business days of week.</param>
      <returns>
        <c>true</c> if [is business time] [the specified calendar date]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.IsBusinessTime(System.DateTime,System.TimeSpan,System.TimeSpan,System.Collections.Generic.IEnumerable{System.DateTime})">
      <summary>
            Determines whether [is business time] [the specified calendar date].
            </summary>
      <param name="calendarDate">The calendar date.</param>
      <param name="startBusinessTime">The start business time.</param>
      <param name="endBusinessTime">The end business time.</param>
      <param name="nonBusinessDates">The non business dates.</param>
      <returns>
        <c>true</c> if [is business time] [the specified calendar date]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.IsBusinessTime(System.DateTime,System.TimeSpan,System.TimeSpan,System.Collections.Generic.IEnumerable{System.DayOfWeek},System.Collections.Generic.IEnumerable{System.DateTime})">
      <summary>
            Determines whether [is business time] [the specified calendar date].
            </summary>
      <param name="calendarDate">The calendar date.</param>
      <param name="startBusinessTime">The start business time.</param>
      <param name="endBusinessTime">The end business time.</param>
      <param name="nonBusinessDaysOfWeek">The non business days of week.</param>
      <param name="nonBusinessDates">The non business dates.</param>
      <returns>
        <c>true</c> if [is business time] [the specified calendar date]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.IsBusinessDay(System.DateTime)">
      <summary>
            Determines whether the date is a business day.
            <remarks>Considers Saturday, Sunday and all Rock.Framework.Dates.CompanyHolidays as non-business days.</remarks></summary>
      <param name="calendarDate">The calendar date.</param>
      <returns>
        <c>true</c> if the date is a business day; otherwise, <c>false</c>.
            </returns>
      <remarks>
            Using dates from Friday, July 2nd 2010 through Tuesday, July 6th 2010,
            where Monday, July 5th was a Company Holiday,
            will return the following results:
            <list type="bullet"><item>Friday, July 2nd returns true</item><item>Saturday, July 3rd returns false</item><item>Sunday, July 4th returns false</item><item>Monday, July 5th returns false</item><item>Tuesday, July 6th returns true</item></list>
            Code Example uses Friday, July 2nd and Monday, July 5th
            </remarks>
      <example>
        <code>
            DateTime dateTime = DateTime.Parse("7/2/2010");
            bool isBusinessDay = dateTime.IsBusinessDay();
            (isBusinessDay will be true)
            
            DateTime dateTime = DateTime.Parse("7/5/2010");
            bool isBusinessDay = dateTime.IsBusinessDay();
            (isBusinessDay will be false)
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.IsBusinessDay(System.DateTime,System.Collections.Generic.IEnumerable{System.DayOfWeek})">
      <summary>
            Determines whether the date is a business day.
            <remarks>Considers the specified non-business days of week as non-business days.</remarks></summary>
      <param name="calendarDate">The calendar date.</param>
      <param name="nonBusinessDaysOfWeek">The non-business days of week.</param>
      <returns>
        <c>true</c> if the date is a business day; otherwise, <c>false</c>.
            </returns>
      <remarks>
            Using dates from Friday, July 2nd 2010 through Tuesday, July 6th 2010,
            where Monday, July 5th was a Company Holiday
            and nonBusinessDaysOfWeek = Friday, Saturday and Sunday,
            will return the following results:
            <list type="bullet"><item>Friday, July 2nd returns false</item><item>Saturday, July 3rd returns false</item><item>Sunday, July 4th returns false</item><item>Monday, July 5th returns true</item><item>Tuesday, July 6th returns true</item></list>
            Code Example uses Friday, July 2nd and Monday, July 5th
            </remarks>
      <example>
        <code>
            DateTime dateTime = DateTime.Parse("7/2/2010");
            bool isBusinessDay = dateTime.IsBusinessDay();
            (isBusinessDay will be false)
            
            DateTime dateTime = DateTime.Parse("7/5/2010");
            bool isBusinessDay = dateTime.IsBusinessDay();
            (isBusinessDay will be true)
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.IsBusinessDay(System.DateTime,System.Collections.Generic.IEnumerable{System.DateTime})">
      <summary>
            Determines whether the date is a business day.
            <remarks>Considers the specified non-business dates as non-business days.</remarks></summary>
      <param name="calendarDate">The calendar date.</param>
      <param name="nonBusinessDates">The non-business dates.</param>
      <returns>
        <c>true</c> if the date is a business day; otherwise, <c>false</c>.
            </returns>
      <remarks>
            Using dates from Friday, July 2nd 2010 through Tuesday, July 6th 2010,
            where Monday, July 5th was a Company Holiday
            and nonBusinessDates = 7/2/2010, 7/3/2010, 7/4/2010 and 7/5/2010,
            will return the following results:
            <list type="bullet"><item>Friday, July 2nd returns false</item><item>Saturday, July 3rd returns false</item><item>Sunday, July 4th returns false</item><item>Monday, July 5th returns true</item><item>Tuesday, July 6th returns true</item></list>
            Code Example uses Friday, July 2nd and Tuesday, July 6th
            </remarks>
      <example>
        <code>
            DateTime dateTime = DateTime.Parse("7/2/2010");
            bool isBusinessDay = dateTime.IsBusinessDay();
            (isBusinessDay will be false)
            
            DateTime dateTime = DateTime.Parse("7/6/2010");
            bool isBusinessDay = dateTime.IsBusinessDay();
            (isBusinessDay will be true)
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.IsBusinessDay(System.DateTime,System.Collections.Generic.IEnumerable{System.DayOfWeek},System.Collections.Generic.IEnumerable{System.DateTime})">
      <summary>
            Determines whether the date is a business day.
            <remarks>Considers the specified non-business days of week and non-business dates as non-bussiness days.</remarks></summary>
      <param name="calendarDate">The calendar date.</param>
      <param name="nonBusinessDaysOfWeek">The non-business days of week.</param>
      <param name="nonBusinessDates">The non-business dates.</param>
      <returns>
        <c>true</c> if the date is a business day; otherwise, <c>false</c>.
            </returns>
      <remarks>
            Using dates from Friday, July 2nd 2010 through Tuesday, July 6th 2010,
            where Monday, July 5th was a Company Holiday,
            nonBusinessDaysOfWeek = Friday and nonBusinessDates = 7/3/2010, 7/4/2010 and 7/5/2010,
            will return the following results:
            <list type="bullet"><item>Friday, July 2nd returns false</item><item>Saturday, July 3rd returns false</item><item>Sunday, July 4th returns false</item><item>Monday, July 5th returns true</item><item>Tuesday, July 6th returns true</item></list>
            Code Example uses Friday, July 2nd and Tuesday, July 6th
            </remarks>
      <example>
        <code>
            DateTime dateTime = DateTime.Parse("7/2/2010");
            bool isBusinessDay = dateTime.IsBusinessDay();
            (isBusinessDay will be false)
            
            DateTime dateTime = DateTime.Parse("7/6/2010");
            bool isBusinessDay = dateTime.IsBusinessDay();
            (isBusinessDay will be true)
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.AddBusinessDays(System.DateTime,System.Double)">
      <summary>
            Adds the business days.
            <remarks>Skips Saturday, Sunday and all Rock.Framework.Dates.CompanyHolidays</remarks></summary>
      <param name="calendarDate">The calendar date.</param>
      <param name="value">The value.</param>
      <returns>A New DateTime</returns>
      <remarks>
            Using the date Thursday, July 1st 2010,
            where Monday, July 5th was a Company Holiday,
            will return the following results:
            <list type="bullet"><item>0 returns Thursday, July 1st</item><item>1 returns Friday, July 2nd</item><item>2 returns Tuesday, July 6th</item></list>
            Code Example uses Thursday, July 1st
            </remarks>
      <example>
        <code>
            DateTime dateTime = DateTime.Parse("7/1/2010");
            DateTime newDateTime = dateTime.AddBusinessDays(1);
            (newDateTime will be Friday, July 2nd)
            
            DateTime dateTime = DateTime.Parse("7/1/2010");
            DateTime newDateTime = dateTime.AddBusinessDays(2);
            (newDateTime will be Tuesday, July 6th)
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.AddBusinessDays(System.DateTime,System.Double,System.Collections.Generic.IEnumerable{System.DayOfWeek})">
      <summary>
            Adds the business days.
            </summary>
      <remarks>
            Skips the specified non-business days of week.
            </remarks>
      <param name="calendarDate">The calendar date.</param>
      <param name="value">The value.</param>
      <param name="nonBusinessDaysOfWeek">The non-business days of week.</param>
      <returns>A New DateTime</returns>
      <remarks>
            Using the date Thursday, July 1st 2010,
            where Monday, July 5th was a Company Holiday
            and nonBusinessDaysOfWeek = Sunday,
            will return the following results:
            <list type="bullet"><item>0 returns Thursday, July 1st</item><item>1 returns Friday, July 2nd</item><item>2 returns Saturday, July 3rd</item></list>
            Code Example uses Thursday, July 1st
            </remarks>
      <example>
        <code>
            DateTime dateTime = DateTime.Parse("7/1/2010");
            DateTime newDateTime = dateTime.AddBusinessDays(1);
            (newDateTime will be Friday, July 2nd)
            
            DateTime dateTime = DateTime.Parse("7/1/2010");
            DateTime newDateTime = dateTime.AddBusinessDays(2);
            (newDateTime will be Saturday, July 3rd)
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.AddBusinessDays(System.DateTime,System.Double,System.Collections.Generic.IEnumerable{System.DateTime})">
      <summary>
            Adds the business days.
            </summary>
      <remarks>
            Skips the specified non-business dates
            </remarks>
      <param name="calendarDate">The calendar date.</param>
      <param name="value">The value.</param>
      <param name="nonBusinessDates">The non-business dates.</param>
      <returns>A New DateTime</returns>
      <remarks>
            Using the date Thursday, July 1st 2010,
            where Monday, July 5th was a Company Holiday
            and nonBusinessDates = Monday, July 5th,
            will return the following results:
            <list type="bullet"><item>0 returns Thursday, July 1st</item><item>1 returns Friday, July 2nd</item><item>2 returns Saturday, July 3rd</item><item>3 returns Sunday, July 4th</item><item>4 returns Tuesday, July 6th</item></list>
            Code Example uses Thursday, July 1st
            </remarks>
      <example>
        <code>
            DateTime dateTime = DateTime.Parse("7/1/2010");
            DateTime newDateTime = dateTime.AddBusinessDays(2);
            (newDateTime will be Saturday, July 3rd)
            
            DateTime dateTime = DateTime.Parse("7/1/2010");
            DateTime newDateTime = dateTime.AddBusinessDays(4);
            (newDateTime will be Tuesday, July 6th)
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.AddBusinessDays(System.DateTime,System.Double,System.Collections.Generic.IEnumerable{System.DayOfWeek},System.Collections.Generic.IEnumerable{System.DateTime})">
      <summary>
            Adds the business days.
            </summary>
      <remarks>
            Skips the specified non-business days of week and non-business dates
            </remarks>
      <param name="calendarDate">The calendar date.</param>
      <param name="value">The value.</param>
      <param name="nonBusinessDaysOfWeek">The non-business days of week.</param>
      <param name="nonBusinessDates">The non-business dates.</param>
      <returns>A New DateTime</returns>
      <remarks>
            Using the date Thursday, July 1st 2010,
            where Monday, July 5th was a Company Holiday,
            nonBusinessDaysOfWeek = Sunday,
            and nonBusinessDates = Monday, July 5th,
            will return the following results:
            <list type="bullet"><item>0 returns Thursday, July 1st</item><item>1 returns Friday, July 2nd</item><item>2 returns Saturday, July 3rd</item><item>3 returns Tuesday, July 6th</item></list>
            Code Example uses Thursday, July 1st
            </remarks>
      <example>
        <code>
            DateTime dateTime = DateTime.Parse("7/1/2010");
            DateTime newDateTime = dateTime.AddBusinessDays(2);
            (newDateTime will be Saturday, July 3rd)
            
            DateTime dateTime = DateTime.Parse("7/1/2010");
            DateTime newDateTime = dateTime.AddBusinessDays(3);
            (newDateTime will be Tuesday, July 6th)
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions.NumberOfWeekdayBetweenDates(System.DateTime,System.DateTime,System.DayOfWeek)">
      <summary>
            Calculates the number of times a certain day of the week falls between
            the two specified dates.
            </summary>
      <param name="date1">The first date</param>
      <param name="date2">The second date</param>
      <param name="dow">The day of week to look for</param>
      <returns>number of occurences represented as an integer</returns>
      <remarks>
            Assuming current date and time is June 6, 2009 1:00:00 PM and this is a Sunday
            The following posted dates and times return the following results:
            <list type="bullet"><item>date1 = July 23 2010(Friday); date2 = July 23 2010(Friday); dow = Saturday; returns '0'</item><item>date1 = July 23 2010(Friday); date2 = July 24 2010(Saturday); dow = Saturday; returns '1'</item><item>date1 = July 23 2010(Friday); date2 = July 31 2010(Saturday); dow = Saturday; returns '2'</item><item>date1 = July 23 2010(Friday); date2 = August 7 2010(Saturday); dow = Saturday; returns '3'</item><item>date1 = July 23 2010(Friday); date2 = July 16 2010(Friday); dow = Saturday; returns '1'</item><item>date1 = July 19 2010(Monday); date2 = July 23 2010(Friday); dow = Saturday; returns '0'</item><item>date1 = July 19 2010(Monday); date2 = July 23 2010(Friday); dow = Wednesday; returns '1'</item><item>date1 = June 27 2010(Friday); date2 = August 6 2010(Friday); dow = Monday; returns '6'</item></list></remarks>
      <example>
        <code>
            date1 = DateTime.UtcNow;
            date2 = DateTime.UtcNow.AddDays(7);
            numDays = NumberOfWeekdayBetweenDates(date1, date2, DayOfWeek.Friday);
            (Here, numDays = 1)
            </code>
      </example>
    </member>
    <member name="T:Rock.Framework.Extensions.DateTimeExtensions2">
      <summary>
            Provides extensions methods for dealing with date/times. To use the built in extensions within the
            framework add the following to the top of your files.
            <para><code>using Rock.Framework.Extensions;</code></para></summary>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions2.ToUnixTimestamp(System.DateTime)">
      <summary>
            Creates a unix timestamp from the given DateTime
            </summary>
      <param name="value">The DateTime to convert.</param>
      <returns>A Unix Timestamp representation of the given DateTime</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.DateTimeExtensions2.Truncate(System.DateTime,Rock.Framework.Extensions.TimeSection)">
      <summary>
            Truncates the indicated time section to truncate. Usefull when trying to remove the millisecond part of a date time. 
            </summary>
      <param name="dateTime">
      </param>
      <param name="timeSectionToTruncate">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Rock.Framework.Extensions.TimeSection">
      <summary>
            TimeSection
            </summary>
    </member>
    <member name="F:Rock.Framework.Extensions.TimeSection.Millisecond">
      <summary>
            Millisecond
            </summary>
    </member>
    <member name="F:Rock.Framework.Extensions.TimeSection.Second">
      <summary>
            Second
            </summary>
    </member>
    <member name="F:Rock.Framework.Extensions.TimeSection.Minute">
      <summary>
            Minute
            </summary>
    </member>
    <member name="F:Rock.Framework.Extensions.TimeSection.Hour">
      <summary>
            Hour
            </summary>
    </member>
    <member name="F:Rock.Framework.Extensions.TimeSection.Day">
      <summary>
            Day
            </summary>
    </member>
    <member name="T:Rock.Framework.Extensions.DecimalExtensions">
      <summary>
            Provides extensions methods for dealing with decimals. To use the built in extensions within the 
            framework add the following to the top of your files.
            <para><code>using Rock.Framework.Extensions;</code></para></summary>
    </member>
    <member name="M:Rock.Framework.Extensions.DecimalExtensions.RaiseToThePowerOf(System.Decimal,System.Int32)">
      <summary>
            Extension method to raise the power of a decimal value with an int.
            </summary>
      <param name="value">The value.</param>
      <param name="power">The power.</param>
      <example>
        <code>
            decimal x = 2.00M;
            decimal y = x.RaiseToThePowerOf(8);
            </code>
      </example>
      <returns>The decimal raised to the power</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.DecimalExtensions.RaiseToThePowerOf(System.Decimal,System.Double)">
      <summary>
            Extension method to raise the power of a decimal value with a double.
            </summary>
      <param name="value">The value.</param>
      <param name="power">The power.</param>
      <example>
        <code>
            decimal x = 2.00M;
            Double y = 2D;
            decimal z = x.RaiseToThePowerOf(y);
            </code>
      </example>
      <returns>The decimal raised to the power</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.DecimalExtensions.Billion(System.Decimal)">
      <summary>
            Extensions method to multiply the value of a decimal by 1 billion
            </summary>
      <example>
        <code>
            if (BigNumber &gt;= 14.7m.Billion())
            {
                Logger.Log("Whoa, BigNumber is big.");
            }
            </code>
      </example>
      <param name="d">the value</param>
      <returns>the value times 1 billion</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.DecimalExtensions.Million(System.Decimal)">
      <summary>
            Extensions method to multiply the value of a decimal by 1 million
            </summary>
      <example>
        <code>
            if (ClientAssets &gt;= 556m.Million())
            {
                Logger.Log("Why do you need a mortgage?  Can't you pay cash?");
            }
            </code>
      </example>
      <param name="d">the value</param>
      <returns>the value times 1 million</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.DecimalExtensions.Thousand(System.Decimal)">
      <summary>
            Extensions method to multiply the value of a decimal by 1 thousand
            </summary>
      <example>
        <code>
            if (LoanAmount &gt;= 417m.Thousand())
            {
                Logger.Log("This looks like a jumbo mortgage (in most states)");
            }
            </code>
      </example>
      <param name="d">the value</param>
      <returns>the value times 1 thousand</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.DoubleExtensions">
      <summary>
            Provides extensions methods for dealing with doubles. To use the built in extensions within the 
            framework add the following to the top of your files.
            <para><code>using Rock.Framework.Extensions;</code></para></summary>
    </member>
    <member name="M:Rock.Framework.Extensions.DoubleExtensions.RaiseToThePowerOf(System.Double,System.Int32)">
      <summary>
            Extension method to raise the power of a double value with an int.
            </summary>
      <param name="value">The value.</param>
      <param name="power">The power.</param>
      <returns>The double raised to the power</returns>
      <example>
        <code>
            Double value = 2D;
            Double x = value.RaiseToThePowerOf(12);
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DoubleExtensions.RaiseToThePowerOf(System.Double,System.Double)">
      <summary>
            Extension method to raise the power of a double value with a double.
            </summary>
      <param name="value">The value.</param>
      <param name="power">The power.</param>
      <returns>The double raised to the power</returns>
      <example>
        <code>
            Double value = 2D;
            Double x = value.RaiseToThePowerOf(value);
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DoubleExtensions.ToDecimal(System.Double)">
      <summary>
            Extension method to convert double to decimal.
            </summary>
      <param name="value">The value.</param>
      <returns>The number converted to decimal</returns>
      <example>
        <code>
            Double value = 2D;
            Decimal x = value.ToDecimal();
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.DoubleExtensions.LocalFromUnixTime(System.Double)">
      <summary>
            Converts a Unix timestamp to the local time of the server.  DST is observed.
            </summary>
      <param name="ut">Unix timestamp, in seconds</param>
      <returns>DateTime, local to the server</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.EnumExtensions">
      <summary>
            Provides extension methods for dealing with enumerations.
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.EnumExtensions.Description(System.Enum)">
      <summary>
            Gets the description of the enumeration value.
            </summary>
      <param name="en">The en.</param>
      <returns>description</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.ExceptionExtensions">
      <summary>
            Extensions for Exception type
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.ExceptionExtensions.FormatToString(System.Exception)">
      <summary>
            Formats an exception to string.
            </summary>
      <example>
        <code>
              Exception ex = new Exception("Something blew up");
              Logging.LogEntry entry = new Rock.Framework.Logging.LogEntry();
              entry.ExceptionData = ex.FormatToString();
            </code>
      </example>
      <param name="ex">The exception.</param>
      <returns>formatted string of exception including properties</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.FileSystemExtensions">
      <summary>
            Extensions for the file system.
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.FileSystemExtensions.GetUserRights(System.IO.FileInfo)">
      <summary>
            Get the rights for the current user for a file.
            </summary>
      <param name="fileSystemObject">File to inquire for rights</param>
      <returns>Current user's rights on file, if file does not exist return is 0</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="fileSystemObject" /> is null.</exception>
    </member>
    <member name="M:Rock.Framework.Extensions.FileSystemExtensions.GetUserRights(System.IO.FileInfo,System.String,System.String)">
      <summary>
            Get the rights for the specified user for a file.
            </summary>
      <param name="fileSystemObject">File to inquire for rights</param>
      <param name="user">User name to inquire for permissions</param>
      <param name="domain">Domain the user belongs to</param>
      <returns>Specified user's rights on file, if file does not exist return is 0</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="fileSystemObject" /> is null.</exception>
    </member>
    <member name="M:Rock.Framework.Extensions.FileSystemExtensions.GetUserRights(System.IO.DirectoryInfo)">
      <summary>
            Get the rights for the current user for a directory.
            </summary>
      <param name="fileSystemObject">Directory to inquire for rights</param>
      <returns>Current user's rights on directory, if file does not exist return is 0</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="fileSystemObject" /> is null.</exception>
    </member>
    <member name="M:Rock.Framework.Extensions.FileSystemExtensions.GetUserRights(System.IO.DirectoryInfo,System.String,System.String)">
      <summary>
            Get the rights for the specified user for a directory.
            </summary>
      <param name="fileSystemObject">File to inquire for rights</param>
      <param name="user">User name to inquire for permissions</param>
      <param name="domain">Domain the user belongs to</param>
      <returns>Specified user's rights on directory, if file does not exist return is 0</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="fileSystemObject" /> is null.</exception>
    </member>
    <member name="M:Rock.Framework.Extensions.FileSystemExtensions.IsFileInUse(System.String)">
      <summary> 
            This function checks whether the file is in use or not. 
            </summary>
      <param name="fileName">File Name</param>
      <returns>Return True if file in use else false</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.FileSystemExtensions.IsFileInUse(System.IO.FileInfo)">
      <summary> 
            This function checks whether the FileInfo is in use or not. 
            </summary>
      <param name="file">File Name</param>
      <returns>Return True if file in use else false</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.FuncExtensions">
      <summary>Extensions for the Func type.</summary>
      <remarks>
        <para>The FuncExtensions class provides helpers for retrying a function 
            The function is executed, and if the expected exception is
            encountered, the function is retried a certain number of times.  If the
            function never succeeds, the last encountered exception is thrown up the
            stack.  If an exception that wasn't expected is encountered, it is
            passed up the stack without any retries.
            </para>
        <para>Overloads are provided for catching multiple types of exceptions, so
            catching <see cref="T:System.Exception" /> is not necessary.
            </para>
      </remarks>
      <example>
            This example returns a filesteam
            <code><![CDATA[
            var func = new Func<System.IO.FileStream>(() =>
            {
                return System.IO.File.Open(filepath, System.IO.FileMode.Open);
            });
            var stream = func.ReTry<System.IO.FileStream, System.IO.IOException>(3, 0);
            ]]></code><para>This example tries to open a file 3 times.  If a
              <see cref="T:System.IO.IOException" /> is encountered the first two
            tries, it tries again.  If an IOException is encountered on the
            third try, it is thrown.  If a call to func succeeds, the result is
            returned.
            </para><code><![CDATA[
            var func = new Func<System.IO.FileStream>(() =>
            {
            return System.IO.File.Open(filepath, System.IO.FileMode.Open);
            });
            var stream = func.ReTry<System.IO.FileStream, System.IO.IOException>(3, 0);
            ]]></code><para>This example tries to open a file 3 times.  If a
              <see cref="T:System.IO.IOException" /> or
              <see cref="T:System.UnauthorizedAccessException" /> is encountered
            the first two tries, it tries again.  If an IOException or an
            UnauthorizedAccessException is encountered on the third try, it is
            thrown.  If a call to func succeeds, the result is returned.
            </para><code><![CDATA[
            var func = new Func<System.IO.FileStream>(() =>
            {
            return System.IO.File.Open(filepath, System.IO.FileMode.Open);
            });
            var stream = func.ReTry<
            System.IO.FileStream,
            System.IO.IOException,
            System.IO.UnauthorizedAccessException>(3, 0);
            ]]></code></example>
    </member>
    <member name="M:Rock.Framework.Extensions.FuncExtensions.ReTry``2(System.Func{``0},System.Int32,System.Int32)">
      <summary>
            Retry a func if a TException is encountered
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TException">The type of the exception.</typeparam>
      <param name="func">The func.</param>
      <param name="numberOfTries">The number of tries.</param>
      <param name="millesecondsSleepBetweenRetry">The milleseconds sleep between retry.</param>
      <returns>TResult</returns>
      <example>
            This example tries to open a file 3 times.  If a
              <see cref="T:System.IO.IOException" /> is encountered the first two
            tries, it tries again.  If an IOException is encountered on the
            third try, it is thrown.  If a call to func succeeds, the result is
            returned.
            <code><![CDATA[
            var func = new Func<System.IO.FileStream>(() =>
            {
            return System.IO.File.Open(filepath, System.IO.FileMode.Open);
            });
            var stream = func.ReTry<System.IO.FileStream, System.IO.IOException>(3, 0);
            ]]></code></example>
      <exception cref="T:System.ArgumentNullException">thrown when func is null</exception>
    </member>
    <member name="M:Rock.Framework.Extensions.FuncExtensions.ReTry``3(System.Func{``0},System.Int32,System.Int32)">
      <summary>
            Retry a func if a TException1 or TException2 is encountered
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <param name="func">func to execute</param>
      <param name="numberOfTries">number of times to try func</param>
      <param name="millesecondsSleepBetweenRetry">milleseconds to
            sleep before next retry if exception is encountered</param>
      <returns>TResult</returns>
      <exception cref="T:System.ArgumentNullException">thrown when func is null</exception>
      <example>
            This example tries to open a file 3 times.  If a
              <see cref="T:System.IO.IOException" /> or
              <see cref="T:System.UnauthorizedAccessException" /> is encountered
            the first two tries, it tries again.  If an IOException or an
            UnauthorizedAccessException is encountered on the third try, it is
            thrown.  If a call to func succeeds, the result is returned.
              <code><![CDATA[
            var func = new Func<System.IO.FileStream>(() =>
            {
            return System.IO.File.Open(filepath, System.IO.FileMode.Open);
            });
            var stream = func.ReTry<
            System.IO.FileStream,
            System.IO.IOException,
            System.IO.UnauthorizedAccessException>(3, 0);
            ]]></code></example>
    </member>
    <member name="M:Rock.Framework.Extensions.FuncExtensions.ReTry``4(System.Func{``0},System.Int32,System.Int32)">
      <summary>
            Retry a func if TException1, TException2, TException3 is
            encountered
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <typeparam name="TException3">exception type to catch</typeparam>
      <param name="func">func to execute</param>
      <param name="numberOfTries">number of times to try func</param>
      <param name="millesecondsSleepBetweenRetry">milleseconds to
            sleep before next retry if exception is encountered</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">thrown when func
            is null</exception>
      <example>
            This example tries to open a file 3 times.  If a
              <see cref="T:System.IO.IOException" />,
              <see cref="T:System.IO.FileNotFoundException" />, or
              <see cref="T:System.UnauthorizedAccessException" /> is encountered
            the first two tries, it tries again.  If an IOException,
            UnauthorizedAccessException, or a FileNotFoundException is
            encountered on the third try, it is thrown.  If a call to func
            succeeds, the result is returned.
              <code><![CDATA[
            var func = new Func<System.IO.FileStream>(() =>
            {
            return System.IO.File.Open(filepath, System.IO.FileMode.Open);
            });
            var stream = func.ReTry<
            System.IO.FileStream,
            System.IO.IOException,
            System.IO.UnauthorizedAccessException>(3, 0);
            ]]></code></example>
    </member>
    <member name="M:Rock.Framework.Extensions.FuncExtensions.ReTry``3(System.Func{``0,``1},``0,System.Int32,System.Int32)">
      <summary>
            Retry a Func if a TException is encountered
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TException">The type of the exception.</typeparam>
      <typeparam name="T">Parameter type.</typeparam>
      <param name="func">The Func.</param>
      <param name="parameter">Value to be used by function</param>
      <param name="numberOfTries">The number of tries.</param>
      <param name="millisecondsSleepBetweenRetry">The milliseconds sleep between retry.</param>
      <returns>TResult</returns>
      <example>
        <code><![CDATA[
              public static bool IsFileAvailable(string fileName)
              {
                if (File.Exists(fileName) == false) 
                {
                  throw new IOException("File Not Found: " + fileName); 
                }
                if(fileName.IsFileInUse()) 
                {
                  throw new IOException(“File is in use”); 
                }
                return true;
              }
              
              public static bool IsFileAvailable(string fileName, int attempts, int waitBetweenAttempts)
              {
                Func<string, bool> func = IsFileAvailable;
                try{
                 return func.ReTry<string, bool, IOException>(fileName, attempts, waitBetweenAttempts);
                }
                catch(IOException){
                 return false;
                }
              }
            ]]></code>
      </example>
      <exception cref="T:System.ArgumentNullException">thrown when func is null</exception>
    </member>
    <member name="M:Rock.Framework.Extensions.FuncExtensions.ReTry``4(System.Func{``0,``1},``0,System.Int32,System.Int32)">
      <summary>
            Retry a func if a TException1 or TException2 is encountered
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <typeparam name="T">Parameter type.</typeparam>
      <param name="func">func to execute</param>
      <param name="parameter">Value to be used by function</param>
      <param name="numberOfTries">number of times to try func</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <returns>TResult</returns>
      <exception cref="T:System.ArgumentNullException">thrown when func is null</exception>
      <example>
        <code><![CDATA[
              public static bool IsFileAvailable(string fileName)
              {
                if (File.Exists(fileName) == false) 
                {
                  throw new FileNotFoundException("File Not Found: " + fileName); 
                }
                if(fileName.IsFileInUse()) 
                {
                  throw new IOException(“File is in use”); 
                }
                return true;
              }
              
              public static bool IsFileAvailable(string fileName, int attempts, int waitBetweenAttempts)
              {
                FuncRetryWithParameters<string, bool> func = IsFileAvailable;
                try{
                 return func.ReTry<string, bool, IOException, FileNotFoundException>(fileName, attempts, waitBetweenAttempts);
                }
                catch(IOException){
                 return false;
                }
              }
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.FuncExtensions.ReTry``5(System.Func{``0,``1},``0,System.Int32,System.Int32)">
      <summary>
            Retry a func if TException1, TException2, TException3 is
            encountered
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <typeparam name="TException3">exception type to catch</typeparam>
      <typeparam name="T">Parameter type.</typeparam>
      <param name="func">func to execute</param>
      <param name="parameter">Value to be used by function</param>
      <param name="numberOfTries">number of times to try func</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">thrown when func
            is null</exception>
      <example>
        <code><![CDATA[
              public static bool IsFileAvailable(string fileName)
              {
                if (File.Exists(fileName) == false) 
                {
                  throw new FileNotFoundException("File Not Found: " + fileName); 
                }
                if(fileName.IsFileInUse()) 
                {
                  throw new IOException(“File is in use”); 
                }
                return true;
              }
              
              public static bool IsFileAvailable(string fileName, int attempts, int waitBetweenAttempts)
              {
                Func<string, bool> func = IsFileAvailable;
                try{
                 return func.ReTry<string, bool, IOException, FileNotFoundException, Exception>(fileName, attempts, waitBetweenAttempts);
                }
                catch(IOException){
                 return false;
                }
              }
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.FuncExtensions.ReTry``4(System.Func{``0,``1,``2},``0,``1,System.Int32,System.Int32)">
      <summary>
            Retry a func if a TException is encountered
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TException">The type of the exception.</typeparam>
      <typeparam name="T1">Parameter1 type.</typeparam>
      <typeparam name="T2">Parameter2 type.</typeparam>
      <param name="parameter1">Parameter1 to func</param>
      <param name="parameter2">Parameter12 to func</param>
      <param name="func">The func.</param>
      <param name="numberOfTries">The number of tries.</param>
      <param name="millisecondsSleepBetweenRetry">The milliseconds sleep between retry.</param>
      <returns>TResult</returns>
      <example>
        <code><![CDATA[
              public static byte[] ConvertFile(byte[] fileBytes, FileType newType)
              {
                return Wcf.Service<IConversionService>.Use<byte[]>( (serviceProxy)=>{ return serviceProxy.Convert(fileBytes, newType); } );
              }
              
              public static byte[] ConvertFile(byte[] fileBytes, FileType newType, int attempts, int waitBetweenAttempts)
              {
                Func<string, bool> func = ConvertFile;
                return func.ReTry<string, bool, TimeoutException, CommunicationException>(fileName, attempts, waitBetweenAttempts); 
              }
            ]]></code>
      </example>
      <exception cref="T:System.ArgumentNullException">thrown when func is null</exception>
    </member>
    <member name="M:Rock.Framework.Extensions.FuncExtensions.ReTry``5(System.Func{``0,``1,``2},``0,``1,System.Int32,System.Int32)">
      <summary>
            Retry a func if a TException1 or TException2 is encountered
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <typeparam name="T1">Parameter1 type.</typeparam>
      <typeparam name="T2">Parameter2 type.</typeparam>
      <param name="parameter1">Parameter1 to func</param>
      <param name="parameter2">Parameter12 to func</param>
      <param name="func">func to execute</param>
      <param name="numberOfTries">number of times to try func</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <returns>TResult</returns>
      <exception cref="T:System.ArgumentNullException">thrown when func is null</exception>
      <example>
        <code><![CDATA[
              public static byte[] ConvertFile(byte[] fileBytes, FileType newType)
              {
                return Wcf.Service<IConversionService>.Use<byte[]>( (serviceProxy)=>{ return serviceProxy.Convert(fileBytes, newType); } );
              }
              
              public static byte[] ConvertFile(byte[] fileBytes, FileType newType, int attempts, int waitBetweenAttempts)
              {
                Func<string, bool> func = ConvertFile;
                return func.ReTry<string, bool, TimeoutException, CommunicationException>(fileName, attempts, waitBetweenAttempts); 
              }
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.FuncExtensions.ReTry``6(System.Func{``0,``1,``2},``0,``1,System.Int32,System.Int32)">
      <summary>
            Retry a func if TException1, TException2, TException3 is
            encountered
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <typeparam name="TException3">exception type to catch</typeparam>
      <typeparam name="T1">Parameter1 type.</typeparam>
      <typeparam name="T2">Parameter2 type.</typeparam>
      <param name="parameter1">Parameter1 to func</param>
      <param name="parameter2">Parameter12 to func</param>
      <param name="func">func to execute</param>
      <param name="numberOfTries">number of times to try func</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">thrown when func
            is null</exception>
      <example>
        <code><![CDATA[
              public static byte[] ConvertFile(byte[] fileBytes, FileType newType)
              {
                return Wcf.Service<IConversionService>.Use<byte[]>( (serviceProxy)=>{ return serviceProxy.Convert(fileBytes, newType); } );
              }
              
              public static byte[] ConvertFile(byte[] fileBytes, FileType newType, int attempts, int waitBetweenAttempts)
              {
                Func<string, bool> func = ConvertFile;
                return func.ReTry<string, bool, TimeoutException, CommunicationException, FaultException<RetriableDetail>>(fileName, attempts, waitBetweenAttempts); 
              }
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.FuncExtensions.ReTry``5(System.Func{``0,``1,``2,``3},``0,``1,``2,System.Int32,System.Int32)">
      <summary>
            Retry a func if a TException is encountered
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TException">The type of the exception.</typeparam>
      <typeparam name="T1">Parameter1 type.</typeparam>
      <typeparam name="T2">Parameter2 type.</typeparam>
      <typeparam name="T3">Parameter2 type.</typeparam>
      <param name="parameter1">Parameter1 to func</param>
      <param name="parameter2">Parameter12 to func</param>
      <param name="parameter3">Parameter12 to func</param>
      <param name="func">The func.</param>
      <param name="numberOfTries">The number of tries.</param>
      <param name="millisecondsSleepBetweenRetry">The milliseconds sleep between retry.</param>
      <returns>TResult</returns>
      <example>
        <code><![CDATA[
              public static byte[] CalcRate(int creditScore1, int creditScore2, int creditScore3)
              {
                return Wcf.Service<IRateCalculator>.Use<float>( (serviceProxy)=>{ return serviceProxy.GetRate(creditScore1, creditScore2, creditScore3) }; );
              }
              
              public static byte[] ConvertFile(byte[] fileBytes, FileType newType, int attempts, int waitBetweenAttempts)
              {
                Func<string, bool> func = ConvertFile;
                return func.ReTry<string, bool, Exception>(fileName, attempts, waitBetweenAttempts); 
              }
            ]]></code>
      </example>
      <exception cref="T:System.ArgumentNullException">thrown when func is null</exception>
    </member>
    <member name="M:Rock.Framework.Extensions.FuncExtensions.ReTry``6(System.Func{``0,``1,``2,``3},``0,``1,``2,System.Int32,System.Int32)">
      <summary>
            Retry a func if a TException1 or TException2 is encountered
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <typeparam name="T1">Parameter1 type.</typeparam>
      <typeparam name="T2">Parameter2 type.</typeparam>
      <typeparam name="T3">Parameter2 type.</typeparam>
      <param name="parameter1">Parameter1 to func</param>
      <param name="parameter2">Parameter12 to func</param>
      <param name="parameter3">Parameter12 to func</param>
      <param name="func">func to execute</param>
      <param name="numberOfTries">number of times to try func</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <returns>TResult</returns>
      <exception cref="T:System.ArgumentNullException">thrown when func is null</exception>
      <example>
        <code><![CDATA[
              public static byte[] CalcRate(int creditScore1, int creditScore2, int creditScore3)
              {
                return Wcf.Service<IRateCalculator>.Use<float>( (serviceProxy)=>{ return serviceProxy.GetRate(creditScore1, creditScore2, creditScore3) }; );
              }
              
              public static byte[] ConvertFile(byte[] fileBytes, FileType newType, int attempts, int waitBetweenAttempts)
              {
                Func<string, bool> func = ConvertFile;
                return func.ReTry<string, bool, TimeoutException, CommunicationException>(fileName, attempts, waitBetweenAttempts); 
              }
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.FuncExtensions.ReTry``7(System.Func{``0,``1,``2,``3},``0,``1,``2,System.Int32,System.Int32)">
      <summary>
            Retry a func if TException1, TException2, TException3 is
            encountered
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TException1">exception type to catch</typeparam>
      <typeparam name="TException2">exception type to catch</typeparam>
      <typeparam name="TException3">exception type to catch</typeparam>
      <typeparam name="T1">Parameter1 type.</typeparam>
      <typeparam name="T2">Parameter2 type.</typeparam>
      <typeparam name="T3">Parameter2 type.</typeparam>
      <param name="parameter1">Parameter1 to func</param>
      <param name="parameter2">Parameter12 to func</param>
      <param name="parameter3">Parameter12 to func</param>
      <param name="func">func to execute</param>
      <param name="numberOfTries">number of times to try func</param>
      <param name="millisecondsSleepBetweenRetry">milliseconds to
            sleep before next retry if exception is encountered</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">thrown when func
            is null</exception>
      <example>
        <code><![CDATA[
              public static byte[] CalcRate(int creditScore1, int creditScore2, int creditScore3)
              {
                return Wcf.Service<IRateCalculator>.Use<float>( (serviceProxy)=>{ return serviceProxy.GetRate(creditScore1, creditScore2, creditScore3) }; );
              }
              
              public static byte[] ConvertFile(byte[] fileBytes, FileType newType, int attempts, int waitBetweenAttempts)
              {
                Func<string, bool> func = ConvertFile;
                return func.ReTry<string, bool, TimeoutException, CommunicationException, FaultException<RetriableException>>(fileName, attempts, waitBetweenAttempts); 
              }
            ]]></code>
      </example>
    </member>
    <member name="T:Rock.Framework.Extensions.GenericExtensions">
      <summary>
            Provides extension methods for generic types
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.GenericExtensions.Coalesce``1(``0,``0)">
      <summary>
            Returns the <paramref name="ifNullValue" /> when current object is null for  
            reference types or zero for value types.
            </summary>
      <typeparam name="T">Type to coalesce.</typeparam>
      <param name="left">The left.</param>
      <param name="ifNullValue">the value that will be return if the current object is null or zero.</param>
      <returns>Returns the <paramref name="ifNullValue" /> when current object is null for  
            reference types or zero for value types.
            </returns>
      <example>
        <code>
            string s = String.Empty;
            Console.WriteLine(s.Coalesce("test")); // will print 'test'
            s = "asdf";
            Console.WriteLine(s.Coalesce("test")); // will print 'asdf' 
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.GenericExtensions.Coalesce(System.String,System.String)">
      <summary>
            Return the <paramref name="ifNullValue" /> when current string is null or empty.
            </summary>
      <param name="left">The left.</param>
      <param name="ifNullValue">If null value.</param>
      <returns>A string.</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.GuidExtensions">
      <summary>
            Extensions for the Guid object.
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.GuidExtensions.ToOctetString(System.Guid)">
      <summary>
            Converts an encoded GUID to an OctetString.
            </summary>
      <param name="value">The value.</param>
      <returns>octetstring</returns>
      <remarks>
            Converts the guid id in the format of xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx to \xx\xx\xx\xx\xx\xx\xx\xx\xx\xx\xx
            so we can search on it in active directory.
            </remarks>
    </member>
    <member name="T:Rock.Framework.Extensions.HashType">
      <summary>
            Simple Enum used with the String Extension Method ToHash()
            </summary>
    </member>
    <member name="F:Rock.Framework.Extensions.HashType.MD5">
      <summary>
            MD5 Hash Type
            </summary>
    </member>
    <member name="F:Rock.Framework.Extensions.HashType.SHA1">
      <summary>
            SHA1 Hash Type
            </summary>
    </member>
    <member name="F:Rock.Framework.Extensions.HashType.SHA256">
      <summary>
            SHA256 Hash Type
            </summary>
    </member>
    <member name="F:Rock.Framework.Extensions.HashType.SHA512">
      <summary>
            SHA512 Hash Type
            </summary>
    </member>
    <member name="T:Rock.Framework.Extensions.HashTypeExtensions">
      <summary>
            HashType extensions
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.HashTypeExtensions.ComputeHash(Rock.Framework.Extensions.HashType,System.String)">
      <summary>
            Computes the hash value for the specified string.
            </summary>
      <param name="hashType">The type of algorithm to use when computing the hash.</param>
      <param name="value">The input to compute the hash code for.</param>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.HashTypeExtensions.ComputeHash(Rock.Framework.Extensions.HashType,System.IO.Stream)">
      <summary>
            Computes the hash value for the specified <see cref="T:System.IO.Stream" /> object.
            </summary>
      <param name="hashType">The type of algorithm to use when computing the hash.</param>
      <param name="inputStream">The input to compute the hash code for.</param>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.HashTypeExtensions.ComputeHash(Rock.Framework.Extensions.HashType,System.IO.Stream,System.Boolean)">
      <summary>
            Computes the hash value for the specified <see cref="T:System.IO.Stream" /> object.
            </summary>
      <param name="hashType">The type of algorithm to use when computing the hash.</param>
      <param name="inputStream">The input to compute the hash code for.</param>
      <param name="closeStream">Whether to close the stream after calculating the hash.</param>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.HashTypeExtensions.ComputeHash(Rock.Framework.Extensions.HashType,System.Byte[])">
      <summary>
            Computes the hash value for the specified byte array.
            </summary>
      <param name="hashType">The type of algorithm to use when computing the hash.</param>
      <param name="buffer">The input to compute the hash code for.</param>
      <returns>The computed hash code.</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.IDictionaryExtensions">
      <summary>
            Provides extension methods for dealing with objects that implement IDictionary.
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.IDictionaryExtensions.TryRemove``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
      <summary>
            Tries to removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
      <typeparam name="T">Key Type</typeparam>
      <typeparam name="V">Value Type</typeparam>
      <param name="dictionary">The dictionary.</param>
      <param name="key">The key.</param>
      <returns>boolean if key is removed</returns>
      <example>
        <code><![CDATA[
            IDictionary<string, string> dictionary = new Dictionary<string, string> { { "K1", "T1" }, { "K2", "T2" } };
            dictionary.TryRemove("K1") // this will remove the 'K1' entry and return true
            dictionary.TryRemove("K3") // this will return true since K3 is not a valid key
            ]]></code>
      </example>
    </member>
    <member name="T:Rock.Framework.Extensions.IEnumerableExtensions">
      <summary>
            Provides extensions methods for dealing with objects that implement IEnumerable. To use the built in extensions within the 
            framework add the following to the top of your files.
            <para><code>using Rock.Framework.Extensions;</code></para></summary>
    </member>
    <member name="M:Rock.Framework.Extensions.IEnumerableExtensions.SelectRandom``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Extension method that selects a random element from an object that implements IEnumerable.
            </summary>
      <typeparam name="T">Type of element to be returned.</typeparam>
      <param name="enumerable">Enumerable from which to select a random element.</param>
      <returns>A randomly selected element from the enumerable if it has any; default 
            for the given type otherwise.</returns>
      <example>
        <code>
            string[] jellyBeans = { "red", "pink", "yellow", "green", "orange", "white", "black" };
            string jelly = jellyBeans.SelectRandom{string}();
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.IEnumerableExtensions.Randomize``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Randomly selects the elements of the enmerable and returns them in a random order. 
            </summary>
      <typeparam name="T">Type of element in the enumerable.</typeparam>
      <param name="enumerable">Enumerable to have its elements randomly selected.</param>
      <returns>An enumerable of randomly selected elements of the original.</returns>
      <example>
        <code>
            string[] jellyBeans = { "red", "pink", "yellow", "green", "orange", "white", "black" };
            IEnumerable{string} randomJellyBeans = jellyBeans.Randomize{string}();
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.IEnumerableExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
      <summary>
            Extension method that converts anything that implements IEnumerable into a data table.
            </summary>
      <typeparam name="T">Object type that implments IEnumerable.</typeparam>
      <param name="collection">The collection.</param>
      <param name="dataTableName">Name of the data table.</param>
      <returns>DataTable</returns>
      <example>
        <code>
            List{PersonHelper} persons = PersonHelper.GetFiveRandomPersons();
            DataTable dt = persons.ToDataTable(_dataTableName);
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Performs the <paramref name="action" /> over the enumeration.
            </summary>
      <typeparam name="T">Type</typeparam>
      <param name="collection">The collection.</param>
      <param name="action">The action.</param>
      <example>
        <code>
            int i=0;
            int[] c = {1, 2, 3};
            c.ForEach(n =&gt; i += n); // will sum all the numbers and add it to the variable i
            c.ForEach( n =&gt; Console.WriteLine(n)); // will print all the array numbers
            Console.WriteLine("total is " + i); // will print 6
            </code>
      </example>
    </member>
    <member name="T:Rock.Framework.Extensions.Int32Extensions">
      <summary>
            Provides extensions methods for dealing with integers. To use the built in extensions within the 
            framework add the following to the top of your files.
            <para><code>using Rock.Framework.Extensions;</code></para></summary>
    </member>
    <member name="M:Rock.Framework.Extensions.Int32Extensions.ToDouble(System.Int32)">
      <summary>
            Converts an Integer to a Double.
            </summary>
      <param name="value">The value.</param>
      <returns>double</returns>
      <example>
        <code>
            int x = 2;
            Double y = x.ToDouble();
            </code>
      </example>
    </member>
    <member name="T:Rock.Framework.Extensions.LongExtensions">
      <summary>
            Entension methods for long numeric type
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.LongExtensions.LocalFromUnixTime(System.Int64)">
      <summary>
            Converts a Unix timestamp to the local time of the server.  DST is observed.
            </summary>
      <param name="ut">Unix timestamp, in seconds</param>
      <returns>DateTime, local to the server</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.NameValueCollectionExtensions">
      <summary>
            Provides extension methods for NameValueCollection.
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.NameValueCollectionExtensions.Contains(System.Collections.Specialized.NameValueCollection,System.String)">
      <summary>
            Determines whether the key is in the specified collection.
            </summary>
      <param name="collection">The collection.</param>
      <param name="key">The key.</param>
      <returns>
        <c>true</c> if the collection contains the key; otherwise, <c>false</c>.
            </returns>
      <example>
        <code>
            NameValueCollection collection = new NameValueCollection {{"key1", "value1"}, {"key2", "value2"}};
            collection.Contains("key1"); // returns true
            ollection.Contains("key3"); // returns false
            </code>
      </example>
    </member>
    <member name="T:Rock.Framework.Extensions.ObjectExtensions">
      <summary>
            Provides extensions methods that can be applied to objects of any type.
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.ObjectExtensions.In(System.Object,System.Collections.IEnumerable)">
      <summary>
            Check if this object is part of any collection that implements <cref name="System.Collections.Generic.IEnumerable" />.
            </summary>
      <param name="value">The value.</param>
      <param name="collection">The collection.</param>
      <returns>
            Returns true if object found in collection otherwise false.
            </returns>
      <example>
        <code>
            string[] collection = {"Name1", "Name2"} ;
            string s2 = "Name2";
            string s3 = "Name3";
            s2.In(collection); // will return true
            s3.In(collection); // will return false
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.ObjectExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Check if this object is part of any collection that implements <cref name="System.Collections.IEnumerable" />.
            </summary>
      <typeparam name="T">Type</typeparam>
      <param name="obj">The object.</param>
      <param name="collection">The collection.</param>
      <returns>Returns <c>true</c> if object found in collection otherwise <c>false</c>.</returns>
      <example>
        <code><![CDATA[
            List<string> list = new List<string> { "Name1", "Name2" };
            string s2 = "Name2";
            string s3 = "Name3";
            s2.In(collection) // will return true
            s3.In(collection) // will return false
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Extensions.ObjectExtensions.DeepClone``1(``0)">
      <summary>
            Creates a deep copy of a serializable type.
            </summary>
      <typeparam name="T">The type of the object to serialize</typeparam>
      <param name="obj">The object to serialize.</param>
      <returns>Returns a deep copy.</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.ObjectExtensions.ToJson``1(``0)">
      <summary>
            Serializes an object to JSON.
            </summary>
      <typeparam name="T">The type of the object to serialize</typeparam>
      <param name="obj">The object to serialize.</param>
      <returns>Returns a JSON string representation of the object.</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.StopwatchExtensions">
      <summary>
            Provides extenssion methods for Stopwatch.
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.StopwatchExtensions.Time(System.Diagnostics.Stopwatch,System.Action,System.Int32)">
      <summary>
            Runs the specified delegate <paramref name="action" /><paramref name="iterations" /> times
            and returns the number of milliseconds it tool to run.
            </summary>
      <example>
        <code>
            public static void LongRunningMethod()
            {
               double CrunchMe = new Random().NextDouble();
               for (int i = 0; i &gt; 100000; i++)
               {
                   CrunchMe = Math.Sqrt(Math.Sin(Math.Pow(CrunchMe, 2)));
               }
            }
            Action action = LongRunningMethod;
            Stopwatch sw = new Stopwatch();
            long ms = sw.Time(action, 1);
            </code>
      </example>
      <param name="sw">The stopwatch.</param>
      <param name="action">The action to perform.</param>
      <param name="iterations">The number of times to run the action.</param>
      <returns>Elapsed Milliseconds</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.StreamExtensions">
      <summary>
            Stream extensions
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.StreamExtensions.ToHash(System.IO.Stream,Rock.Framework.Extensions.HashType)">
      <summary>
            Computes the hash value for the specified byte array.
            </summary>
      <param name="stream">The input to compute the hash code for.</param>
      <param name="hashType">The type of algorithm to use when computing the hash.</param>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.StreamExtensions.ToHash(System.IO.Stream,Rock.Framework.Extensions.HashType,System.Boolean)">
      <summary>
            Computes the hash value for the specified byte array.
            </summary>
      <param name="stream">The input to compute the hash code for.</param>
      <param name="hashType">The type of algorithm to use when computing the hash.</param>
      <param name="closeStream">Whether to close the stream after calculating the hash.</param>
      <returns>The computed hash code.</returns>
    </member>
    <member name="T:Rock.Framework.Extensions.StringExtensions">
      <summary>
            String extensions
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.StringExtensions.IsNotNullOrEmpty(System.String)">
      <summary>
            Determines whether a string [is not null or empty].
            </summary>
      <param name="str">The string.</param>
      <returns>
        <c>true</c> if [is not null or empty] [the specified STR]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Extensions.StringExtensions.IsNotNullAndEquals(System.String,System.String)">
      <summary>
            Checks if a string is null before doing an equals comparison. The comparison is case sensitive.
            </summary>
      <param name="originalString">string that is checked for null before comparison</param>
      <param name="compareTo">string to compare str to</param>
      <exception cref="T:System.ArgumentNullException">comparison cannot be null</exception>
      <returns>returns true if and only if str is not null and str and comparison are equal</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.StringExtensions.FromJson``1(System.String)">
      <summary>
            Deserializes a JSON string into an object of type T.
            </summary>
      <typeparam name="T">The type of object represented by this string</typeparam>
      <param name="str">The JSON string to deserialize</param>
      <returns>An object of type T</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.StringExtensions.ToHash(System.String,Rock.Framework.Extensions.HashType)">
      <summary>
            Converts a string to a Hash of the specified type.
            </summary>
      <param name="value">The string to be hashed.</param>
      <param name="hashType">Type of the hash.</param>
      <returns>The hash value</returns>
    </member>
    <member name="M:Rock.Framework.Extensions.StringExtensions.OmitXmlSsn(System.String)">
      <summary>
            Takes in xml notation that may or may not contain an SSN element, and removes it from the string.
            </summary>
      <param name="message">Original message that may contain an XML formatted SSN</param>
      <returns>Original message with SSN ommited</returns>
      <remarks>
        <list type="bullet">
          <listheader>The following examples that will result in the SSN being omitted.</listheader>
          <item>
            <SSN>123-45-6789</SSN>
          </item>
          <item>
            <SSN>123456789</SSN>
          </item>
          <item>
            <SSN>123-456789</SSN>
          </item>
          <item>
            <ssn>123-45-6789</ssn>
          </item>
          <item>
            <ssn>123456789</ssn>
          </item>
          <item>
            <ssn>123-456789</ssn>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:Rock.Framework.Extensions.TypeExtensions">
      <summary>
            Provides extensions methods that can be applied to Type objects.
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.TypeExtensions.IsNullable(System.Type)">
      <summary>
            Determines whether the specified type is nullable.
            </summary>
      <param name="type">The type.</param>
      <returns>
        <c>true</c> if the specified type is nullable; otherwise, <c>false</c>.
            </returns>
      <example>
        <code>
            Type type = typeof(int?); 
            bool actual = type.IsNullable(); // this will be true
            </code>
      </example>
    </member>
    <member name="T:Rock.Framework.Extensions.WindowsIdentityExtensions">
      <summary>
            WindowsIdentity extension methods.
            </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.WindowsIdentityExtensions.GetGroupsSid(System.Security.Principal.WindowsIdentity)">
      <summary>
            Gets the groups binary sid.
            </summary>
      <param name="windowsIdentity">The windows identity.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Rock.Framework.Extensions.XmlDocumentExtensions">
      <summary>
      </summary>
    </member>
    <member name="M:Rock.Framework.Extensions.XmlDocumentExtensions.ToIndentedString(System.Xml.XmlDocument)">
      <summary>
            Toes the XML indented string.
            </summary>
      <param name="xmlDoc">The XML doc.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Rock.Framework.IO.FileSystem">
      <summary>
            Utility class to get the rights for files or folders.
            </summary>
    </member>
    <member name="M:Rock.Framework.IO.FileSystem.GetDirectoryRights(System.String)">
      <summary>
            Determine the Rights for the path for the current user
            </summary>
      <param name="folderPath"> Path to inquire about </param>
      <returns> Specified user's rights on directory, if file does not exist return is 0 </returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="folderPath" /> is null.</exception>
    </member>
    <member name="M:Rock.Framework.IO.FileSystem.GetDirectoryRights(System.String,System.String,System.String)">
      <summary>
            Determine the Rights for the path for a given user
            </summary>
      <param name="folderPath">Path to inquire about</param>
      <param name="user">User to inquire rights for</param>
      <param name="domainName">Domain the user belongs to</param>
      <returns>The Rights the user has on the folder, if the directory does not exist a 0 is returned</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="folderPath" /> is null.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="folderPath" /> is <c>String.Empty</c>, or contains a character in <c>Path.GetInvalidPathChars</c></exception>
    </member>
    <member name="M:Rock.Framework.IO.FileSystem.GetDirectoryRights(System.IO.DirectoryInfo,System.String,System.String)">
      <summary>
            Determine the Rights for the path for a given user
            </summary>
      <param name="folderPath">Path to inquire about</param>
      <param name="user">User to inquire rights for</param>
      <param name="domainName">Domain the user belongs to</param>
      <returns>The Rights the user has on the folder, if the directory does not exist a 0 is returned</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="folderPath" /> is null</exception>
      <exception cref="T:System.ArgumentException"> When <paramref name="user" /> is <c>String.Empty</c></exception>
      <exception cref="T:System.ArgumentException"> When <paramref name="domainName" /> is <c>String.Empty</c></exception>
      <exception cref="T:System.ArgumentNullException"> When <paramref name="user" /> is null </exception>
      <exception cref="T:System.ArgumentNullException"> When <paramref name="domainName" /> is null </exception>
    </member>
    <member name="M:Rock.Framework.IO.FileSystem.GetFileRights(System.String)">
      <summary>
            Determine the Rights for the file for the current user
            </summary>
      <param name="filePath">File to inquire rights for</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.IO.FileSystem.GetFileRights(System.String,System.String,System.String)">
      <summary>
            Determine the Rights for the file for the specified user
            </summary>
      <param name="filePath">File to inquire rights for</param>
      <param name="user">User to inquire rights for</param>
      <param name="domainName">Domain the user belongs to</param>
      <returns>The Rights the user has on the file, if the directory does not exist a 0 is returned</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="filePath" /> is null</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="filePath" /> is <c>String.Empty</c></exception>
      <exception cref="T:System.ArgumentNullException">When <paramref name="user" /> is null</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="user" /> is <c>String.Empty</c></exception>
      <exception cref="T:System.ArgumentNullException">When <paramref name="domainName" /> is null</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="domainName" /> is <c>String.Empty</c></exception>
    </member>
    <member name="M:Rock.Framework.IO.FileSystem.GetFileRights(System.IO.FileInfo,System.String,System.String)">
      <summary>
            Determine the Rights for the file for the specified user
            </summary>
      <param name="file">File to inquire rights for</param>
      <param name="user">User to inquire rights for</param>
      <param name="domainName">Domain the user belongs to</param>
      <returns>The Rights the user has on the file, if the directory does not exist a 0 is returned</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="file" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">When <paramref name="user" /> is null</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="user" /> is <c>String.Empty</c></exception>
      <exception cref="T:System.ArgumentNullException">When <paramref name="domainName" /> is null</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="domainName" /> is <c>String.Empty</c></exception>
    </member>
    <member name="M:Rock.Framework.IO.FileSystem.GetFileSystemRights(System.String)">
      <summary>
            Get Rights for the current user on an unknown file system type. This will work on Directories or Files
            </summary>
      <param name="fileSystemObject">Path to some File System resource</param>
      <returns>The Rights the user has on the file, if the directory does not exist a 0 is returned</returns>
      <exception cref="T:System.ArgumentException">When <paramref name="fileSystemObject" /> is <c>String.Empty</c></exception>
            /// <exception cref="T:System.ArgumentNullException">When <paramref name="fileSystemObject" /> is null </exception></member>
    <member name="M:Rock.Framework.IO.FileSystem.GetFileSystemRights(System.String,System.String,System.String)">
      <summary>
            Get Rights for the specified user on an unknown file system type. This will work on Directories or Files
            </summary>
      <param name="fileSystemObject">Path to some File System resource</param>
      <param name="user">User to inquire rights for</param>
      <param name="domain">Domain the user belongs to</param>
      <returns>The Rights the user has on the file, if the directory does not exist a 0 is returned</returns>
    </member>
    <member name="M:Rock.Framework.IO.FileSystem.GetUserFileSystemRights(System.Security.AccessControl.FileSystemSecurity,System.String,System.String)">
      <summary>
            Get the rights from a FilSystemSecurity object for a given user
            </summary>
      <param name="security">From either a FileInfo, or DirectoryInfo this is the FileSystemSecurity associated with it</param>
      <param name="user">User to look for permissions</param>
      <param name="domain">Domain the user belongs to</param>
      <returns>The rights for the given user</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="user" /> is null</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="user" /> is <c>String.Empty</c></exception>
      <exception cref="T:System.ArgumentNullException">When <paramref name="domain" /> is null</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="domain" /> is <c>String.Empty</c></exception>
    </member>
    <member name="T:Rock.Framework.IO.IsolatedStorageWrapper">
      <summary>
            Writes data to isolated storage.
            </summary>
    </member>
    <member name="M:Rock.Framework.IO.IsolatedStorageWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.IO.IsolatedStorageWrapper.Write(System.String,System.Object)">
      <summary>
            Writes object to the specified relative path in binary format.
            </summary>
      <param name="relativePath">The relative file path which can be a file name or contain directories.  Example: "test\\foo\\bar\\file.txt" or "file.txt"</param>
      <param name="value">The obj.</param>
    </member>
    <member name="M:Rock.Framework.IO.IsolatedStorageWrapper.DeleteFiles">
      <summary>
            Deletes all of the files in the root of isolated storage. Does not delete directories or files in those directories.
            </summary>
    </member>
    <member name="M:Rock.Framework.IO.IsolatedStorageWrapper.DeleteAllFilesAndDirectories">
      <summary>
            Deletes all files and directories from isolated storage.
            </summary>
    </member>
    <member name="M:Rock.Framework.IO.IsolatedStorageWrapper.Get``1(System.String)">
      <summary>
            Gets the file.
            </summary>
      <typeparam name="T">type of object to persist</typeparam>
      <param name="relativePath">The relative file path which can be a file name or contain directories.  Example: "test\\foo\\bar\\file.txt" or "file.txt"</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.IO.IsolatedStorageWrapper.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:Rock.Framework.IO.IsolatedStorageWrapper.Storage">
      <summary>
            Gets or sets the isolated storage file. Can be used to delete files, directories, etc from isolated storage.
            </summary>
      <value>The storage.</value>
    </member>
    <member name="T:Rock.Framework.IO.TempStorage">
      <summary>
            Supports the operations to write to a temporary file location when IsolatedStorage isn't an option.
            </summary>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.Write(System.String,System.Object)">
      <summary>
            Serializes the object to binary format and then writes the file to the relative path specified.
            </summary>
      <example>
        <code>
            using (TempStorage w = new TempStorage())
            {
                // writes file to base temp directory for application
                TempStorage.Write("test.txt"); 
                // writes file to a nested directory of a\b\c\d\ in the application store
                // creates the structure if it doesn't exist
                TempStorage.Write("a\\b\\c\\d\\test.txt"); //
            }
            </code>
      </example>
      <param name="fileRelativePath">The file relative path.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.RemoveLeadingSlash(System.String)">
      <summary>
            Even though this says "relativePath" developers seem to not understand that 
            relative paths should not start with a slash. 
            </summary>
      <param name="fileRelativePath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.Delete(System.String)">
      <summary>
            Deletes the specified file based on relative path.
            </summary>
      <example>
        <code>
            using (TempStorage w = new TempStorage())
            {
                // deletes file from base temp directory for application
                TempStorage.Delete("test.txt"); 
                // deletes file from nested directory of a\b\c\d\ in the application store
                TempStorage.Delete("a\\b\\c\\d\\test.txt"); //
            }
            </code>
      </example>
      <param name="fileRelativePath">The reltive path to the file.</param>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.Delete(System.String,System.String)">
      <summary>
            Deletes all files from the specified relative path that match the search pattern.
            </summary>
      <example>
        <code>
            TempStorage.Delete("a\\b\\c\\", "*.txt");
            </code>
      </example>
      <param name="relativePath">The relative path.</param>
      <param name="searchPattern">The search pattern.</param>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.Get``1(System.String)">
      <summary>
            Deserializes the file based on the type and then returns that deserialized object.
            </summary>
      <example>
        <code><![CDATA[
               var userPrefs = TempStorage.GetFile<UserPrefs>("\\a\\b\\username.txt");
            ]]></code>
      </example>
      <typeparam name="T">type of object that was persisted</typeparam>
      <param name="fileRelativePath">Name and relative path of the file.</param>
      <returns>deserialized object</returns>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.CreateDirectory(System.String)">
      <summary>
            Creates the directory based on the relative path specified.  If the full directory structure 
            doesn't exist it will be created.
            </summary>
      <example>
        <code>
                TempStorage.CreateDirectory("some\\nested\\directory");
            </code>
      </example>
      <param name="relativePath">The relative path.</param>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.DeleteDirectory(System.String)">
      <summary>
            Deletes the directory and everything in it recursively.
            </summary>
      <example>
        <code>
                TempStorage.DeleteDirectory("\\a\\b\\cc");
            </code>
      </example>
      <param name="relativePath">The relative path.</param>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.CleanUp">
      <summary>
            Deletes all files and folders recursively.
            </summary>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.CleanUp(System.String)">
      <summary>
            Deletes all files and folders based on the relative directory path.
            </summary>
      <example>
        <code>
                TempStorage.CleanUp("\\a\\b\\c"); // deletes all files and folders in the c directory
            </code>
      </example>
      <param name="relativeDirectoryPath">The relative directory path.</param>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.GetFileNames">
      <summary>
            Gets the file names in the root of temp storage.
            </summary>
      <example>
        <code>
               // returns file names from the base application temp storage
               var files = TempStorage.GetFileNames();
            </code>
      </example>
      <returns>all file names in root of temp storage</returns>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.GetFileNames(System.String)">
      <summary>
            Gets the files names based on relative path specified.
            </summary>
      <example>
        <code>
               var files = TempStorage.GetFileNames("a\\b\\c");
            </code>
      </example>
      <param name="relativePath">The relative path.</param>
      <returns>all file names in specified path</returns>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.GetFileNames(System.String,System.String)">
      <summary>
            Gets the file names based on relative path specified and search pattern.
            </summary>
      <example>
        <code>
               // returns files from the base application temp storage 
               // that start with 'fi' and end in .txt
               var files = TempStorage.GetFileNames(String.Empty, "fi*.txt"); 
            </code>
      </example>
      <param name="relativePath">The relative path.</param>
      <param name="searchPattern">The search pattern.</param>
      <returns>all file names in relative path based on search pattern</returns>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.GetFiles(System.String,System.String)">
      <summary>
            Gets the files based on relative path and search pattern specified.
            </summary>
      <example>
        <code>
            // get all of the .txt files in a directory and delete them
            var files = TempStorage.GetFiles("a\\b\\c", "*.txt");
            files.ForEach(x =&gt; TempStorage.Delete(x));
            </code>
      </example>
      <param name="relativePath">The relative path.</param>
      <param name="searchPattern">The search pattern.</param>
      <returns>array of just the file names</returns>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.GetFiles(System.String)">
      <summary>
            Gets the files returned with relative path based on specified path.
            </summary>
      <example>
        <code>
            var files = TempStorage.GetFiles("a\\b\\c");
            </code>
      </example>
      <param name="relativePath">The relative path.</param>
      <returns>array of the files with relative path</returns>
    </member>
    <member name="M:Rock.Framework.IO.TempStorage.GetFiles">
      <summary>
            Gets the files from the root of temp storage.
            </summary>
      <example>
        <code>
            // get and delete all files in temp storage root
            var files = TempStorage.GetFiles();
            files.ForEach(x =&gt; TempStorage.Delete(x));
            </code>
      </example>
      <returns>array of files in temp storage root folder</returns>
    </member>
    <member name="P:Rock.Framework.IO.TempStorage.BaseLocation">
      <summary>
            Gets the base location of where temp storage is located.
            </summary>
      <value>The base location.</value>
    </member>
    <member name="P:Rock.Framework.IO.TempStorage.AppLocation">
      <summary>
            Gets the current application's temporary storage location.
            </summary>
    </member>
    <member name="T:Rock.Framework.Logging.AuditProviderType">
      <summary>
            Audit provider type indicates the provider to use for logging audit messages.
            The available options are NetMsmq, WebService.
            </summary>
    </member>
    <member name="F:Rock.Framework.Logging.AuditProviderType.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Rock.Framework.Logging.AuditProviderType.NetMsmq">
      <summary>
            NetMsmq
            </summary>
    </member>
    <member name="F:Rock.Framework.Logging.AuditProviderType.WebService">
      <summary>
            WebService
            </summary>
    </member>
    <member name="F:Rock.Framework.Logging.AuditProviderType.Sonic">
      <summary>
             Sonic
            </summary>
    </member>
    <member name="F:Rock.Framework.Logging.AuditProviderType.SonicForClientApps">
      <summary>
            This audit provider should be used when the application is an application running on the client (console, windows, wpf). 
            </summary>
    </member>
    <member name="T:Rock.Framework.Logging.CachedLogEntry">
      <summary>
            A cached log entry.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.CachedLogEntry.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.CachedLogEntry" /> class.
            </summary>
    </member>
    <member name="P:Rock.Framework.Logging.CachedLogEntry.LogEntry">
      <summary>
            Gets or sets the log entry.
            </summary>
      <value>The log entry.</value>
    </member>
    <member name="P:Rock.Framework.Logging.CachedLogEntry.LogProviderType">
      <summary>
            Gets or sets the type of the log provider.
            </summary>
      <value>The type of the log provider.</value>
    </member>
    <member name="T:Rock.Framework.Logging.Configuration.Category">
      <summary>
        <see cref="T:Rock.Framework.Logging.Logger" /> supports the concept of multiple categories. This allows developers to 
            create multiple categories for logging scenarios.  A category is made up of one or more log providers 
            and the properties those log providers need in order to be initialized.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.Category.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.Configuration.Category" /> class.
            </summary>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.Category.Name">
      <summary>
            Gets or sets the name of the category.
            </summary>
      <remarks>At least one category is required.</remarks>
      <value>The name.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.Category.Providers">
      <summary>
            Gets or sets the collection of log providers specified.
            </summary>
      <value>The providers.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.Category.ThrottlingRule">
      <summary>
            Gets or sets the throttling rule.
            </summary>
      <value>The throttling rule.</value>
    </member>
    <member name="T:Rock.Framework.Logging.Configuration.CategoryCollection">
      <summary>
            Collection of <see cref="T:Rock.Framework.Logging.Configuration.Category" /> objects.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.CategoryCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.Configuration.CategoryCollection" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.CategoryCollection.GetKeyForItem(Rock.Framework.Logging.Configuration.Category)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="T:Rock.Framework.Logging.Configuration.ConfigurableAttribute">
      <summary>
            Used on types that implement ILogProvider, specifies the properties that can be configured through configuration file
            (i.e. EmailLogProvider has FromEmail, Subject, ToEmail that can be set in configuration.
            On the other hand NetMsmqLogProvider has Clients, Binding, Endpoint properties that are set at runtime by the framework and are not required in configuration.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.ConfigurableAttribute.#ctor">
      <summary>
             Constructor
            </summary>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.ConfigurableAttribute.DefaultValue">
      <summary>
            Gets or sets the default value to use for this property.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="T:Rock.Framework.Logging.Configuration.IConfigProvider">
      <summary>
            Loads configuration from a specific provider.
            <para><see cref="T:Rock.Framework.Logging.Logger" /> can be configured to read it's configuration from  
            different sources.  The default configuration provider is <see cref="T:Rock.Framework.Logging.Configuration.FileConfigProvider" />.  It used 
            is to read configuration information from the web.config or app.config.
            </para></summary>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.IConfigProvider.GetConfiguration">
      <summary>
            Gets the configuration.
            </summary>
      <returns>Return a <see cref="T:Rock.Framework.Logging.Configuration.LoggerConfiguration" /></returns>
    </member>
    <member name="T:Rock.Framework.Logging.Configuration.LoggerConfiguration">
      <summary>
            Use this to configure Logger through an API.  All configuration providers map their settings for Logger 
            to this object.
            </summary>
      <remarks>
            Smart Client applications make a great candidate for configuring Logger through an API since 
            the client could change a logging level on the fly based on user input.  
            <example><code>
               LoggerConfiguration logConfig = new LoggerConfiguration();
               private void InitializeLoggerConfiguration()
               {
                   logConfig.ApplicationId = 1; 
                   logConfig.LoggingLevel = LogLevel.Debug;  
                   logConfig.IsLoggingEnabled = true;  
                   logConfig.Formatters.Add("email", String.Empty);  
                   Category cat = new Category { Name = "Default" }; 
                   Provider emailProv = new Provider { FormatterName = "email", ProviderType = typeof(Rock.Framework.Logging.Provider.EmailLogProvider) };
                   emailProv.Mappers.Add(new Mapper { Property = "ToEmail", Value = String.Empty });
                   emailProv.Mappers.Add(new Mapper { Property = "Subject", Value = "Testing From Html Convert" });
                   emailProv.Mappers.Add(new Mapper { Property = "FromEmail", Value = "htmlconverter@quickenloans.com" });
                   cat.Providers.Add(emailProv);
                   logConfig.Categories.Add(cat);
               }
            </code></example></remarks>
    </member>
    <member name="F:Rock.Framework.Logging.Configuration.LoggerConfiguration.DefaultTemplate">
      <summary>
            Gets the default template.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.LoggerConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.Configuration.LoggerConfiguration" /> class.
            </summary>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.LoggerConfiguration.IsLoggingEnabled">
      <summary>
            Gets or sets a value indicating whether this instance is logging enabled.
            </summary>
      <value>
        <c>true</c> if this instance is logging enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.LoggerConfiguration.AsyncProcessing">
      <summary>
            Gets or sets a value indicating whether this instance is logging asynchronously.
            NOTE: This setting will NOT affect the logging mode if the sync process is explicitly 
            set in code by calling one of the oveloads that accept a boolean for sync parameter.
            </summary>
      <value>
        <c>true</c> if this instance is logging asynchronously; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.LoggerConfiguration.AuditProviderType">
      <summary>
            Gets or sets the type of the audit provider. 
            If not specified it will look for the first provider from the selected category in the following order:
            NetMsmq, WebService. If none is found an exception will be thrown when attemping to log an audit.
            </summary>
      <value>The type of the audit provider.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.LoggerConfiguration.LoggingLevel">
      <summary>
            Gets or sets the logging level. <see cref="T:Rock.Framework.Logging.LogLevel" /></summary>
      <value>The logging level.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.LoggerConfiguration.Categories">
      <summary>
            Gets the categories.  <see cref="T:Rock.Framework.Logging.Configuration.Category" /></summary>
      <value>The categories.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.LoggerConfiguration.Formatters">
      <summary>
            Gets or sets the name of the formatter and the template of the log formatter. 
            Formatters are specified and tied to the log provider.
            </summary>
      <value>The formatters.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.LoggerConfiguration.ThrottlingRules">
      <summary>
            Gets the throttling rules.
            </summary>
      <value>The throttling rules.</value>
    </member>
    <member name="T:Rock.Framework.Logging.Configuration.LoggerConfigurationFactory">
      <summary>
            Factory that creates the <see cref="T:Rock.Framework.Logging.Configuration.LoggerConfiguration" />.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.LoggerConfigurationFactory.GetConfiguration">
      <summary>
            Gets the configuration based on which configuration provider is used as configured in the app.config or web.config file.
            </summary>
      <returns>Returns a <see cref="T:Rock.Framework.Logging.Configuration.LoggerConfiguration" /></returns>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.LoggerConfigurationFactory.Reset">
      <summary>
            FOR UNIT TESTS - Resets the singletons. Used for unit tests.
            </summary>
    </member>
    <member name="T:Rock.Framework.Logging.Configuration.Mapper">
      <summary>
            Mapper is used to map the properties of a provider to the provider.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.Mapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.Configuration.Mapper" /> class.
            </summary>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.Mapper.Property">
      <summary>
            Gets or sets the property.  Note:  properties are case sensitive.
            </summary>
      <value>The property.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.Mapper.Value">
      <summary>
            Gets or sets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="T:Rock.Framework.Logging.Configuration.Provider">
      <summary>
            A provider is identified as an object that implements <see cref="T:Rock.Framework.Logging.Provider.ILogProvider" /> and optionally implements
            <see cref="T:Rock.Framework.Logging.Formatter.IFormatterTemplate" />.  Multiple providers can be configured per <see cref="T:Rock.Framework.Logging.Configuration.Category" />.  This 
            allows for logging scenarios where one would want to email and log a message to a file for example.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.Provider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.Configuration.Provider" /> class.
            </summary>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.Provider.ProviderType">
      <summary>
            Gets or sets the type of the provider.
            </summary>
      <value>The type of the provider.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.Provider.Mappers">
      <summary>
            Gets the mappers.  See <see cref="T:Rock.Framework.Logging.Configuration.Mapper" />.
            </summary>
      <value>The mappers.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.Provider.FormatterName">
      <summary>
            Gets or sets the name of the formatter to be used for this provider.  If 
            no formatter is specified the default template will be used.
            </summary>
      <value>The name of the formatter.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.Provider.LoggingLevel">
      <summary>
            Gets or sets the logging level for the provider.
            </summary>
      <value>The logging level.</value>
    </member>
    <member name="T:Rock.Framework.Logging.Configuration.ISqlConfigRepository">
      <summary>
            Allows CRUD operation for the sql configuration provider
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.ISqlConfigRepository.GetActiveConfiguration">
      <summary>
            Gets the active configuration.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.ISqlConfigRepository.CreateConfiguration(Rock.Framework.Logging.Configuration.LoggerConfiguration,System.String,System.Boolean)">
      <summary>
            Creates the configuration.
            </summary>
      <param name="configuration">The configuration.</param>
      <param name="configurationName">Name of the configuration.</param>
      <param name="isActive">if set to <c>true</c> [is active].</param>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.ISqlConfigRepository.UpdateConfiguration(Rock.Framework.Logging.Configuration.LoggerConfiguration,System.String,System.Boolean)">
      <summary>
            Updates the configuration.
            </summary>
      <param name="configuration">The configuration.</param>
      <param name="configurationName">Name of the configuration.</param>
      <param name="isActive">if set to <c>true</c> [is active].</param>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.ISqlConfigRepository.GetConfigurationById(System.Int32)">
      <summary>
            Gets the configuration by id.
            </summary>
      <param name="configurationId">The configuration id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.ISqlConfigRepository.DeleteConfiguration(System.Int32)">
      <summary>
            Deletes the configuration by Id.
            </summary>
      <param name="configurationId">The configuration id.</param>
    </member>
    <member name="M:Rock.Framework.Logging.Configuration.ISqlConfigRepository.DeleteConfiguration(System.String)">
      <summary>
            Deletes the configuration by name.
            </summary>
      <param name="configurationName">Name of the configuration.</param>
    </member>
    <member name="T:Rock.Framework.Logging.Configuration.ThrottlingRule">
      <summary>
            Logging throttling rule.  Used to throttle how often <see cref="T:Rock.Framework.Logging.Logger" /> logs the same message.
            </summary>
      <remarks>
        <para>
          <h1>Overview</h1>
            Throttling is used to stop <see cref="T:Rock.Framework.Logging.Logger" /> from sending out the same log message 
            over and over.  It isn't uncommon for systems to go down and when they do if the application is 
            configured to use the <see cref="T:Rock.Framework.Logging.Provider.EmailLogProvider" /> this can flood our 
            infrastructure including our Exchange servers and network.  To stop getting repeat messages from an application 
            throttling can be placed on a <see cref="T:Rock.Framework.Logging.Configuration.Category" />.  It is not required. 
            The format is "hh:mm:ss" and the default is 00:00:00.  The uniqueness of the log entry
            is determined by the combination of Message, ExceptionData, Level, IsUserDisrupted, Referrer, AffectedSystem,
            RequestMethod, CategoryId, Url.
            </para>
      </remarks>
      <example>
        <code><![CDATA[
            <throttlingRules>
              <throttlingRule name="Default" minInterval="00:05:00"/>
              <throttlingRule name="Critical" minInterval="00:01:00"/>
            </throttlingRules>
            <categories>
            <category name="File" throttlingRule="Default">
            	<providers>
            		<provider type="Rock.Framework.Logging.Provider.FileLogProvider, Rock.Framework" formatter="default" >
            			<propertyMapper>
            				<mapper property="File" value="Log.txt" />
            			</propertyMapper>
            		</provider>
            	</providers>
            </category>
            </categories>
            ]]></code>
      </example>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.ThrottlingRule.MinInterval">
      <summary>
            Gets or sets the minimum time interval between logging the same <see cref="T:Rock.Framework.Logging.LogEntry" />.
            </summary>
      <value>The min interval.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Configuration.ThrottlingRule.MinEventThreshold">
      <summary>
            Gets or sets the min event threshold before firing the same <see cref="T:Rock.Framework.Logging.LogEntry" />. 
            For example if this value is set to 3 then every third event will be logged.
            If both MinInterval and MinEventThreshold are set then a OR logical operation is performed to see if a log entry will be logged.
            If the log entry passes at least one of the rule then it will be logged.
            Setting this value to 0 or 1 has no effect on throttling. If set to -1 and MinInterval is set to a non-zero value then
            the first message in a series will be skipped.
            </summary>
      <value>The min event threshold.</value>
    </member>
    <member name="T:Rock.Framework.Logging.ILogEntry">
      <summary>
            This interface defines the contract for log messages.
            </summary>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.Message">
      <summary>
            Gets or sets the message.
            </summary>
      <value>The message.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.UserDisplayName">
      <summary>
            Gets or sets the user.
            </summary>
      <value>The user.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.ApplicationId">
      <summary>
            Gets or sets the application id.
            </summary>
      <value>The application id.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.UserCommonId">
      <summary>
            Gets or sets the user common id.
            </summary>
      <value>The user common id.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.CreateTime">
      <summary>
            Gets the time stamp.
            </summary>
      <value>The time stamp.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.MachineName">
      <summary>
            Gets or sets the name of the machine.
            </summary>
      <value>The name of the machine.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.UserName">
      <summary>
            Gets or sets the name of the user.
            </summary>
      <value>The name of the user.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.UserIPAddress">
      <summary>
            Gets or sets the user IP address.
            </summary>
      <value>The user IP address.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.IsUserDisrupted">
      <summary>
            Gets or sets a value indicating whether [user disrupted].
            </summary>
      <value>
        <c>true</c> if [user disrupted]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.UserAgentBrowser">
      <summary>
            Gets or sets the user agent browser.
            </summary>
      <value>The user agent browser.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.Url">
      <summary>
            Gets or sets the url.
            </summary>
      <value>The referrer.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.Referrer">
      <summary>
            Gets or sets the referrer.
            </summary>
      <value>The referrer.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.MachineIPAddress">
      <summary>
            Gets or sets the machine IP address.
            </summary>
      <value>The machine IP address.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.RequestMethod">
      <summary>
            Gets or sets the request method.
            </summary>
      <value>The request method.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.AffectedSystem">
      <summary>
            Gets or sets the affected system.
            </summary>
      <value>The affected system.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.Level">
      <summary>
            Gets or sets the level.
            </summary>
      <value>The level.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.UserScreenName">
      <summary>
            Gets or sets the name of the user screen.
            </summary>
      <value>The name of the user screen.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.ExceptionData">
      <summary>
            Gets or sets the exception.
            </summary>
      <value>The exception.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.ExtendedProperties">
      <summary>
            Gets or sets the extended properties.
            </summary>
      <value>The extended properties.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogEntry.CategoryId">
      <summary>
            Gets or sets the category id.
            </summary>
      <value>The log entry category.</value>
    </member>
    <member name="T:Rock.Framework.Logging.ILogger">
      <summary>
            This interface defines the contract of the core logging system called <see cref="T:Rock.Framework.Logging.Logger" />.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Debug(System.String)">
      <summary>
            Debugs the specified message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Debug(System.String,System.Boolean)">
      <summary>
            Debugs the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Debug(System.String,System.Exception)">
      <summary>
            Debugs the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Debug(System.String,System.Exception,System.Boolean)">
      <summary>
            Debugs the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Debug(System.String,System.Object)">
      <summary>
            Debugs the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. ( new {key1="value1", key2="value2" )</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Debug(System.String,System.Object,System.Boolean)">
      <summary>
            Debugs the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. ( new {key1="value1", key2="value2" )</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Debug(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Debugs the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Debug(Rock.Framework.Logging.ILogEntry,System.Boolean)">
      <summary>
            Debugs the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Info(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Infoes the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Info(Rock.Framework.Logging.ILogEntry,System.Boolean)">
      <summary>
            Infoes the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Info(System.String,System.Exception)">
      <summary>
            Infoes the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Info(System.String,System.Exception,System.Boolean)">
      <summary>
            Infoes the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Info(System.String,System.Object)">
      <summary>
            Infoes the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. ( new {key1="value1", key2="value2" )</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Info(System.String,System.Object,System.Boolean)">
      <summary>
            Infoes the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. ( new {key1="value1", key2="value2" )</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Info(System.String)">
      <summary>
            Infoes the specified message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Info(System.String,System.Boolean)">
      <summary>
            Infoes the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Warn(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Warns the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Warn(Rock.Framework.Logging.ILogEntry,System.Boolean)">
      <summary>
            Warns the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Warn(System.String,System.Exception)">
      <summary>
            Warns the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Warn(System.String,System.Exception,System.Boolean)">
      <summary>
            Warns the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Warn(System.String,System.Object)">
      <summary>
            Warns the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. ( new {key1="value1", key2="value2" )</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Warn(System.String,System.Object,System.Boolean)">
      <summary>
            Warns the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. ( new {key1="value1", key2="value2" )</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Warn(System.String)">
      <summary>
            Warns the specified message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Warn(System.String,System.Boolean)">
      <summary>
            Warns the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Error(System.String)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Error(System.String,System.Boolean)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Error(System.String,System.Exception)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Error(System.String,System.Exception,System.Boolean)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Error(System.String,System.Object)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. ( new {key1="value1", key2="value2" )</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Error(System.String,System.Object,System.Boolean)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. ( new {key1="value1", key2="value2" )</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Error(System.String,System.Object,System.Exception)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. ( new {key1="value1", key2="value2" )</param>
      <param name="ex">The exception.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Error(System.String,System.Object,System.Exception,System.Boolean)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. ( new {key1="value1", key2="value2" )</param>
      <param name="ex">The exception.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Error(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Errors the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Error(Rock.Framework.Logging.ILogEntry,System.Boolean)">
      <summary>
            Errors the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Fatal(System.String)">
      <summary>
            Fatals the specified message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Fatal(System.String,System.Boolean)">
      <summary>
            Fatals the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Fatal(System.String,System.Exception)">
      <summary>
            Fatals the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Fatal(System.String,System.Exception,System.Boolean)">
      <summary>
            Fatals the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Fatal(System.String,System.Object)">
      <summary>
            Fatals the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. ( new {key1="value1", key2="value2" )</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Fatal(System.String,System.Object,System.Boolean)">
      <summary>
            Fatals the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. ( new {key1="value1", key2="value2" )</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Fatal(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Fatals the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Fatal(Rock.Framework.Logging.ILogEntry,System.Boolean)">
      <summary>
            Fatals the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Audit(System.String)">
      <summary>
            Audits the specified message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Audit(System.String,System.Boolean)">
      <summary>
            Audits the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Audit(System.String,System.Object)">
      <summary>
            Audits the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. ( new {key1="value1", key2="value2" )</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Audit(System.String,System.Object,System.Boolean)">
      <summary>
            Audits the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. ( new {key1="value1", key2="value2" )</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Audit(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Audits the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ILogger.Audit(Rock.Framework.Logging.ILogEntry,System.Boolean)">
      <summary>
            Audits the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="P:Rock.Framework.Logging.ILogger.ThrottlingRuleEvaluator">
      <summary>
            Gets or sets the throttling rule evaluator.
            </summary>
      <value>The throttling rule evaluator.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogger.Providers">
      <summary>
            Gets the providers.
            </summary>
      <value>The providers.</value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogger.AuditProvider">
      <summary>
            Gets or sets the audit provider
            </summary>
    </member>
    <member name="P:Rock.Framework.Logging.ILogger.IsDebugEnabled">
      <summary>
            Gets a value indicating whether this instance is debug enabled.
            </summary>
      <value>
        <c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogger.IsInfoEnabled">
      <summary>
            Gets a value indicating whether this instance is info enabled.
            </summary>
      <value>
        <c>true</c> if this instance is info enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogger.IsWarnEnabled">
      <summary>
            Gets a value indicating whether this instance is warn enabled.
            </summary>
      <value>
        <c>true</c> if this instance is warn enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogger.IsErrorEnabled">
      <summary>
            Gets a value indicating whether this instance is error enabled.
            </summary>
      <value>
        <c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogger.IsFatalEnabled">
      <summary>
            Gets a value indicating whether this instance is fatal enabled.
            </summary>
      <value>
        <c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Logging.ILogger.Category">
      <summary>
            Gets or sets the name of the category.
            </summary>
      <value>The name of the category.</value>
    </member>
    <member name="E:Rock.Framework.Logging.ILogger.PreDebug">
      <summary>
            Occurs when [pre debug].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.ILogger.PreInfo">
      <summary>
            Occurs when [pre info].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.ILogger.PreWarn">
      <summary>
            Occurs when [pre warn].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.ILogger.PreError">
      <summary>
            Occurs when [pre error].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.ILogger.PreFatal">
      <summary>
            Occurs when [pre fatal].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.ILogger.PreAudit">
      <summary>
            Occurs when [pre fatal].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.ILogger.DebugComplete">
      <summary>
            Occurs when [debug complete].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.ILogger.InfoComplete">
      <summary>
            Occurs when [info complete].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.ILogger.WarnComplete">
      <summary>
            Occurs when [warn complete].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.ILogger.ErrorComplete">
      <summary>
            Occurs when [error complete].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.ILogger.FatalComplete">
      <summary>
            Occurs when [fatal complete].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.ILogger.AuditComplete">
      <summary>
            Occurs when [fatal complete].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.ILogger.PreLog">
      <summary>
            Occurs when [write starting].
            </summary>
    </member>
    <member name="T:Rock.Framework.Logging.LogConfigurationException">
      <summary>
            Is thrown if there are configuration errors within the app.config, web.config or misconfigured via the LoggerConfiguration API.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.LogConfigurationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.LogConfigurationException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LogConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the LogConfigurationException class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:Rock.Framework.Logging.LogConfigurationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the LogConfigurationException class.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The exception.</param>
    </member>
    <member name="T:Rock.Framework.Logging.LoggerException">
      <summary>
            Thrown if there are errors in processing a log message.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.LogConfigurationException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the LogConfigurationException class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the LogConfigurationException class.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The exception.</param>
    </member>
    <member name="T:Rock.Framework.Logging.Formatter.IFormatterTemplate">
      <summary>
            Any logging provider that wants to use 
            the <see cref="T:Rock.Framework.Logging.Formatter.LogFormatter" /> to format messages should implement this Interface.
            </summary>
    </member>
    <member name="P:Rock.Framework.Logging.Formatter.IFormatterTemplate.Template">
      <summary>
            Gets or sets the template to be used for logging messages. See <see cref="T:Rock.Framework.Logging.Formatter.LogFormatter" /> for more information.
            </summary>
      <value>The template.</value>
    </member>
    <member name="T:Rock.Framework.Logging.Formatter.ILogFormatter">
      <summary>
            Interface used to convert log messages from an object to a template.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Formatter.ILogFormatter.Format(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Formats the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <returns>Return the template formatted to the message.</returns>
    </member>
    <member name="T:Rock.Framework.Logging.Formatter.LogFormatter">
      <summary>
		Takes a <see cref="T:Rock.Framework.Logging.LogEntry" /> and applies a formatter to the object based on the specified
		template.
	</summary>
      <remarks>
		A template is based on a set of tokens surrounded with {}.  Logger supports multiple formatters.  Formatters can be specified in the app.config or web.config 
		file or via the API.
		<para>
			HTML formatting of templates is supported but the HTML must be encoded.
		</para><para>
			The following is an example of configuring multiple formatters for the logger.  One named default and 
			another named email.  Each provider allows a developer to specify which template formatter will be used.
		</para><example><code><![CDATA[ 
			<rock.framework applicationId="1">
        <logger>
				  <loggerConfigProvider>
					  <provider type="Rock.Framework.Logging.Configuration.FileConfigProvider, Rock.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848">
					  </provider>
				  </loggerConfigProvider>
				  <loggerSettings loggingLevel="Debug" isLoggingEnabled="true">
					  <formatters>
						  <formatter name="default" template="-{message}-\r\n{exception}-\r\n{category} " />
						  <formatter name="email" template="Message: {message}-\r\nException:\r\n{exception}-\r\n{category} " />
					  </formatters>
					  <categories>
						  <category name="File">
							  <providers>
								  <provider type="Rock.Framework.Logging.Provider.FileLogProvider, Rock.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848" formatter="default" >
									  <propertyMapper>
										  <mapper property="File" value="Log.txt" />
									  </propertyMapper>
								  </provider>
							  </providers>
						  </category>
					  </categories>
				  </loggerSettings>
        <logger>  
			</rock.framework>			
	]]></code></example><para>
			The following is a list of tokens that can be used for formatting messages.
			<list type="bullet"><item>{affectedSystem}</item><item>{applicationId}</item><item>{category}</item><item>{createTime} or {createTime(format)} where format can represent a DataTime format string.</item><item>{exception}</item><item>{extendedProperties({key} {value})} (where "key" can be replaced with a extended property name in which case only that key will be displayed).
					Adding ? after the key like in this example {extendedProperties({key}?{value})} will hide the key from displaying.
				</item><item>{userDisrupted}</item><item>{level}</item><item>{machineIPAddress}</item><item>{machineName}</item><item>{message}</item><item>{referrer}</item><item>{requestMethod}</item><item>{url}</item><item>{userAgentBrowser}</item><item>{userCommonId}</item><item>{userDisplayName}</item><item>{userIPAddress}</item><item>{userName}</item><item>{user}</item><item>{userScreenName}</item><item>{newLine}</item><item>{environment} (requires the <see cref="T:Rock.Framework.Environment" /> to be set in configuration file)</item><item>{className} The class where the log was issues</item><item>{fileName} The file where the log was issues</item><item>{lineNumber} The line number where the log was issues</item><item>{methodName} The method name where the log was issues</item><item>{fullInfo}</item><item>{threadName} The thread name that generated the log</item><item>{threadId} The thread Id that generated the log</item><item>{guid} The LogEntryClientId extended property that is a GUID generated by the framework.</item></list></para><para>
			NOTES:  You can use the {newLine} token with certain providers like 
			FileLogProvider and ConsoleLogProvider. If you want to create new lines in a template 
			that will be sent in email, you should use HTML to format the message.  HTML characters 
			must be escaped.  Example:  &lt;br/&gt;  would create a br tag in your file.
		</para><para>
			Extended Properties Token Notes: You can embed things in or around the {key} and {value}. 
			Thus if you wanted to have those values print out in a table within an email you can embed escaped 
			tr and td tags around those to create a row.
		</para><para>Tokens can also be used in the Subject tag of the EmailLogProvider property.</para></remarks>
    </member>
    <member name="M:Rock.Framework.Logging.Formatter.LogFormatter.Format(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Formats the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <returns>Return the template formatted to the message.</returns>
    </member>
    <member name="P:Rock.Framework.Logging.Formatter.LogFormatter.Template">
      <summary>
            Gets or sets the template.
            </summary>
      <value>The template.</value>
    </member>
    <member name="T:Rock.Framework.Logging.IThrottlingRuleEvaluator">
      <summary>
            Evaluates wheter a log entry can be logged or not
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.IThrottlingRuleEvaluator.CanLog(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Determines whether this instance can log the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <returns>
        <c>true</c> if this instance can log the specified log entry; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Rock.Framework.Logging.IThrottlingRuleEvaluator.Rule">
      <summary>
            Gets or sets the throttling rule.
            </summary>
      <value>The rule.</value>
    </member>
    <member name="T:Rock.Framework.Logging.LogCallLocationInfo">
      <summary>
            The internal representation of caller location information.
            </summary>
      <remarks>
        <para>
            This class uses the <c>System.Diagnostics.StackTrace</c> class to generate
            a call stack. The caller's information is then extracted from this stack.
            </para>
        <para>
            The <c>System.Diagnostics.StackTrace</c> class has this to say about Release builds:
            </para>
        <para>
            "StackTrace information will be most informative with Debug build configurations. 
            By default, Debug builds include debug symbols, while Release builds do not. The 
            debug symbols contain most of the file, method name, line number, and column 
            information used in constructing StackFrame and StackTrace objects. StackTrace 
            might not report as many method calls as expected, due to code transformations 
            that occur during optimization."
            </para>
        <para>
            This means that in a Release build the caller information may be incomplete or may 
            not exist at all! Therefore caller location information cannot be relied upon in a Release build.
            </para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Logging.LogCallLocationInfo.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
            Initializes a new instance of the LocationInfo
            class based on the current thread.
            </remarks>
    </member>
    <member name="M:Rock.Framework.Logging.LogCallLocationInfo.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Constructor
            </summary>
      <param name="className">The fully qualified class name.</param>
      <param name="methodName">The method name.</param>
      <param name="fileName">The file name.</param>
      <param name="lineNumber">The line number of the method within the file.</param>
      <remarks>
            Initializes a new instance of the LocationInfo
            class with the specified data.
            </remarks>
    </member>
    <member name="P:Rock.Framework.Logging.LogCallLocationInfo.ClassName">
      <summary>
            Gets or sets the name of the class.
            </summary>
      <value>The name of the class.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogCallLocationInfo.FileName">
      <summary>
            Gets or sets the name of the file.
            </summary>
      <value>The name of the file.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogCallLocationInfo.LineNumber">
      <summary>
            Gets or sets the line number.
            </summary>
      <value>The line number.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogCallLocationInfo.MethodName">
      <summary>
            Gets or sets the name of the method.
            </summary>
      <value>The name of the method.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogCallLocationInfo.FullInfo">
      <summary>
            Gets or sets the full info.
            </summary>
      <value>The full info.</value>
    </member>
    <member name="T:Rock.Framework.Logging.LogEntry">
      <summary>
            Log message. Holds any and all information about the log entry.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntry.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.LogEntry" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntry.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.LogEntry" /> class.
            </summary>
      <param name="msg">The MSG.</param>
      <example>
        <code>
            LogEntry entry = new LogEntry("Some message");
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntry.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the LogEntry class.
            </summary>
      <param name="message">The message.</param>
      <param name="exception">The exception.</param>
      <example>
        <code>
            ILogger logger = LoggerFactory.GetInstance();
            public void ProcessLoan(int loanNumber)
            {
               try 
               {
                  DoSomething(loanNumber);
               }
               catch (Exception ex)
               {
                 if (logger.IsErrorEnabled)
                 {
                   LogEntry entry = new LogEntry(ex.Message, ex);
                   entry.ExtendedProperties.Add("LoanNumber", loanNumber);
                   logger.Error(entry);
                 }
               }
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntry.#ctor(System.String,Rock.Framework.Logging.LogEntryExtendedProperties,System.Exception)">
      <summary>
            Initializes a new instance of the LogEntry class.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties.</param>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntry.#ctor(System.String,Rock.Framework.Logging.LogEntryExtendedProperties)">
      <summary>
            Initializes a new instance of the LogEntry class.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntry.#ctor(System.String,System.Object,System.Exception)">
      <summary>
            Initializes a new instance of the LogEntry class.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type.</param>
      <param name="exception">The exception.</param>
      <example>
        <code>
            LogEntry entry = new LogEntry(ex.Message, new {key1="value1", key2="value2"}, ex);
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntry.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the LogEntry class.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as an anonymous type.</param>
      <example>
        <code>
            LogEntry entry = new LogEntry("test", new {key1="value1", key2="value2"});
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntry.GetHashCode">
      <summary><![CDATA[
            Return the hash of combined Message, ExceptionData, 
            Level, IsUserDisrupted, Referrer, AffectedSystem, 
            RequestMethod, CategoryId and URL. 
            The following strings are excluded: "BusinessObjects Value: <number>", "ErrorTrackingId = <number>".
            ]]></summary>
      <returns>
            A hash code for the current LogEntry.
            </returns>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntry.ExceptionToExtendedProperties(System.Exception)">
      <summary>
            Pulls the message and all the data from an exception into the extended properties.
            </summary>
      <param name="ex">The execption.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntry.SetException(System.Exception)">
      <summary>
            Adds an exception to an existing LogEntry class.
            </summary>
      <param name="exception">The exception.</param>
      <example>
        <code>
            ILogger logger = LoggerFactory.GetInstance();
            public void ProcessLoan(int loanNumber)
            {
               try 
               {
                  LogEntry entry = new LogEntry("Doing Something");
                  entry.ExtendedProperties.Add("LoanNumber", loanNumber);
                  DoSomething(loanNumber);
                  if(logger.IsInfoEnabled)
                  {
                    logger.Info(entry);
                  }         
               }
               catch (Exception ex)
               {
                 if (logger.IsErrorEnabled)
                 {
                   logger.SetException(ex);      
                   logger.Error(entry);
                 }
               }
            }
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.Message">
      <summary>
            The message that needs to be logged.
            </summary>
      <value>The message.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.UserDisplayName">
      <summary>
            Gets or sets the user.
            </summary>
      <value>The user.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.ApplicationId">
      <summary>
            Gets or sets the application id.
            </summary>
      <value>The application id.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.UserCommonId">
      <summary>
            Gets or sets the user common id.
            </summary>
      <value>The user common id.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.CreateTime">
      <summary>
            Get's or sets the time when the message was created.  This is automatically set when a new LogEntry is initialized.
            </summary>
      <value>The time stamp.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.MachineName">
      <summary>
            Gets or sets the name of the machine name the message was created on.
            </summary>
      <value>The name of the machine.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.UserName">
      <summary>
            Gets or sets the name of the user.
            </summary>
      <example>Smith, Bill</example>
      <value>The name of the user.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.UserIPAddress">
      <summary>
            Gets or sets the IP address of the user that created the message.
            </summary>
      <value>The user IP address.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.IsUserDisrupted">
      <summary>
            Gets or sets a value indicating whether the user was disrupted because of an error.
            </summary>
      <value>
        <c>true</c> if [user disrupted]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.UserAgentBrowser">
      <summary>
            Gets or sets the user agent browser.
            </summary>
      <value>The user agent browser.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.Url">
      <summary>
            Gets or sets the Url.
            </summary>
      <value>The Url.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.Referrer">
      <summary>
            Gets or sets the referrer.
            </summary>
      <value>The referrer.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.MachineIPAddress">
      <summary>
            Gets or sets the machine IP address the message was generated from.
            </summary>
      <value>The machine IP address.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.RequestMethod">
      <summary>
            Gets or sets the request method the message or error was created in.
            </summary>
      <value>The request method.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.AffectedSystem">
      <summary>
            Gets or sets the affected system or systems.
            </summary>
      <value>The affected system.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.Level">
      <summary>
            Gets or sets the logging level.  This is used for filtering and searching.
            </summary>
      <value>The level.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.UserScreenName">
      <summary>
            Gets or sets the name of the user screen.
            </summary>
      <value>The name of the user screen.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.ExceptionData">
      <summary>
            Gets or sets the exception data.
            </summary>
      <value>The exception.</value>
      <remarks>
            Use the Exception extension method <see cref="M:Rock.Framework.Extensions.ExceptionExtensions.FormatToString(System.Exception)" /> to convert an exception to a string easily.
            </remarks>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.ExtendedProperties">
      <summary>
            Gets or sets the extended properties.  This property is used to add any additional 
            information into the log message that is not already accounted for within the object.  
            It is meant to be used to assist developers with debugging or fixing errors.
            </summary>
      <value>The extended properties.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntry.CategoryId">
      <summary>
            Gets or sets the category.  Primarily used with <see cref="T:Rock.Framework.Logging.Provider.EventLogProvider" /> to trigger monitoring workflow scenarios with SCOM.
            </summary>
      <remarks>Categories serve multiple purposes for log messages.  
            They allow developers to break down log messages to trigger monitoring alerts  
            as well as assist in reporting.  A category is simply a number that has a  
            particular meaning to an application.  It is suggested developers build an  
            enumeration of categories so a category can easily be set.  
            For example, a developer may choose to have a category list like the following.
            <list type="bullet"><item>1 = Database</item><item>2 = Session</item><item>3 = Credit Service</item><item>4 = Cache</item><item>5 = Security</item></list><para>
            Note: When using the <see cref="T:Rock.Framework.Logging.Provider.EventLogProvider"></see> the category is used to populate  
            the EventId.  This can be used with System Center Operations Manager to trigger  
            monitoring alerts in an application.  For example using the above list, if a  
            SqlException was logged, the log entry written to the EventLog would be of type Error  
            and the event Id would be 1 which would mean it was a database error.  
            SCOM could then trigger an alert or escalation to notify the oncall engineers of a problem.
            </para></remarks>
      <example>
        <code>
                public enum LogCategories
                {
                   Database,
                   Session,
                   CreditService,
                   Security,
                   Cache
                }
            
                LogEntry logEntry = new LogEntry("testing Event Log Provider");
                logEntry.CategoryId = (short)LogCategories.CreditService;
                l.Debug(logEntry);
            </code>
      </example>
      <value>The log entry category.</value>
    </member>
    <member name="T:Rock.Framework.Logging.LogEntryEventArgs">
      <summary>
            Allows access to the <see cref="T:Rock.Framework.Logging.ILogEntry" /> for pre/post events for each logging level.
            </summary>
    </member>
    <member name="P:Rock.Framework.Logging.LogEntryEventArgs.LogEntry">
      <summary>
            Gets or sets the <see cref="P:Rock.Framework.Logging.LogEntryEventArgs.LogEntry" />.
            </summary>
      <value>The log entry.</value>
    </member>
    <member name="T:Rock.Framework.Logging.LogEntryExtendedProperties">
      <summary>
            Simple hashtable wrapper for extended properties.
            </summary>
      <remarks>Created to assist in WCF XML serialization.</remarks>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntryExtendedProperties.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.LogEntryExtendedProperties" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntryExtendedProperties.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.LogEntryExtendedProperties" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntryExtendedProperties.AddSafely(System.String,System.String)">
      <summary>
            Checks if the key already exists it will not add the value and no exception will be thrown.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntryExtendedProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" /> instance.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" /> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.
            </exception>
    </member>
    <member name="M:Rock.Framework.Logging.LogEntryExtendedProperties.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.LogEntryExtendedProperties" /> class.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
    </member>
    <member name="T:Rock.Framework.Logging.LogEntryType">
      <summary>
            Enumeration that specifies the type a log entry this is.  For messages that get 
            persisted to a central storage, this is used 
            to make filtering and finding messages later on easier.  
            </summary>
    </member>
    <member name="F:Rock.Framework.Logging.LogEntryType.None">
      <summary>
            Not set
            </summary>
    </member>
    <member name="F:Rock.Framework.Logging.LogEntryType.ApplicationLog">
      <summary>
            Generic or specific application message. 
            </summary>
    </member>
    <member name="F:Rock.Framework.Logging.LogEntryType.AuditLog">
      <summary>
            Audit Message.
            </summary>
    </member>
    <member name="T:Rock.Framework.Logging.LoggerBase">
      <summary>
            Base <see cref="T:Rock.Framework.Logging.Logger" /> class.  Developers can use this class to implement their own
            custom implementations.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.AddContextData(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Adds additional context data to a <see cref="T:Rock.Framework.Logging.LogEntry" /> before it is written out to the 
            provider. See remarks for which values are set.  
            </summary>
      <remarks>
        <para>
            By default this adds the following if <see cref="P:System.Web.HttpContext.Current" /> is available and the values are not already set.  
            <list type="bullet"><item>UserIpAddress</item><item>UserName</item><item>Url</item><item>UserAgentBrowser</item><item>RequestMethod</item></list></para>
        <para>
            If the context of the application is running outside of a web environment (Winforms, Console, Windows Service) then the following 
            values are set if they are not already set.
            <list type="bullet"><item>UserIpAddress - set to the IP of the machine</item><item>UserName - set to the username the process is running as</item></list></para>
      </remarks>
      <param name="entry">The entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.OnPreLog(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Called before the <see cref="T:Rock.Framework.Logging.LogEntry" /> is written out. This method is called 
            asynchronously by default.  If you need to process prelog information synchronously (web for example) use OnPreLogSync.
            
            </summary>
      <param name="entry">The entry.</param>
      <remarks>
            Note: This event is running on a separate thread when called.  It is not suitable for web applications if 
            you are trying to access <see cref="P:System.Web.HttpContext.Current" />. If you are running within a web context 
            then override OnPreLogSync instead of this one.
            </remarks>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.OnPreLogSync(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Called synchronously before the <see cref="T:Rock.Framework.Logging.LogEntry" /> is written out. 
            </summary>
      <param name="entry">The entry.</param>
      <remarks>
            Note: This event is running on the same thread when called.  It is suitable for web applications if 
            you are trying to access <see cref="P:System.Web.HttpContext.Current" />. If you are not running within a web context 
            then override OnPreLog instead of this one as it will run faster.
            </remarks>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.OnPreDebug(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Called when [pre debug].
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.OnPreInfo(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Called when [pre info].
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.OnPreWarn(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Called when [pre warn].
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.OnPreError(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Called when [pre error].
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.OnPreFatal(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Called when [pre fatal].
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.OnPreAudit(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Called when [pre Audit].
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.OnDebugComplete(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Called when [debug complete].
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.OnInfoComplete(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Called when [info complete].
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.OnWarnComplete(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Called when [warn complete].
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.OnErrorComplete(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Called when [error complete].
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.OnFatalComplete(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Called when [fatal complete].
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.OnAuditComplete(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Called when [Audit complete].
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.#ctor">
      <summary>
            Initializes a new instance of the LoggerBase class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.CacheRetry">
      <summary>
            Process log entries in the temp storage cache.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Log(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Logs the specified <see cref="T:Rock.Framework.Logging.ILogEntry" /> message.
            </summary>
      <param name="msg">The Message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.LogAudit(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Logs the audit messages.
            </summary>
      <param name="msg">The MSG.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Debug(System.String)">
      <summary>
            Debugs the specified message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Debug(System.String,System.Boolean)">
      <summary>
            Debugs the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Debug(System.String,System.Exception)">
      <summary>
            Debugs the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Debug(System.String,System.Exception,System.Boolean)">
      <summary>
            Debugs the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Debug(System.String,System.Object)">
      <summary>
            Debugs the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as an anonymous type.</param>
      <example>
        <code>
            if (logger.IsDebugEnabled)
            {
                logger.Debug("test", new {key1="value1", key2="value2"});
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Debug(System.String,System.Object,System.Boolean)">
      <summary>
            Debugs the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as an anonymous type.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
      <example>
        <code>
            if (logger.IsDebugEnabled)
            {
                logger.Debug("test", new {key1="value1", key2="value2"}, false);
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Debug(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Debugs the specified entry.
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Debug(Rock.Framework.Logging.ILogEntry,System.Boolean)">
      <summary>
            Debugs the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Info(System.String)">
      <summary>
            Writes a log message as an informational message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Info(System.String,System.Boolean)">
      <summary>
            Writes a log message as an informational message.
            </summary>
      <param name="message">The message.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Info(System.String,System.Exception,System.Boolean)">
      <summary>
            Writes a log message as an informational message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Info(System.String,System.Exception)">
      <summary>
            Writes a log message as an informational message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Info(System.String,System.Object)">
      <summary>
            Writes a log message as an informational message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as an anonymous type.</param>
      <example>
        <code>
            if (logger.IsInfoEnabled)
            {
                logger.Info("test", new {key1="value1", key2="value2"});
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Info(System.String,System.Object,System.Boolean)">
      <summary>
            Writes a log message as an informational message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as an anonymous type.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
      <example>
        <code>
            if (logger.IsInfoEnabled)
            {
                logger.Info("test", new {key1="value1", key2="value2"}, false);
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Info(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Writes a log message as an informational message.
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Info(Rock.Framework.Logging.ILogEntry,System.Boolean)">
      <summary>
            Writes a log message as an informational message.
            </summary>
      <param name="logEntry">The log entry.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Warn(System.String)">
      <summary>
            Warns the specified message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Warn(System.String,System.Boolean)">
      <summary>
            Warns the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Warn(System.String,System.Exception)">
      <summary>
            Warns the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Warn(System.String,System.Exception,System.Boolean)">
      <summary>
            Warns the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Warn(System.String,System.Object)">
      <summary>
            Warns the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type.</param>
      <example>
        <code>
            if (logger.IsWarnEnabled)
            {
                logger.Warb("test", new {key1="value1", key2="value2"});
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Warn(System.String,System.Object,System.Boolean)">
      <summary>
            Warns the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as an anonymous type. </param>
      <param name="sync">if set to <c>true</c> [sync].</param>
      <example>
        <code>
            if (logger.IsWarnEnabled)
            {
                logger.Warn("test", new {key1="value1", key2="value2"}, false);
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Warn(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Warns the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Warn(Rock.Framework.Logging.ILogEntry,System.Boolean)">
      <summary>
            Warns the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Error(System.String)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Error(System.String,System.Boolean)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Error(System.String,System.Exception)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Error(System.String,System.Exception,System.Boolean)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Error(System.String,System.Object)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. </param>
      <example>
        <code>
            if (logger.IsErrorEnabled)
            {
                logger.Error("test", new {key1="value1", key2="value2"});
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Error(System.String,System.Object,System.Boolean)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type. </param>
      <param name="sync">if set to <c>true</c> [sync].</param>
      <example>
        <code>
            if (logger.IsErrorEnabled)
            {
                logger.Error("test", new {key1="value1", key2="value2"}, false);
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Error(System.String,System.Object,System.Exception)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type.</param>
      <param name="ex">The exception.</param>
      <example>
        <code>
            if (logger.IsErrorEnabled)
            {
            logger.Error("test", new {key1="value1", key2="value2"}, ex);
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Error(System.String,System.Object,System.Exception,System.Boolean)">
      <summary>
            Errors the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type.</param>
      <param name="ex">The exception.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
      <example>
        <code>
            if (logger.IsErrorEnabled)
            {
            logger.Error("test", new {key1="value1", key2="value2"}, ex, false);
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Error(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Errors the specified entry.
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Error(Rock.Framework.Logging.ILogEntry,System.Boolean)">
      <summary>
            Errors the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Fatal(System.String)">
      <summary>
            Fatals the specified message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Fatal(System.String,System.Boolean)">
      <summary>
            Fatals the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Fatal(System.String,System.Exception)">
      <summary>
            Fatals the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Fatal(System.String,System.Exception,System.Boolean)">
      <summary>
            Fatals the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Fatal(System.String,System.Object)">
      <summary>
            Fatals the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type.</param>
      <example>
        <code>
            if (logger.IsFatalEnabled)
            {
                logger.Fatal("test", new {key1="value1", key2="value2"});
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Fatal(System.String,System.Object,System.Boolean)">
      <summary>
            Fatals the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as an anonymous type.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
      <example>
        <code>
            if (logger.IsFatalEnabled)
            {
                logger.Fatal("test", new {key1="value1", key2="value2"}, false);
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Fatal(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Fatals the specified entry.
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Fatal(Rock.Framework.Logging.ILogEntry,System.Boolean)">
      <summary>
            Fatals the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Audit(System.String)">
      <summary>
            Audits the specified message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Audit(System.String,System.Boolean)">
      <summary>
            Audits the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Audit(System.String,System.Object)">
      <summary>
            Audits the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as anonymous type.</param>
      <example>
        <code>
            logger.Audit("test", new {key1="value1", key2="value2"});
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Audit(System.String,System.Object,System.Boolean)">
      <summary>
            Audits the specified message.
            </summary>
      <param name="message">The message.</param>
      <param name="extendedProperties">The extended properties as an anonymous type.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
      <example>
        <code>
            logger.Audit("test", new {key1="value1", key2="value2"}, false);
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Audit(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Audits the specified entry.
            </summary>
      <param name="logEntry">The log entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerBase.Audit(Rock.Framework.Logging.ILogEntry,System.Boolean)">
      <summary>
            Audits the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="P:Rock.Framework.Logging.LoggerBase.CacheLogRetryTimer">
      <summary>
            Gets or sets the cache log retry timer.
            </summary>
      <value>The cache log retry timer.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LoggerBase.Category">
      <summary>
            Gets or sets the name of the category.
            </summary>
      <value>The name of the category.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LoggerBase.IsLoggingEnabled">
      <summary>
            Gets or sets a value indicating whether logging is enabled. 
            </summary>
      <value>
        <c>true</c> if this instance is logging enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Logging.LoggerBase.IsDebugEnabled">
      <summary>
            Gets a value indicating whether the logging level is set to Debug.
            </summary>
      <value>
        <c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Logging.LoggerBase.IsInfoEnabled">
      <summary>
            Gets a value indicating whether the logging level is set to Info.
            </summary>
      <value>
        <c>true</c> if this instance is info enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Logging.LoggerBase.IsWarnEnabled">
      <summary>
            Gets a value indicating whether the logging level is set to Warn.
            </summary>
      <value>
        <c>true</c> if this instance is warn enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Logging.LoggerBase.IsErrorEnabled">
      <summary>
            Gets a value indicating whether the logging level is set to Error.
            </summary>
      <value>
        <c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Logging.LoggerBase.IsFatalEnabled">
      <summary>
            Gets a value indicating whether the logging level is set to Fatal. 
            </summary>
      <value>
        <c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Logging.LoggerBase.Providers">
      <summary>
            Gets the logging providers.
            </summary>
      <value>The providers.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LoggerBase.AuditProvider">
      <summary>
            Gets the audit provider.
            </summary>
      <value>The providers.</value>
    </member>
    <member name="P:Rock.Framework.Logging.LoggerBase.ThrottlingRuleEvaluator">
      <summary>
            Gets or sets the throttling rule evaluator.
            </summary>
      <value>The throttling rule evaluator.</value>
    </member>
    <member name="E:Rock.Framework.Logging.LoggerBase.PreDebug">
      <summary>
            Occurs when [pre debug].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.LoggerBase.PreInfo">
      <summary>
            Occurs when [pre info].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.LoggerBase.PreWarn">
      <summary>
            Occurs when [pre warn].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.LoggerBase.PreError">
      <summary>
            Occurs when [pre error].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.LoggerBase.PreFatal">
      <summary>
            Occurs when [pre fatal].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.LoggerBase.PreAudit">
      <summary>
            Occurs when [pre fatal].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.LoggerBase.PreLog">
      <summary>
            Use this event to pre-pend information to all log entries before they are logged.
            </summary>
      <remarks>This event runs async or sync depending on how messages are logged.</remarks>
    </member>
    <member name="E:Rock.Framework.Logging.LoggerBase.PreLogSync">
      <summary>
            This synchronous event can be used to pre-pend information to all log entries before they are logged.  
            </summary>
      <remarks>
            This event was added to support web environments that need access to HttpContext prior to logging. 
            </remarks>
    </member>
    <member name="E:Rock.Framework.Logging.LoggerBase.DebugComplete">
      <summary>
            Occurs when [debug complete].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.LoggerBase.InfoComplete">
      <summary>
            Occurs when [info complete].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.LoggerBase.WarnComplete">
      <summary>
            Occurs when [warn complete].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.LoggerBase.ErrorComplete">
      <summary>
            Occurs when [error complete].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.LoggerBase.FatalComplete">
      <summary>
            Occurs when [fatal complete].
            </summary>
    </member>
    <member name="E:Rock.Framework.Logging.LoggerBase.AuditComplete">
      <summary>
            Occurs when [Audit complete].
            </summary>
    </member>
    <member name="T:Rock.Framework.Logging.Logger">
      <summary>
		Handles logging within an application. This class cannot be instantiated. It is created through the <see cref="T:Rock.Framework.Logging.LoggerFactory" />.
	</summary>
      <remarks>
        <para>
          <h1>Logger Overview</h1>
			Logger is the built-in logger used to handle application logging.  It provides
			a robust and extensible way to handle logging within an application.  Logger supports a
			variety of ways to log called providers (based on the provider pattern) that cover most all scenarios.  The following
			logging providers are provided out of the box.
			<list type="bullet"><listheader><term>Provider</term><description>Description</description></listheader><item><term><see cref="T:Rock.Framework.Logging.Provider.ConsoleLogProvider" /></term><description>
						Prints log messages to the standard out of the console (Console.WriteLine()).
						This provider should be used by developers only during development to view messages while developing.
					</description></item><item><term><see cref="T:Rock.Framework.Logging.Provider.FileLogProvider" /></term><description>
						Prints log messages to a specified file.  This provider should only be used by developers during development.
					</description></item><item><term><see cref="T:Rock.Framework.Logging.Provider.EmailLogProvider" /></term><description>Sends log messages via email and even supports HTML formatted email as well as attachments.</description></item><item><term><see cref="T:Rock.Framework.Logging.Provider.EventLogProvider" /></term><description>
						Logs messages to the computers event log.  This is used in conjunction with monitoring via SCOM.  This provider
						should be used instead of sending emails for errors.
					</description></item><item><term><see cref="T:Rock.Framework.Logging.Provider.NetMsmqLogProvider" /></term><description>
						Used to centralized log messages.  This should be configured as the
						default provider.  Any application running on a server (web application, web services or windows service)
						should use this log provider as the default provider to capture all information centrally.
						Messages logged with this provider can be viewed at <a href="http://core">http://core</a>.
					</description></item><item><term><see cref="T:Rock.Framework.Logging.Provider.WebServiceLogProvider" /></term><description>
						This provider allows Smart Client applications or applications that do not run on the server to centralize logs.  Messages
						logged with this provider can be viewed at <a href="http://core">http://core</a>.
					</description></item></list><para><h2>Features</h2>
				Logger supports the following features:
				<h3>Environment Aware</h3>
				Logger is <see cref="T:Rock.Framework.Environment" /> aware.  This allows Logger to automattically configure
				itself and even load balance logs for each environment (Dev, Test, Beta, Prod).  This simplifies the need to manage extra config files and settings for
				the providers that centralize logs.  FYI: If you are using the <see cref="T:Rock.Framework.Logging.Provider.NetMsmqLogProvider" /> or <see cref="T:Rock.Framework.Logging.Provider.WebServiceLogProvider" /> and have your environment set to "Dev" logs 
				do go to the central store to the test database. 
			</para><para><h3>Logging Levels</h3>
				Logging levels are defined in the order of: Debug(1), Info(2), Warn(3), Error(4), Fatal(5) and Audit(6).
				Logger requires a logging level to be set and it must be one of these types.  The default
				level is Fatal.
			</para><para>
				Logging levels work on a numeric system.  Levels below the current set level are not invoked.  Thus if
				the logging level is set to "Info(2)" messages from Info, Warn, Error and Fatal will be logged since those are higher levels
				than Info.  Debug messages will be skipped.
			</para><para>
				The way logging levels should be used in production is applications should be set to the logging level of Error.
				This means no Warn, Info or Debug messages will be logged.
			</para><para><h3>Performance - Check before logging</h3>
				Logger allows developers to check to see if logging is enabled before logging.
				This cuts down on extra processing and message formatting if Logger isn't going to log the data anyway.  All of the code snippets 
				mentioned below already do or handle this check.
				All calls to logger need to be checked to see if that level is logging before logger is called.
				See examples for more information.
			</para><para><h3>Throttling</h3>
				Throtting allows Logger to stop identical log messages when major Errors occur.  It also helps in the performance
				of our infrastructure including network and Exchange server. See the <see cref="T:Rock.Framework.Logging.Configuration.ThrottlingRule" /> for more
				information and examples.
			</para><para><h3>Categories</h3>
				Logger allows developers to create as many categories as they like to handle various logging
				scenarios.  A category holds a collection of providers and each provider can have their own custom formatter
				which allows each provider to custom taylor output of messages for providers that implement <see cref="T:Rock.Framework.Logging.Formatter.IFormatterTemplate" />.
				This allows developers to configure their application a variety of ways.  For example: A category could be created called "DBA"
				that is responsible for sending DBAs emails when a SqlException is thrown.  See <see cref="T:Rock.Framework.Logging.Configuration.Category" /> for more information
				as well as example configurations.
			</para><para><h3>Log To Multiple Sources with Providers</h3>
				A provider is an object that implements <see cref="T:Rock.Framework.Logging.Provider.ILogProvider" />.  A provider can format messages before
				sending them to their storage area.  A category must have at least one provider specified and multiple providers
				can be added to a single category.  This allows a category to generate multiple messages.
			</para><para><h3>Temporary message storage</h3>
        Logger will automatically store messages in temporary location when it captures exception or when provider is not initialized during processing of log message.
        Cached log entry is stored in \{Temp}\_LOGGER\logentry-{0}-{1}-{2}.log file, where {Temp} is current application's temporary storage location, 
        stored in "Temp" environment variable (default location would be "%USERPROFILE%\AppData\Local\Temp"), {0} - applicationId, assigned in application configuration,
        "{1}" - name of the category, {2} - generated message GUID.
        Temporary directory will be checked by Logger every minute. All temporary files will be reprocessed and removed from temporary location.
      </para><para>
				Each provider can have their own specific logging level.  This means each provider could only log messages at a certain level.
			</para><para><h3>Extensibility</h3>
				Developers can add additional features per application.  They can:
				<list type="bullet"><item>Create custom log providers (rolling file log provider, sonic log provider, etc)</item><item>
						Create custom logger types that hold specific information to their application. (create an object that inherits from <see cref="T:Rock.Framework.Logging.LoggerBase" />)
					</item><item>
						Create multiple template formatters that can be used with the various log providers. See <see cref="T:Rock.Framework.Logging.Formatter.LogFormatter" /> for more information.
					</item><item>Create new configuration providers that will read configuration information for Logger (ex: sql server, oracle, web service, etc).</item></list></para><para><h3>Custom Templates</h3>
				Each provider can have a custom message template associated with it.  This allows developers to customize
				the format of messages before they are written to storage. Note: Not all log providers support this feature.
				Providers that implement <see cref="T:Rock.Framework.Logging.Formatter.IFormatterTemplate" /> support templates.
				Templates are made using tokens, which look like this: {message}.  Tokens are listed at the bottom of the <see cref="T:Rock.Framework.Logging.Formatter.LogFormatter" /> page. 
			</para><para>
				HTML templates are supported for emails.  Use the <a href="http://core/apps/emailtemplatebuilder/emailtemplatebuilder.application">Email Template Builder</a> 
				utility to generate, test, and customize an email template.  This tool is updated to contain the latest changes to a default template.  The config example 
				below has the latest template also.
			</para><para><h3>Multiple Configurations</h3>
				Logger can be configured through a variety of ways and supports a pluggable configuration. See
				<see cref="T:Rock.Framework.Logging.Configuration.LoggerConfiguration" /> for examples on configuring Logger via
				an API and samples below for configuration Logger via your application's config file.  In the future, Logger will
				support the ability to be configured through an interface along with storing configuration information in the database.
			</para><para><h3>Pre-population of Data</h3>
				The following properties of a <see cref="T:Rock.Framework.Logging.LogEntry" /> are automatically populated for you depending on the context it is running under (web or client).
				<ul><li>ApplicationId</li><li>CreateTime</li><li>Level</li><li>MachineIPAddress</li><li>MachineName</li><li>Referrer</li><li>RequestMethod</li><li>Url</li><li>UserAgentBrowser</li><li>UserIPAddress</li><li>UserName</li></ul></para><para><h2>Auditing</h2>
				As of the release 1.1.98 and higher, audit logs are supported.  See the config example below for what needs to be
				added to the config file to support auditing.  The following attribute needs to be added: auditProviderType="NetMsmq|WebService"
				(select one of the two options depending on your application).
			</para><para><h3>How Auditing Should Be Used</h3>
				Auditing an application is very important.  Especially for compliance purposes.  Audit logs are collected from Logger by
				the security team and aggregated together in another permanent storage system that allow them to find patterns, hacks, attacks,
				malicious attempts and so on. Audit logs also allow us to know what a user did when.  For example, if a client's social security
				# is viewed, we should have a way to know which team member viewed that client's number. There are tons of scnearios where audits can and should
				be used within your application.  Please consult with the security team if you have any questions.
			</para><para>
				Believe it or not we have some crazy requests that come down the pipeline for us.  For example we've been asked to find out
				all team members that viewed a particular client's personal information.  With all the systems we have, imagine how long
				that takes? Having a centralized way to capture these audit logs in applications helps us solve that problem.
			</para><para>
				Any application dealing with client or team member data should generate audit logs.  Again, if you don't know what to
				audit in your application, please consult the security team.  But above all, "Do the right thing" and use common sense!
			</para><para><h2>Logging Code Snippets</h2>
				One of the things we see a lot in projects that is a bad practice is developers trying to simplify logging by creating one
				function to write log entries.  The problem with this is it slows your application down because it is doing so much extra
				processing and as you adjust the logging level your app will perform slowly.  DO NOT FOLLOW THIS PATTERN.  To help developers code quickly when
				logging we've created a set of code snippets that will allow you to quickly and easily log information in your applications.
				To use the logging code snippets, download them from the <a href="http://core/Files/logsnippets.zip">Core WebSite</a>.  Unzip
				the file into the following location.  You don't even have to restart Visual Studio.
			</para><para>Unzip to:  C:\Users\{username}\Documents\Visual Studio 2008\Code Snippets\Visual C#\My Code Snippets</para><para>
				The name of the snippets are as follows:
				<ul><li>logdebug</li><li>loginfo</li><li>logwarn</li><li>logerror</li><li>logfatal</li></ul>
				If you aren't familiar with snippets, just type the name of the snippet and press the tab key twice. The code for the snippet will
				then be generated.  Each level does the appropiate check to ensure logging is enabled.
			</para><para><h2>Logging Tips and Tricks: Error vs Warning vs Info</h2>
				Today we are undergoing a huge mind shift when it comes to logging in applications.  In the past most developers focused
				on logging only errors.  But!  There is so much more that can be logged with Logger to assist you in a lot of ways.
				You may be still trying to get your head around how you'll use Logger in your applications.
				Here are a few tips to help you get started and to start thinking about logging.  Remember!  Logging is the FIRST thing you
				should put into your application, not the last.  Otherwise, how will you capture those debug messages to help you debug!?
			</para><para><h3>What is an Error?</h3>
				When you are logging in your application, ask yourself “Is this really an error”?  In other words, when you log an error in
				your application, is this something that will result in one of the following:

				<ul><li>
						A 90K email or voicemail – In other words, is your application BROKE!?  If your application is REALLY BROKE then
						you probably should have logged a Fatal log message.
					</li><li>A SWAT or push to fix the problem.  In other words, “errors” are things you have to take action on.  They need to be FIXED. </li><li>Is it TRULY an exception?  In other words, is this something that you really didn’t expect to happen in your application?  </li></ul></para><para>
				Remember:  Errors require action!  Either you are going to leave a 90K message, or create a SWAT to fix the problem, or you are
				going to contact the user of the application to figure out how they created it.  Some type of action is going to occur.
			</para><para>
				Think about it another way.  If Shiv or Frank pulls up the <a href="http://core/LogEntries/List.aspx">Core Logger Viewer</a> and sees
				your application has thrown hundreds of errors in the past few minutes they are under the impression there is
				a problem with the application.  It tells them your application is broke.  Is the application REALLY BROKE? More times than not it isn’t.
			</para><para>
				If you find your application is logging A LOT of errors, then IT IS BROKE AND DOESN’T WORK (at least that is the impression given).
				And this brings me to Warnings and Info messages.
			</para><para><h3>Ok then….. what about “Warnings” and” Info” messages?</h3>
				The majority of log messages should be informational and audit or warnings.  Informational is easy to start with.  Just take
				the workflow points of your application and put Info messages right there.  Examples:
				<ul><li>User ____ logged in</li><li>PEP was saved</li><li>File a Complaint #1234567 was dropped</li><li>Credit pulled by user ______ for loan #:________</li><li>Etc..</li></ul></para><para>
				Info messages are easy to log and tell you WHAT your users are doing in your applications in real time.  These Info messages help
				you to know what the user was doing BEFORE an Error is created.  They are important.  Also, the let you know even if your app is
				being used and where.
			</para><para><h3>Warning Messages</h3>
				Warning messages are the in between Info and Error.  These messages should be logged when there is something
				in your application that you have handled but shouldn’t have occurred.
			</para><para>
				A recent case that comes to mind is an application was catching a security exception and logging it as an
				Error message.  The exception was handled in the application though and the user was given a nice message on the screen that
				told them they couldn’t peform that action.  In this example, the engineer wasn’t going to take action, but they wanted to know
				it happened.  Maybe because a user shouldn't have even gotten to that screen in the first place.  In this case, this should have
				been logged as a “Warning”.  Another example that comes to mind is the Roster Search handles certain validation and situations
				behind the scenes. Normally these shouldn't occur, but if they do they are logged as a warning message so it can be determined
				what the user did to get there.  Have a web page that now longer should be used? How do you know when applications stop
				accessing it?  Answer: Log a Warning message.  There are just a few examples of logging warning messages, hope it helps.
			</para></para>
      </remarks>
      <example>
        <para>
          <h2>Getting Intellisense For Logger</h2>
			To assist in app configuration we provide an XSD that will provide intellisense for Logger.  To
			enable intellisense and error checking in your app.config or web.config file, in Visual Studio open
			your config file.  In the top menu of VS, click on the XML menu, at the bottom of this menu select
			"Schemas".  In the window that opens, click "Add" and browse out to c:\program files (x86)\quicken loans\core framework\4.0.0.0\
			and select the schema called rock.framework.logging.xsd.  Once added click ok.
			This will provide intellisense in the config file to ensure the config file is properly formatted.
		</para>
        <para>
          <h2>Blank Config File Example</h2>
			If you have a blank configuration file, copy the following example.  
		</para>
        <code><![CDATA[
     <configuration>
     <configSections>
	 <!-- THIS IS NEEDED SO WE CAN LOAD CONFIGURATION INFORMATION WITHIN THE CONFIG FILE.
	      THIS SECTION DOES NOT HAVE TO BE EDITED, EXCEPT FOR THE VERSION # WHEN A NEW 
		  VERSION OF THE FRAMEWORK IS PUBLISHED. -->
     	<section name="rock.framework" type="Rock.Framework.Settings.Configuration.RockFrameworkSection, Rock.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848"/>
    </configSections>

	<rock.framework applicationId="1">
	        <environment name="Dev"/>
          <logger>
	 <!-- LOGGERCONFIGPROVIDER IS A PLUGGABLE WAY LOGGER LOADS ITS CONFIGURATION INFORMATION. IN THE 
	      FUTURE YOU'LL CHANGE THIS TO USE A SQLCONFIGPROVIDER WHICH WILL ALLOW YOU TO LOAD INFORMATION 
		  FROM A DATABASE INSTEAD OF A CONFIG FILE. -->
     	<loggerConfigProvider>
     		<provider type="Rock.Framework.Logging.Configuration.FileConfigProvider, Rock.Framework, 
				Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848">
     		</provider>
     	</loggerConfigProvider>
		<!--  THIS IS THE MAIN CONFIGURATION SECTION FOR LOGGER.  EACH APPLICATION NEEDS AN ID. CONTACT 
		      A CORE TEAM MEMBER TO GET AN ID SO YOUR LOGS CAN BE CENTRALLY LOGGED. THE AUDIT PROVIDER TYPE 
			  IS THE NEWEST ADDITION THAT SUPPORTS AUDITING. THERE ARE TWO OPTIONS, EITHER NetMsmq or WebService.-->
     	<loggerSettings loggingLevel="Debug" isLoggingEnabled="true" auditProviderType="NetMsmq">
		<!-- SOME LOGPROVIDERS SUPPORT THE ABILITY TO FORMAT MESSAGES (those that implement IFormatterTemplate). 
		     SEE A LIST OF AVAILABLE TOKENS IN THE LogFormatter CLASS.  YOU CAN ALSO VISIT THE CORE WEB SITE 
			 AND LAUNCH THE EMAIL TEMPLATE BUILDER WHICH IS UNDER UTILITIES.  THIS WILL PROVIDE A NICE 
			 EMAIL TEMPLATE TO USE YOUR APPLICATIONS AS WELL AS ALLOW YOU TO CUSTOMIZE THE EMAIL TEMPLATE 
			 EASILY. -->
     		<formatters>
     			<formatter name="email" template="&lt;a href=&quot;http://core/LogEntries/List.aspx?Environment={environment}&amp;Action=Search&amp;qp_Application={applicationId}&amp;qp_UserName={userName}&amp;qp_UserDisplayName={userDisplayName}&amp;qp_MachineName={machineName}&amp;qp_LogLevel={level}&amp;qp_CategoryId={category}&amp;qp_UserIPAddress={userIPAddress}&amp;qp_MachineIPAddress={machineIPAddress}&amp;qp_Url_Values={url}&amp;qp_UserCommonId={userCommonId}&quot;&gt;View Application Logs&lt;/a&gt;&lt;p&gt;&lt;h3&gt;LOG INFO&lt;/h3&gt;&lt;b&gt;Message:&lt;/b&gt; {message}&lt;br /&gt;&lt;b&gt;Affected System:&lt;/b&gt; {affectedSystem}&lt;br /&gt;&lt;b&gt;Category:&lt;/b&gt; {category}&lt;br /&gt;&lt;b&gt;Create Time:&lt;/b&gt; {createTime}&lt;br /&gt;&lt;b&gt;Type of Message:&lt;/b&gt; {level} &lt;br /&gt;&lt;b&gt;Machine IP Address:&lt;/b&gt; {machineIPAddress}&lt;br /&gt;&lt;b&gt;Machine Name:&lt;/b&gt; {machineName}&lt;br /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;h4&gt;EXTENDED PROPERTY INFO&lt;/h4&gt;&lt;table cellpadding=3 cellspacing=0 border=1 style='background-color: cornsilk' &gt;{extendedProperties(&lt;tr&gt;&lt;td valign=top style='font-weight:900; color: navy;'&gt;&lt;pre style='margin-bottom: 0px'&gt;{key}&lt;/td&gt;&lt;td valign=top&gt;&lt;pre style='margin-bottom: 0px'&gt;{value}&lt;/td&gt;&lt;/tr&gt;)}&lt;/table&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;h4&gt;USER INFO&lt;/h4&gt;&lt;b&gt;User Agent Browser:&lt;/b&gt; {userAgentBrowser}&lt;br /&gt;&lt;b&gt;User Disrupted:&lt;/b&gt;{userDisrupted}&lt;br /&gt;&lt;b&gt;User CommonID:&lt;/b&gt; {userCommonId} &lt;br /&gt;&lt;b&gt;User Display Name:&lt;/b&gt; {userDisplayName}&lt;br /&gt;&lt;b&gt;User IP Address:&lt;/b&gt; {userIPAddress}&lt;br /&gt;&lt;b&gt;User:&lt;/b&gt; {userName}&lt;br /&gt;&lt;b&gt;User Screen Name:&lt;/b&gt; {userScreenName}&lt;br /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;h4&gt;WEB APPLICATION INFO&lt;/h4&gt;&lt;b&gt;Referrer:&lt;/b&gt; {referrer} &lt;br /&gt;&lt;b&gt;Request Method:&lt;/b&gt; {requestMethod}&lt;br /&gt;&lt;b&gt;URL:&lt;/b&gt; {url}&lt;br /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;h4&gt;EXCEPTION INFO&lt;/h4&gt;&lt;pre&gt;{exception}&lt;/pre&gt;&lt;/p&gt;" />
     			<formatter name="file" template="Message: {message} Exception: {exception}{newLine}" />
     		</formatters>
			<!-- DEFINE THROTTLING RULES THAT CAN BE APPLIED TO THE CATEGORIES. MININTERVAL DEFINES THE MINIMUM
			TIME INTERVAL BETWEEN LOGGING SAME LOG ENTRY AGAIN. THE FORMAT IS "hh:mm:ss" AND THE DEFAULT IS 00:00:00.
			THE UNIQUENESS OF THE LOG ENTRY IS DETERMINED BY THE COMBINATION OF Message, ExceptionData, Level, 
			IsUserDisrupted, Referrer, AffectedSystem, RequestMethod, CategoryId, Url. -->
			<throttlingRules>
				<throttlingRule name="Default" minInterval="00:05:00"/>
				<throttlingRule name="Throttle" minInterval="00:01:00"/>
			</throttlingRules>			
     		<categories>
     			<category name="Default" throttlingRule="Default">
     				<providers>
					<!-- PROVIDERS ARE WHAT DO THE ACTUAL LOGGING. THE LOGGINGLEVEL ATTRIBUTE IS OPTIONAL.  THIS EXAMPLE 
					     SHOWS HOW TO LOG ALL MESSAGES TO A FILE AND ONLY ERRORS TO EMAIL. -->
     					<provider loggingLevel="Error" type="Rock.Framework.Logging.Provider.EmailLogProvider, Rock.Framework,
                             Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848" formatter="email">
     						<propertyMapper>
     							<mapper property="ToEmail" value="youremail@quickenloans.com" />
     							<mapper property="Subject" value="ApplicationName {level} message on {machineName} in {environment}" />
     							<mapper property="FromEmail" value="email@quickenloans.com" />
     						</propertyMapper>
     					</provider>
						<!-- DO NOT USE THE FILELOGPROVIDER ON SERVERS, IT IS ONLY FOR DEVELOPER USE, USE THE NETMSMQLOGPROVIDER 
						     OR WEBSERVICELOGPROVIDER.-->
						<provider loggingLevel="Debug" type="Rock.Framework.Logging.Provider.FileLogProvider, Rock.Framework,
                             Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848"
                             formatter="file" >
     						<propertyMapper>
     							<mapper property="File" value="C:\TEMP\MyAppLog.txt" />
     						</propertyMapper>
     					</provider>
     				</providers>
     			</category>
     		</categories>
     	</loggerSettings>
     </logger>
    </rock.framework>
	
	
	 <!-- ROCK.FRAMEWORK REQUIRES THIS IN ORDER TO SEND EMAIL -->
	 <system.net>
		<mailSettings>
			<smtp deliveryMethod="Network" >
				<network host="mailgw1"  />
			</smtp>
		</mailSettings>    
	 </system.net>
     </configuration>
     ]]></code>
        <para>
			A feature as of version 1.1 is the logging level can be set at the provider level to override the one
			from the global setting.  This setting is optional.  If a provider is not set a loggingLevel it will
			inherit the one from the loggerSettings.  The message will be logged only if its level is higher or equal to the logger and the provider levels. This is very helpful in the
			situation where you want to have a logger with multiple providers but you want to log to particular providers only for higher levels.
			For example, say you have a file provider and an email provider in the same category.  The file level is set to debug,
			and the email to error. When you are logging debug, info or warn the message will be logged only to file. For error and fatal it will be logged
			to both file and email. In this example if the logger level is changed to error, then only emails will get logged.
		</para>
        <para>
          <h2>Seperate Config Files</h2>
			Starting with .NET 2.0 you can take any configuration section and place it in its own config file and that includes the Core Logger sections.
			Using an external configuration source can be useful in a number of scenarios. For instance, you could place a section into an external
			configSource if you needed an easy method to swap settings for the section depending on the environment (development, test, or production).
			There is an additional benefit to using an external file, and that is the ability to have some amount of control over application restarts.
			If the web.config files changes, the application will restart – there is no alternative. However, if you move a section into an external file,
			you can tell the runtime if it should, or should not restart the application when the external configuration source changes.
		</para>
        <para>
			You can replace the loggerSettings section with the following:
		</para>
        <code><![CDATA[
			<loggerSettings configSource="CoreLoggerConfig.config" />
			]]></code>
        <para>
			And in the external file CoreLoggerConfig.config you add only the loggerSettings declaration. NOTE: Intellisense for Logger will not work in external config files.
		</para>
        <code><![CDATA[
			<loggerSettings loggingLevel="Debug" isLoggingEnabled="true">
				<formatters>
					...
				</formatters>
				<categories>
					...
				</categories>
			</loggerSettings>
			]]></code>
        <para>
          <h2>Mail Settings</h2>
			Using the <see cref="T:Rock.Framework.Logging.Provider.EmailLogProvider" /> requires the configuration of mail settings in the configuration file. The system.net element contains settings for classes in the System.Net namespace.
			The settings configure authentication modules, connection management, the proxy server, and Internet request modules for receiving information from Internet hosts. Place this settings under <![CDATA[<configuration>]]> element.
			For more information, see http://msdn.microsoft.com/en-us/library/w355a94k.aspx.
			<code><![CDATA[		
			<system.net>
				<mailSettings>
					<smtp deliveryMethod="Network" >
						<network host="mailgw1"  />
					</smtp>
				</mailSettings>    
			</system.net>

		]]></code></para>
        <para>
          <h2>Code Samples</h2>
			Once Logger is configured, it becomes simple to log messages. Here is a sample of how to log a debug message.
			Note:  Logger is checked to make sure Logger is enabled before logging the message.
			<code>
				ILogger logger = LoggerFactory.GetInstance(); // this will load the first category in the config file
				if(logger.IsDebugEnabled) // always check to see if logger is going to log a msg before logging it
				{
				logger.Debug("something cool just happened");
				}
			</code>
			In the above example, the <see cref="T:Rock.Framework.Logging.LoggerFactory" /> is used to get the Logger instance.
			The <see cref="M:Rock.Framework.Logging.LoggerFactory.GetInstance" /> was used to retrieve the logger.  This
			example retrieves the "Default" category since a category wasn't specified.
		</para>
        <para>
			Different cateogries can be used for different things.  Here is a sample of loading a different category.
			<code>
				ILogger logger = LoggerFactory.GetInstance("DBAAlert");
				try
				{
					WriteToDatabase(loan);
				}
				catch (SqlException ex)
				{
					if (logger.IsErrorEnabled)
					{
						LogEntry entry = new LogEntry(ex.Message, ex);
						entry.ExtendedProperties.Add("DBServer", dbConnection);
						logger.Error(entry);
					}
				}
			</code>
			Since the GetInstance() was passed the category name of "DBAAlert", this is the category that will be used.
			Notice each time before calling Logger the Logger is checked to make sure the logging level being
			using is enabled.  In a production environment, the logging level should be set to "Error".  This will log
			only Error and Fatal messages.  Therefore since we don't want to comment out Debug or Info messages and
			have to recompile, this allows developers to keep logging code in their applications without having to
			worry about eating up extra resources.
		</para>
        <para>
          <h2>Extensibility Example (recommended for all applications)</h2>
			Logger supports custom Logger types.  This allows developers to create abstractions in their applications around logging
			and encapsulate certain functionality.  The following example shows how custom
			loggers can be implemented within an application.  In this example we override the OnPreLogSync method.  This method runs
			synchronously and is used in web applications primarily because web applications need to add the current context information
			from the current thread.  It is recommended that each application wrap the logging functionality similar to this.
		</para>
        <para>
          <code>
				public class CustomLogger : LoggerBase
				{
					private static ILogger _logWriter = null;
					public static ILogger LogWriter
					{
						get 
						{
							if (_logWriter == null)
							{
								_logWriter = LoggerFactory.GetInstance&lt;CustomLogger&gt;();
				}
				return _logWriter;
				}
				}

				void AddAdditionalInfo(ILogEntry logEntry)
				{
				logEntry.UserCommonId = AppContext.User.CommonId;
				logEntry.UserDisplayName = AppContext.User.UserDisplayName;
				}

				// Override this method for web applications and web services so
				// the HttpContext is available on the current thread.  If you
				// are writing a smart client then override OnPreLog to get faster
				// performance since everything will run asynchronously.
				protected override void OnPreLogSync(ILogEntry entry)
				{
				AddAdditionalInfo(entry);
				base.OnPreLogSync(entry);
				}
				}

				public class CreditService
				{
				Client _client;

				public CreditService(Client client)
				{
				_client = client;
				}

				GetCredit()
				{
				try
				{
				// business logic
				}
				catch (CreditException ex)
				{
				if (CustomLogger.LogWriter.IsErrorEnabled)
				{
				CustomLogger.LogWriter.Error(ex.Message, ex);
				}
				}
				}
				}
			</code>
          <code><![CDATA[
				ILogger logger = LoggerFactory.GetInstance<CustomLogger>();
				if (logger.IsInfoEnabled)
				{
					logger.Info("I'm using my cool custom logger");
				}
				]]></code>
        </para>
      </example>
    </member>
    <member name="T:Rock.Framework.Logging.LoggerFactory">
      <summary>
             This class is responsible for loading and initializing the <see cref="T:Rock.Framework.Logging.Logger" /> or custom loggers developers 
             have created.
             </summary>
      <remarks>
        <example>
          <code>
             ILogger logger = LoggerFactory.GetInstance();
             </code>
          <code>
            			public class CustomLogger : LoggerBase
            			{
            				void AddAdditionalInfo(ILogEntry entry)
            				{
            					logEntry.Url = HttpContext.Current.Request.Url.ToString();
            					logEntry.UserName = HttpContext.Current.User.Identity.Name;
            				}
            				
            				// Override this method for web applications and web services so
            				// the HttpContext is available on the current thread.  If you 
            				// are writing a smart client then override OnPreLog to get faster 
            				// performance since everything will run asynchronously.
            				protected override void OnPreLogSync(ILogEntry entry)
            				{
            					AddAdditionalInfo(entry);
            					base.OnPreLogSync(entry);
            				}
            			}
            </code>
          <code><![CDATA[
            			ILogger logger = LoggerFactory.GetInstance<CustomLogger>();
            			if (logger.IsInfoEnabled)
            			{
            				logger.Info("I'm using my cool custom logger");
            			}
            			]]></code>
        </example>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerFactory.GetInstance">
      <summary>
            Returns an instance of <see cref="T:Rock.Framework.Logging.Logger" />. It returns the first category in the config file.
            </summary>
      <returns>Returns a <see cref="T:Rock.Framework.Logging.Logger" />.</returns>
      <remarks>
            Uses the first category in configuration.
            </remarks>
      <example>
        <code>
            ILogger logger = LoggerFactory.GetInstance();
            </code>
      </example>
      <exception cref="T:Rock.Framework.Logging.LogConfigurationException">There was a problem reading the configuration.</exception>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerFactory.GetInstance(Rock.Framework.Logging.Configuration.LoggerConfiguration)">
      <summary>
            Returns an instance of <see cref="T:Rock.Framework.Logging.Logger" />. It returns the first category in the config file.
            </summary>
      <param name="config">The config.</param>
      <returns>Returns a <see cref="T:Rock.Framework.Logging.Logger" />.</returns>
      <example>
        <code>
             // setup logger configuration through the API
             LoggerConfiguration config = new LoggerConfiguration();
             // create the default category named "Default"
             CategoryId cat = new CategoryId{Name = "Default"};
             
            // add a file provider so log messages get logged to a file
            Provider prov = new Provider();
            prov.ProviderType = Type.GetType("Rock.Framework.Logging.Provider.FileLogProvider, Rock.Framework");
            
            // setup the file provider property
            Mapper file = new Mapper { Property = "File", Value = "Log.txt" };
            
            // add the settings to the config
            prov.Mappers.Add(file);
            cat.Providers.Add(prov);
            config.Categories.Add("Default", cat);
            
            ILogger logger = LoggerFactory.GetInstance(config);
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">Config is null</exception>
      <exception cref="T:Rock.Framework.Logging.LogConfigurationException">There was a problem reading the configuration.</exception>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerFactory.GetInstance(System.String)">
      <summary>
            Gets an instance of <see cref="T:Rock.Framework.Logging.Logger" /> specific to a category.  See <see cref="T:Rock.Framework.Logging.Configuration.Category" /> for more information.
            </summary>
      <param name="category">The category.</param>
      <returns>Returns a <see cref="T:Rock.Framework.Logging.Logger" />.</returns>
      <example>
        <code>
            ILogger logger = LoggerFactory.GetInstance("Email");
            if (logger.IsErrorEnabled)
            {
               logger.Error("The database is down.");
            }
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">CategoryId is null</exception>
      <exception cref="T:Rock.Framework.Logging.LogConfigurationException">There was a problem reading the configuration.</exception>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerFactory.GetInstance(System.String,Rock.Framework.Logging.Configuration.LoggerConfiguration)">
      <summary>
            Gets an instance of <see cref="T:Rock.Framework.Logging.Logger" /> by category and custom configuration.
            </summary>
      <param name="category">The category.</param>
      <param name="config">The config.</param>
      <returns>Returns a <see cref="T:Rock.Framework.Logging.Logger" />.</returns>
      <example>
        <code>
             // setup logger configuration through the API
             LoggerConfiguration config = new LoggerConfiguration();
             CategoryId cat = new CategoryId{Name = "File"};
             
            // add a file provider so log messages get logged to a file
            Provider prov = new Provider();
            prov.ProviderType = Type.GetType("Rock.Framework.Logging.Provider.FileLogProvider, Rock.Framework");
            
            // setup the file provider property
            Mapper file = new Mapper { Property = "File", Value = "Log.txt" };
            
            // add the settings to the config
            prov.Mappers.Add(file);
            cat.Providers.Add(prov);
            config.Categories.Add("File", cat);
            
            ILogger logger = LoggerFactory.GetInstance("File", config);
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">CategoryId or config is null</exception>
      <exception cref="T:Rock.Framework.Logging.LogConfigurationException">There was a problem reading the configuration.</exception>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerFactory.GetInstance``1">
      <summary>
            Used to load and initialize <see cref="T:Rock.Framework.Logging.Logger" /> with a custom implemented type. It returns the first category in the config file.
            </summary>
      <remarks>
            Developers can create their own logger specific to their applications that 
            provide additional functionality and/or that help out with logging.
            <para>
            This method is used to allow developers to load their own types of logger.  This 
            method loads the first category in configuration.
            </para><example><code>
            MyCustomerLogger logger = LoggerFactory.GetInstance{MyCustomerLogger}();  
            if (logger.IsInfoEnabled)
            {
                logger.Info("User 1233123123 viewed loan # 121239828349834");
            }
            </code></example></remarks>
      <typeparam name="T">Custom logger that implements <see cref="T:Rock.Framework.Logging.LoggerBase" />.</typeparam>
      <returns>Returns a <see cref="T:Rock.Framework.Logging.Logger" />.</returns>
      <exception cref="T:Rock.Framework.Logging.LogConfigurationException">There was a problem reading the configuration.</exception>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerFactory.GetInstance``1(Rock.Framework.Logging.Configuration.LoggerConfiguration)">
      <summary>
            Used to load and initialize <see cref="T:Rock.Framework.Logging.Logger" /> with a custom implemented type and 
            custom API configuration.  It returns Logger using the first category in the config.
            </summary>
      <typeparam name="T">Custom logger that implements <see cref="T:Rock.Framework.Logging.LoggerBase" />.</typeparam>
      <param name="config">The config.</param>
      <returns>Returns a <see cref="T:Rock.Framework.Logging.Logger" />.</returns>
      <remarks>
            Developers can create their own logger specific to their applications that 
            provide additional functionality and/or that help out with logging.
            <para>
            This method is used to allow developers to load their own types of logger.  This 
            method loads the first category in configuration.
            </para></remarks>
      <example>
        <code>
             // setup logger configuration through the API
             LoggerConfiguration config = new LoggerConfiguration();
             // create the default category named "Default"
             CategoryId cat = new CategoryId{Name = "Default"};
             
            // add a file provider so log messages get logged to a file
            Provider prov = new Provider();
            prov.ProviderType = Type.GetType("Rock.Framework.Logging.Provider.FileLogProvider, Rock.Framework");
            
            // setup the file provider property
            Mapper file = new Mapper { Property = "File", Value = "Log.txt" };
            
            // add the settings to the config
            prov.Mappers.Add(file);
            cat.Providers.Add(prov);
            config.Categories.Add("Default", cat);
            
            MyCustomLogger logger = LoggerFactory.GetInstance{MyCustomLogger}(config);
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">Config is null</exception>
      <exception cref="T:Rock.Framework.Logging.LogConfigurationException">There was a problem reading the configuration.</exception>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerFactory.GetInstance``1(System.String)">
      <summary>
            Used to load and initialize <see cref="T:Rock.Framework.Logging.Logger" /> with a custom implemented type by category.
            </summary>
      <param name="category">The category.</param>
      <typeparam name="T">Custom logger that implements <see cref="T:Rock.Framework.Logging.LoggerBase" />.</typeparam>
      <returns>Returns a <see cref="T:Rock.Framework.Logging.Logger" />.</returns>
      <remarks>
            Developers can create their own logger specific to their applications that
            provide additional functionality and/or that help out with logging.
            <para>
            This method is used to allow developers to load their own types of logger.  This
            method loads the first category in configuration.
            </para><example><code>
            MyCustomerLogger logger = LoggerFactory.GetInstance{MyCustomerLogger}("LoanProcessor");
            if (logger.IsInfoEnabled)
            {
            logger.Info("User 1233123123 viewed loan # 121239828349834");
            }
            </code></example></remarks>
      <exception cref="T:System.ArgumentNullException">CategoryId is null</exception>
      <exception cref="T:Rock.Framework.Logging.LogConfigurationException">There was a problem reading the configuration.</exception>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerFactory.GetInstance``1(System.String,Rock.Framework.Logging.Configuration.LoggerConfiguration)">
      <summary>
            Used to load and initialize <see cref="T:Rock.Framework.Logging.Logger" /> with a custom implemented type and
            custom API configuration by category.
            </summary>
      <typeparam name="T">Custom logger that implements <see cref="T:Rock.Framework.Logging.LoggerBase" />.</typeparam>
      <param name="category">The category.</param>
      <param name="config">The config.</param>
      <returns>Returns a <see cref="T:Rock.Framework.Logging.Logger" />.</returns>
      <remarks>
            Developers can create their own logger specific to their applications that
            provide additional functionality and/or that help out with logging.
            <para>
            This method is used to allow developers to load their own types of logger.  This
            method loads the first category in configuration.
            </para></remarks>
      <example>
        <code>
            // setup logger configuration through the API
            LoggerConfiguration config = new LoggerConfiguration();
            // create the default category named "Default"
            CategoryId cat = new CategoryId{Name = "Default"};
            // add a file provider so log messages get logged to a file
            Provider prov = new Provider();
            prov.ProviderType = Type.GetType("Rock.Framework.Logging.Provider.FileLogProvider, Rock.Framework");
            // setup the file provider property
            Mapper file = new Mapper { Property = "File", Value = "Log.txt" };
            // add the settings to the config
            prov.Mappers.Add(file);
            cat.Providers.Add(prov);
            config.Categories.Add("Default", cat);
            MyCustomLogger logger = LoggerFactory.GetInstance{MyCustomLogger}("Default", config);
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">CategoryId or config is null</exception>
      <exception cref="T:Rock.Framework.Logging.LogConfigurationException">There was a problem reading the configuration.</exception>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerFactory.Reset">
      <summary>
            FOR UNIT TESTS - Resets the singletons. Used for unit tests.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerFactory.ProcessLogCacheIfSync(Rock.Framework.Logging.LoggerBase)">
      <summary>
            We want to process cached logs for console applications or short burst applications that run 
            and die that don't live very long.
            </summary>
      <param name="logger">
      </param>
    </member>
    <member name="M:Rock.Framework.Logging.LoggerFactory.CheckCacheForLogEntriesAndLogCount(Rock.Framework.Logging.LoggerBase)">
      <summary>
            We log how many log entries are still in the cache when the application starts.
            </summary>
      <param name="logger">
      </param>
    </member>
    <member name="T:Rock.Framework.Logging.LoggerLog">
      <summary>
            Handles the Logger exceptions 
            </summary>
    </member>
    <member name="T:Rock.Framework.Logging.LogLevel">
      <summary>
            Logging levels are stacked in order of 1-5.  Debug is 1, Info is 2, Warn is 3, Error is 4 and Fatal is 5. 
            Logging levels are used to determine if messages should be logged.  Example, if the logging level is set
             to 3 (Warn), messages of Info or Debug will not get logged.  
             <para>
             The default logging level in the system is set to Fatal.
             </para></summary>
    </member>
    <member name="F:Rock.Framework.Logging.LogLevel.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Rock.Framework.Logging.LogLevel.Debug">
      <summary>
            Debug = 1
            </summary>
    </member>
    <member name="F:Rock.Framework.Logging.LogLevel.Info">
      <summary>
            Info = 2
            </summary>
    </member>
    <member name="F:Rock.Framework.Logging.LogLevel.Warn">
      <summary>
            Warn = 3
            </summary>
    </member>
    <member name="F:Rock.Framework.Logging.LogLevel.Error">
      <summary>
            Error = 4
            </summary>
    </member>
    <member name="F:Rock.Framework.Logging.LogLevel.Fatal">
      <summary>
            Fatal = 5
            </summary>
    </member>
    <member name="F:Rock.Framework.Logging.LogLevel.Audit">
      <summary>
            Audit = 6
            </summary>
    </member>
    <member name="T:Rock.Framework.Logging.Provider.ILogProvider">
      <summary>
            This interface defines the contract for logging providers.  
            Any custom logging provider that is created will need to implement this interface 
            as well as the optional interface <see cref="T:Rock.Framework.Logging.Formatter.IFormatterTemplate" /> if the provider 
            is able to format messages for output.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.ILogProvider.Write(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Writes the specified entry.
            </summary>
      <param name="entry">The entry.</param>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.ILogProvider.LoggingLevel">
      <summary>
            Gets or sets the logging level.
            </summary>
      <value>The logging level.</value>
    </member>
    <member name="T:Rock.Framework.Logging.Provider.DeveloperEmailLogProvider">
      <summary>
            This provider has settings similar to <see cref="T:Rock.Framework.Logging.Provider.EmailLogProvider" />,
            but avoids reconfiguring the ToEmail address for each developer.
            
            The DeveloperEmailLogProvider is a Rock.Framework.Logging email provider
            that doesn't need the ToEmail address to be configured.  This provider
            will get the username of the windows account running the program, and send
            emails to the email address the user has in Active Directory.  If the
            user doesn't have an email address, no error nor email will be generated.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.DeveloperEmailLogProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.Provider.DeveloperEmailLogProvider" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.DeveloperEmailLogProvider.Write(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Writes the specified entry.
            </summary>
      <param name="entry">The entry.</param>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.DeveloperEmailLogProvider.LoggingLevel">
      <summary>
            Gets or sets the logging level.
            </summary>
      <value>The logging level.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.DeveloperEmailLogProvider.FromEmail">
      <summary>
            Gets or sets from email.
            </summary>
      <value>From email.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.DeveloperEmailLogProvider.Subject">
      <summary>
            Gets or sets the subject.
            </summary>
      <value>The subject.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.DeveloperEmailLogProvider.ToEmail">
      <summary>
            Gets or sets to email.  Configuring this value is optional.
            If no email is given, the email address of the account running the application will be used.
            If the running account doesn't have an email, no error will be generated.
            </summary>
      <value>To email.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.DeveloperEmailLogProvider.Template">
      <summary>
            Gets or sets the template to be used for logging messages. See <see cref="T:Rock.Framework.Logging.Formatter.LogFormatter" /> for more information.
            </summary>
      <value>The template.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.DeveloperEmailLogProvider.AttachmentKeys">
      <summary>
            Gets or sets the list of ExtendedProperty keys you want to attach to the email as an attachment.
            </summary>
      <remarks>
        <para>You can specify one or multiple extended property keys you want to attach to an email.  Seperate them with commas as shown below.</para>
        <example><![CDATA[
            <mapper property="AttachmentKeys" value="LakewoodDump, ClientData" />
            ]]></example>
      </remarks>
    </member>
    <member name="T:Rock.Framework.Logging.Provider.ConsoleLogProvider">
      <summary>
            Writes log messages to the console.
            </summary>
      <remarks>
            Use this provider when developing console applications as well as when debugging within Visual Studio.  
            Messages are displayed in the Output windows in Visual Studio when debugging.  
            </remarks>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.ConsoleLogProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.Provider.ConsoleLogProvider" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.ConsoleLogProvider.Write(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Writes the specified entry.
            </summary>
      <param name="entry">The entry.</param>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.ConsoleLogProvider.LoggingLevel">
      <summary>
            Gets or sets the logging level.
            </summary>
      <value>The logging level.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.ConsoleLogProvider.Template">
      <summary>
            Gets or sets the template to be used for logging messages. See <see cref="T:Rock.Framework.Logging.Formatter.LogFormatter" /> for more information.
            </summary>
      <value>The template.</value>
    </member>
    <member name="T:Rock.Framework.Logging.Provider.EmailLogProvider">
      <summary>
		Use this log provider to generate emails of log messages.  It also supports email attachments.
	</summary>
      <remarks>
		To use this provider, three properties must be configured:  ToEmail, Subject, FromEmail ( (optional) AttachmentKeys).
		<para>
			To specify multiple recipients seperate them with a ;.  The optional property of AttachmentKeys is used to specify keys
			in the ExtendedProperties collection that are to be convereted into an email attachment.  Specify the key or keys seperated
			with a comma.  The data specified in that key will be converted into an email attachment with the file name of the attachment.
			Example: If you have an AttachmentKeys specified as "AMPDump", an attachment will be created as AMPDump.txt.  See code example below.
		</para></remarks>
      <example>
        <code><![CDATA[
		<rock.framework applicationId="1">
      <logger>
   		<loggerConfigProvider>
   			<provider type="Rock.Framework.Logging.Configuration.FileConfigProvider, Rock.Framework,
   				Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848">
   			</provider>
   		</loggerConfigProvider>
   		<loggerSettings loggingLevel="Debug" isLoggingEnabled="true">
   			<formatters>
   				<formatter name="default" template="-{message}-\n{exception}-\n{category}" />
   			</formatters>
   			<categories>
   				<category name="Email">
   					<providers>
   						<provider type="Rock.Framework.Logging.Provider.EmailLogProvider, Rock.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848" formatter="default">
   							<propertyMapper>
   								<mapper property="ToEmail" value="keithelder@quickenloans.com;valentinminaev@quickenloans.com" />
   								<mapper property="Subject" value="email subject" />
   								<mapper property="FromEmail" value="email@quickenloans.com" />
   							</propertyMapper>
   						</provider>
   					</providers>
   				</category>
   			</categories>
   		</loggerSettings>
      </logger>
		</rock.framework>		
		]]></code>
        <para>
			The following example shows the optional mapper option in the config that allows developers to attach files to email.
		</para>
        <code><![CDATA[
			<provider type="Rock.Framework.Logging.Provider.EmailLogProvider, Rock.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848" formatter="default">
				<propertyMapper>
					<mapper property="ToEmail" value="keithelder@quickenloans.com;valentinminaev@quickenloans.com" />
					<mapper property="Subject" value="email subject" />
					<mapper property="FromEmail" value="email@quickenloans.com" />
					<mapper property="AttachmentKeys" value="AMPDump, ClientData" />
				</propertyMapper>
			</provider>
			]]></code>
        <para>
			The following example shows how to use attachments with the above configuration.
		</para>
        <code>
			Logger l = LoggerFactory.GetInstance(); // make this a global variable
			try
			{
				SaveAMPDumpToDatabase(data);
			}
			catch (Exception ex)
			{
				if (l.IsErrorEnabled)
				{
					LogEntry e = new LogEntry(ex.Message, ex);
					e.ExtendedProperties.Add("AMPDump", Rock.Framework.Serialization.XmlObjectSerializer.ToXML(data));
					l.Error(e);
				}
			}
		</code>
        <para>
			You can use the application configuration files to specify default host, port, and credentials values for SmtpClient objects.
			For more information, see http://msdn.microsoft.com/en-us/library/w355a94k.aspx.
			The <![CDATA[<system.net>]]> element contains settings for classes in the System.Net namespace. Place this settings under <![CDATA[<configuration>]]> element.
		</para>
        <code><![CDATA[
			<system.net>
				<mailSettings>
					<smtp deliveryMethod="Network" >
						<network host="mailgw1"  />
					</smtp>
				</mailSettings>    
			</system.net>

			]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.EmailLogProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.Provider.EmailLogProvider" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.EmailLogProvider.Write(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Writes the specified entry.
            </summary>
      <param name="entry">The entry.</param>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.EmailLogProvider.LoggingLevel">
      <summary>
            Gets or sets the logging level.
            </summary>
      <value>The logging level.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.EmailLogProvider.FromEmail">
      <summary>
            Gets or sets from email.
            </summary>
      <value>From email.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.EmailLogProvider.Subject">
      <summary>
            Gets or sets the subject.
            </summary>
      <value>The subject.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.EmailLogProvider.ToEmail">
      <summary>
            Gets or sets to email.
            </summary>
      <value>To email.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.EmailLogProvider.Template">
      <summary>
            Gets or sets the template to be used for logging messages. See <see cref="T:Rock.Framework.Logging.Formatter.LogFormatter" /> for more information.
            </summary>
      <value>The template.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.EmailLogProvider.AttachmentKeys">
      <summary>
            Gets or sets the list of ExtendedProperty keys you want to attach to the email as an attachment.
            </summary>
      <remarks>
        <para>You can specify one or multiple extended property keys you want to attach to an email.  Seperate them with commas as shown below.</para>
        <example><![CDATA[
            <mapper property="AttachmentKeys" value="AMPDump, ClientData" />
            ]]></example>
      </remarks>
    </member>
    <member name="T:Rock.Framework.Logging.Provider.EventLogProvider">
      <summary>
		Converts log messages into a format suitable to be written to the computer's event log.
		Messages are written to the Application log.  This provider supports template formatting.
	</summary>
      <remarks>
        <para>
          <h1>About This Provider</h1>
			The main purpose of this provider is to cut down on developers sending email for errors.  Using this 
			provider to log messages to the local event log on the server combined with centralized logging, applications 
			no longer have to rely upon sending email when an error occurs.  Generating logs through email puts extra 
			strain on our Exchange cluster and has been known to delay or take out the exchange servers when catostrophic 
			errors occur in applications (like a database is down).  Using SCOM (System Center Operations Manager) your 
			applications can be monitored and email alerts can be triggered from SCOM to alert engineers when applications 
			encounter problems.
			
			<h2>Monitoring With SCOM and Logger</h2>
			To get started monitoring your applications in more real time each application needs to create an event source 
			for the messages to get written into.  To create an event source, locate the following registry subkey	
			"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application" and create a new key using 
			your application name as the key name.  Typically a Windows admin will create this for you on the server, but if 
			you have local admin rights, you can create this locally for testing.
			<para><h3>Handling Multiple Scenarios</h3>
				Once your application has an event log to write to you have a couple of choices to handle monitoring. The 
				most flexible way 
				to support more scenarios for escalation is to use <see cref="P:Rock.Framework.Logging.LogEntry.CategoryId" /> 
				to trigger different alerts with SCOM.  When you combine <see cref="P:Rock.Framework.Logging.LogEntry.CategoryId" /> 
				and SCOM you have an unlimited number of ways to get alerts for a variety of configurations.  The CategoryId gets
				 written intot he EventId of the EvenetLog which will then allow SCOM to pick that up and alert based on 
				 that.
			</para><para><h3>Using QBert To Requests Monitors with SCOM</h3>
		    To have your application monitored, create an ITA task in QBert and select the monitor request.  Select 
			Windows Event Log, and when asked for event log name, select other and enter your application name.  In the 
			request, enter information as to how you would like to be alerted.  Another great benefit of using SCOM to 
			monitor your application instead of sending emails, is SCOM supports workflow scenarios.  For example, when 
			SCOM detects an Error message in your apps event log, it will send an email (just one though, not one for each error). 
			It can be configured to then send emails in intervals, autoclose the error and even escalate calls to your 
			oncall phone or even send SMS messages.  Consult with Tim McFadden for all of the options SCOM can provide.
			</para><h2>Configuration</h2>
			To configure this provider the following property must be specified: ApplicationName
			NOTE: The application name has to be registered to the Event Log as a valid event source for writing entries
			to the "Application" log on the local computer. To resolve this problem, a user who has administrative rights
			must create the event source before you can use the EventLogProvider.
		</para>
        <para>
          <example>
            <code><![CDATA[
						<configuration>
							<rock.framework applicationId="1">
                <logger>
								<loggerConfigProvider>
									<provider type="Rock.Framework.Logging.Configuration.FileConfigProvider, Rock.Framework, 
										Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848">
									</provider>
								</loggerConfigProvider>
								<loggerSettings loggingLevel="Debug" isLoggingEnabled="true">
									<formatters>
										<formatter name="default" template="-{message}-\n{exception}-\n{category} " />
									</formatters>
									<categories>
										<category name="EventLog">
											<providers>
												<provider type="Rock.Framework.Logging.Provider.EventLogProvider, Rock.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848">
													<propertyMapper>
														<mapper property="ApplicationName" value="Logger"/>
													</propertyMapper>
												</provider>
											</providers>
										</category>
									</categories>
								</loggerSettings>
							</logger>
		          </rock.framework>	
						</configuration>	
					]]></code>
          </example>
        </para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.EventLogProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.Provider.EventLogProvider" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.EventLogProvider.Write(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Writes the specified entry to the Event Log.
            </summary>
      <param name="entry">The log entry.</param>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.EventLogProvider.ApplicationName">
      <summary>
            Gets or sets the name of the application.
            </summary>
      <value>The name of the application.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.EventLogProvider.LoggingLevel">
      <summary>
            Gets or sets the logging level.
            </summary>
      <value>The logging level.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.EventLogProvider.Template">
      <summary>
            Gets or sets the template to be used for logging messages. See <see cref="T:Rock.Framework.Logging.Formatter.LogFormatter" /> for more information.
            </summary>
      <value>The template.</value>
    </member>
    <member name="T:Rock.Framework.Logging.Provider.FileLogProvider">
      <summary>
		 Writes log messages to a specified file.
	</summary>
      <remarks>
		 This log provider should not be used in production environments.  It is purposed primarily 
		 for developers to test applications locally.
	</remarks>
      <example>
        <code><![CDATA[
		<rock.framework applicationId="1">
      <logger>
			<loggerConfigProvider>
				<provider type="Rock.Framework.Logging.Configuration.FileConfigProvider, Rock.Framework, 
					Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848">
				</provider>
			</loggerConfigProvider>
			<loggerSettings loggingLevel="Debug" isLoggingEnabled="true">
				<formatters>
					<formatter name="default" template="-{message}-\n{exception}-\n{category}" />
				</formatters>
				<categories>
					<category name="File">
						<providers>
							<provider type="Rock.Framework.Logging.Provider.FileLogProvider, Rock.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848" formatter="default">
								<propertyMapper>
									<mapper property="File" value="c:\temp\Log.txt" />
								</propertyMapper>
							</provider>
						</providers>
					</category>
				</categories>
			</loggerSettings>
		</logger>
		</rock.framework>	
		]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.FileLogProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.Provider.FileLogProvider" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.FileLogProvider.Write(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Writes the specified entry.
            </summary>
      <param name="entry">The entry.</param>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.FileLogProvider.Dispose">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.FileLogProvider.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.FileLogProvider.LoggingLevel">
      <summary>
            Gets or sets the logging level.
            </summary>
      <value>The logging level.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.FileLogProvider.File">
      <summary>
            Gets or sets the file.
            </summary>
      <value>The file.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.FileLogProvider.Template">
      <summary>
            Gets or sets the template to be used for logging messages. See <see cref="T:Rock.Framework.Logging.Formatter.LogFormatter" /> for more information.
            </summary>
      <value>The template.</value>
    </member>
    <member name="T:Rock.Framework.Logging.Provider.ILogMsmqService">
      <summary>
            Provides Interface for NetMsmqLogProvider.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.ILogMsmqService.Write(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Writes the specified entry.
            </summary>
      <param name="entry">The entry.</param>
    </member>
    <member name="T:Rock.Framework.Logging.Provider.ILogProviderInitializer">
      <summary>
            Gives log providers the ability to do more complex setup scenarios after they are instantiated.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.ILogProviderInitializer.LogProviderInitializer">
      <summary>
            Called after the constructor of a log provider.
            </summary>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.ILogProviderInitializer.IsInitialized">
      <summary>
            Gets or sets a value indicating whether this instance is initialized.
            </summary>
      <value>
        <c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Rock.Framework.Logging.Provider.ILogWebService">
      <summary>
            Provides Interface for WebServiceLogProvider.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.ILogWebService.Write(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Writes the specified entry.
            </summary>
      <param name="entry">The entry.</param>
    </member>
    <member name="T:Rock.Framework.Logging.Provider.NetMsmqLogProvider">
      <summary>
		This logging provider is the provider that centralizes all logs for applications into one central place.  
		This is the primary logging provider that should be used with Logger, unless you are logging in a Smart Client.  See WebServiceLogProvider 
		if you are logging in a Smart Client.  Each category specified 
		in the config needs to have this logging provider in order to centralize all of the application 
		logs to a central location.  Since categories can support more than one logging provider it is perfectly 
		ok to have an EmailLogProvider and a NetMsmqProvider configured for the same category.  
	</summary>
      <remarks>
        <para>
          <h1>About This Provider</h1>
			To use this provider, only one property must be configured:  Endpoint (see <see cref="P:Rock.Framework.Logging.Provider.NetMsmqLogProvider.Endpoint" />).
			The Endpoint property is a net.msmq Endpoint that defines the service that will process log messages.
			Each environment has their own Endpoint, thus if you are in the test environment, use the test Endpoint.
			Only messages that are considered Production should be logged into the Production environment.
		</para>
        <para>
          <h2>How It Works</h2>
			The NetMsmqLogProvider uses MSMQ to queue messages.  It provides a durable transactional guarantee that 
			messages will not be lost.  When a message is logged with this provider, it is first stored locally in the 
			outgoing queue.  The message is written to the file system first.  After the message is written to the queue, MSMQ 
			then tries to process the message by delivering it to the computer's queue specified in the Endpoint. If the 
			remote computer is up and available, the message leaves within sub-milliseconds.  If however, the remote computer 
			is down for maintenance or other issues, the message stays in the local queue on the server it originated from. 
			Messages are first tried for develivery 5 times, and if unable to be delivered, they are then retried every 15 
			minutes for up to 288 retries which totals 3 days.  After 3 days, if a message is unable to be delivered 
			to the Endpoint specified, the message is written into a private queue called "LoggerDeadLetterQueue".  The 
			Core Engineering team will be monitoring these dead letter queues through SCOM and taking action if messages arrive in this 
			queue.  Messages should never reach this queue, this is a precautionary backup since once a message is logged 
			it should never be lost.
		</para>
        <para>
          <h2>Server Requirements</h2>
			The following lists the server / developer workstation requirements in order for the NetMsmqBinding to work.  
			<h4>MSMQ</h4>
			MSMQ 4.0 must be installed and working on the server / developer workstation for this binding to work.  This binding only supports 
			the following operating systems: Vista, Server 2008.  Thus if you are running Server 2003 or XP use the <see cref="T:Rock.Framework.Logging.Provider.WebServiceLogProvider" />. 
			<para>
				To install MSMQ on Server 2008 open adminstration tools-&gt;server manager.  Under the features section, click add features and select MSMQ.  
				NOTE: Do not active directory integration with MSMQ!
			</para><h4>LoggerDeadLetterQueue</h4>
			A private transactional queue named "LoggerDeadLetterQueue" must be created on the server / developer workstation.  The permissions of this queue need to be set so messages can be written to this queue.  
			To create a queue, open "Computer Management" in Server 2008.  In the MSMQ section, right click on "private queues" and create a new queue, mark it transactional.  Then right click 
			on the queue and press properties.  Click "Security" and give full control to Everyone on this queue.
		</para>
        <para>
          <h2>Environment Configurations</h2>
			This provider is configured based on the <see cref="T:Rock.Framework.Environment" /> setting listed in the application's config file.  Due to 
			the complexity of managing multiple config files for each server, the Environment setting is used to load balance and <see cref="T:Rock.Framework.Collections.RoundRobinCollection`1" /> 
			between the different servers in a given environment to provide load balancing.  An endpoint property can be specified for the provider which 
			will override the default settings for a given environment.  All configurations for environments can be found at <a href="http://core/home/configurations">http://core/home/configurations</a> 
			but shouldn't be needed.
		</para>
      </remarks>
      <example>
        <code><![CDATA[
		<rock.framework applicationId="1">
      <logger>
			<loggerConfigProvider>
				<provider type="Rock.Framework.Logging.Configuration.FileConfigProvider, Rock.Framework,
					Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848">
				</provider>
			</loggerConfigProvider>
			<loggerSettings loggingLevel="Debug" isLoggingEnabled="true">
				<formatters>
					<formatter name="default" template="-{message}-\n{exception}-\n{category}" />
				</formatters>
				<categories>
					<category name="Central">
						<providers>
							<provider type="Rock.Framework.Logging.Provider.NetMsmqLogProvider, Rock.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848">
								<!-- THE PROPERTY MAPPER IS NO LONGER REQUIRED WITH THE NEW ENVIRONMENT OPTION -->
								<!--
								<propertyMapper>
									<mapper property="Endpoint" value="net.msmq://test1midware1/private/services/Msmq.svc" />
								</propertyMapper>
								-->
							</provider>
						</providers>
					</category>
				</categories>
			</loggerSettings>
		</logger>
		</rock.framework>	
		]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.NetMsmqLogProvider.#ctor">
      <summary>
            Initializes a new instance of the NetMsmqLogProvider class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.NetMsmqLogProvider.Inititalize">
      <summary>
            This is only called if the EndPoint address is set from the config file.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.NetMsmqLogProvider.Write(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Write the log to the queue.
            </summary>
      <param name="entry">
      </param>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.NetMsmqLogProvider.Endpoint">
      <summary>
            The net.msmq address of the server to deliver messages.
            <remarks>The format is as follows: net.msmq://{physicalservername}/services/msmq.svc
            <para>The {physicalservername} is the server name, not the server alias and is different for each environment (test, beta, prod).</para></remarks></summary>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.NetMsmqLogProvider.Clients">
      <summary>
            The proxy client. Made public for testing and API configuration.
            </summary>
      <value>The clients.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.NetMsmqLogProvider.Binding">
      <summary>
            The NetMsmqBinding configuration.  Made public for testing and API configuration.
            </summary>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.NetMsmqLogProvider.LoggingLevel">
      <summary>
            Gets or sets the logging level.
            </summary>
      <value>The logging level.</value>
    </member>
    <member name="T:Rock.Framework.Logging.Provider.WebServiceLogProvider">
      <summary>
		This logging provider is the provider that centralizes logs for Smart Client applications (CARI, qFax, LARS, etc) 
		into one central place.  
		If you are logging with a Smart Client, this is the primary logging provider that should be used with Logger.  Each category specified 
		in the config needs to have this logging provider in order to centralize all of the application 
		logs to a central location.  Since categories can support more than one logging provider it is perfectly 
		ok to have an EventLogProvider or EmailLogProvider configured for the same category.  
	</summary>
      <remarks>
        <para>
          <h1>About This Provider</h1>
		To use this provider, only one property must be configured:  Endpoint (see <see cref="P:Rock.Framework.Logging.Provider.WebServiceLogProvider.Endpoint" />).
		The Endpoint property is an http:// Uri that defines where the provider will send log messages.
		Each environment has their own Endpoint, thus if you are in the test environment, use the test Endpoint.
		Only messages that are considered Production should be logged into the Production environment.
		
			<h2>Environment Configurations</h2>
			This provider is configured based on the <see cref="T:Rock.Framework.Environment" /> setting listed in the application's config file.  
			An endpoint property can be specified for the provider which
			will override the default settings for a given environment.  All configurations for environments can be found at <a href="http://core/home/configurations">http://core/home/configurations</a>
			but shouldn't be needed.
		</para>
      </remarks>
      <example>
        <code><![CDATA[		
    <rock.framework applicationId="1">
      <logger>
			<loggerConfigProvider>
				<provider type="Rock.Framework.Logging.Configuration.FileConfigProvider, Rock.Framework,
					Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848">
				</provider>
			</loggerConfigProvider>
			<loggerSettings loggingLevel="Debug" isLoggingEnabled="true">
				<formatters>
					<formatter name="default" template="-{message}-\n{exception}-\n{category}" />
				</formatters>
				<categories>
					<category name="Central">
						<providers>
							<provider type="Rock.Framework.Logging.Provider.WebServiceLogProvider, Rock.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848">
							<!-- THE PROPERTY MAPPER IS NO LONGER REQUIRED WITH THE NEW ENVIRONMENT OPTION -->
								<!--
								<propertyMapper>
									<mapper property="Endpoint" value="http://mwbackendtest/core/webservices/CoreLogger/Web.svc" />
								</propertyMapper>
								-->
							</provider>
						</providers>
					</category>
				</categories>
			</loggerSettings>
		</logger>
		</rock.framework>		
		]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.WebServiceLogProvider.#ctor">
      <summary>
            Initializes a new instance of the WebServiceLogProvider class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.Provider.WebServiceLogProvider.Write(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Write the log to the queue.
            </summary>
      <param name="entry">
      </param>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.WebServiceLogProvider.Endpoint">
      <summary>
            The http address of the server to deliver messages.
            <remarks>The format is as follows: http://{physicalservername}/services/Web.svc
            <para>The {physicalservername} is the server name, not the server alias and is different for each environment (test, beta, prod).</para></remarks></summary>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.WebServiceLogProvider.Clients">
      <summary>
            The proxy client. Made public for testing and API configuration.
            </summary>
      <value>The clients.</value>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.WebServiceLogProvider.Binding">
      <summary>
            The WSHttpBinding configuration.  Made public for testing and API configuration.
            </summary>
    </member>
    <member name="P:Rock.Framework.Logging.Provider.WebServiceLogProvider.LoggingLevel">
      <summary>
            Gets or sets the logging level.
            </summary>
      <value>The logging level.</value>
    </member>
    <member name="T:Rock.Framework.Logging.ThrottlingRuleEvaluator">
      <summary>
            Evaluates whether a log entry can be logged or not. The evaluation takes place in sync
            before the message is written and before any other Logger event.
            </summary>
    </member>
    <member name="T:Rock.Framework.Logging.ThrottlingRuleEvaluator.RuleTracker">
      <summary>
            Tracks throttling rule information.
            </summary>
    </member>
    <member name="M:Rock.Framework.Logging.ThrottlingRuleEvaluator.RuleTracker.#ctor(System.DateTime,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.ThrottlingRuleEvaluator.RuleTracker" /> structure.
            </summary>
      <param name="lastTimeLogged">The last time logged.</param>
      <param name="messagesSkippedSinceLastLog">The messages skipped since last log.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ThrottlingRuleEvaluator.#ctor(Rock.Framework.Logging.Configuration.ThrottlingRule)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Logging.ThrottlingRuleEvaluator" /> class.
            </summary>
      <param name="rule">The rule.</param>
    </member>
    <member name="M:Rock.Framework.Logging.ThrottlingRuleEvaluator.CanLog(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Determines whether this instance can log the specified log entry.
            </summary>
      <param name="logEntry">The log entry.</param>
      <returns>
        <c>true</c> if this instance can log the specified log entry; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Rock.Framework.Logging.ThrottlingRuleEvaluator.Rule">
      <summary>
            Gets or sets the throttling rule.
            </summary>
      <value>The rule.</value>
    </member>
    <member name="T:Rock.Framework.Offliner.Configuration.IProviderConfiguration">
      <summary>
            Summary
            </summary>
    </member>
    <member name="P:Rock.Framework.Offliner.Configuration.IProviderConfiguration.ProviderType">
      <summary>
            Gets or sets Type of the provider
            </summary>
    </member>
    <member name="P:Rock.Framework.Offliner.Configuration.IProviderConfiguration.Name">
      <summary>
            Gets or sets Name of the provider
            </summary>
    </member>
    <member name="T:Rock.Framework.Offliner.Configuration.ProviderConfiguration">
      <summary>
            Abstract class - base class for different providers (storage or connection detector providers)
            </summary>
    </member>
    <member name="M:Rock.Framework.Offliner.Configuration.ProviderConfiguration.SetProviderProperties(System.Object)">
      <summary>
            Mapping configuration parameters to Property of the supplied provider
            e.g.
            <propertyMapper><mapper property="CacheName" value="CORE" /></propertyMapper>
            In this case method will map value "CORE" to the property CacheName
            of the object provider
            </summary>
      <param name="provider">Configurable provider</param>
    </member>
    <member name="P:Rock.Framework.Offliner.Configuration.ProviderConfiguration.ProviderType">
      <summary>
            Gets or sets Type of the provider
            </summary>
    </member>
    <member name="P:Rock.Framework.Offliner.Configuration.ProviderConfiguration.Name">
      <summary>
            Gets or sets Name of the provider
            </summary>
    </member>
    <member name="T:Rock.Framework.Offliner.Configuration.ConnectionDetectorProviderConfiguration">
      <summary>
            TODO: Update summary.
            </summary>
    </member>
    <member name="M:Rock.Framework.Offliner.Configuration.ConnectionDetectorProviderConfiguration.GetMappedValue(System.String)">
      <summary>
            Returns mapped value from configuration file
            </summary>
      <param name="propertyName">Mapped property Name</param>
      <returns>Mapped property value</returns>
    </member>
    <member name="P:Rock.Framework.Offliner.Configuration.ConnectionDetectorProviderConfiguration.PollingRate">
      <summary>
            Gets or sets detection polling rate
            </summary>
    </member>
    <member name="P:Rock.Framework.Offliner.Configuration.ConnectionDetectorProviderConfiguration.SendErrorNotificationsAfter">
      <summary>
            Gets or sets Time span in milliseconds. If checking resource been down longer than this value,
            Exception will be generated and send to Logger. In case if this setting is missing or set to 0,
            Exception will not be generated.
            </summary>
    </member>
    <member name="P:Rock.Framework.Offliner.Configuration.ConnectionDetectorProviderConfiguration.RepeatErrorNotificationsAfter">
      <summary>
            Gets or sets Time span in milliseconds. After initially reported to Logger Exception in case if resource 
            been down longer than time span set in SendErrorNotificationsAfter setting, detector will continue 
            to report Error every time span referenced in RepeatErrorNotificationsAfter. In case if RepeatErrorNotificationsAfter
            is missing or set to 0, detector will use value of SendErrorNotificationsAfter.
            </summary>
    </member>
    <member name="T:Rock.Framework.Offliner.Configuration.ITemporaryStorageProviderConfiguration">
      <summary>
            Summary
            </summary>
    </member>
    <member name="P:Rock.Framework.Offliner.Configuration.ITemporaryStorageProviderConfiguration.Encrypted">
      <summary>
            Gets or sets property forcing encryption of the 
            serialized content prior to storing  
            </summary>
    </member>
    <member name="P:Rock.Framework.Offliner.Configuration.ITemporaryStorageProviderConfiguration.Signed">
      <summary>
            Gets or sets property forcing signing encrypted Content prior to storing
            </summary>
    </member>
    <member name="P:Rock.Framework.Offliner.Configuration.ITemporaryStorageProviderConfiguration.CryptoProvider">
      <summary>
            Gets or sets name of the Crypto provider
            </summary>
    </member>
    <member name="T:Rock.Framework.Offliner.Configuration.OfflinerConfiguration">
      <summary>
            TODO: Update summary.
            </summary>
    </member>
    <member name="M:Rock.Framework.Offliner.Configuration.OfflinerConfiguration.#ctor(Rock.Framework.Offliner.Configuration.OfflinerSectionGroup)">
      <summary>
            Summary
            </summary>
      <param name="offlinerconfiguration">
      </param>
    </member>
    <member name="M:Rock.Framework.Offliner.Configuration.OfflinerConfiguration.GetConnectionDetectorConfiguration(System.String)">
      <summary>
            Returns Connection Detector provider configuration by name
            </summary>
      <param name="providerName">Name of the provider</param>
      <returns>Connection Detector Provider configuration</returns>
    </member>
    <member name="P:Rock.Framework.Offliner.Configuration.OfflinerConfiguration.TemporaryStorageProviderConfiguration">
      <summary>
            Gets or sets Temporary Storage provider configuration 
            </summary>
    </member>
    <member name="T:Rock.Framework.Offliner.Configuration.OfflinerConfigurationFactory">
      <summary>
            TODO: Update summary.
            </summary>
    </member>
    <member name="M:Rock.Framework.Offliner.Configuration.OfflinerConfigurationFactory.GetConfiguration">
      <summary>
            Returns Offliner configuration object
            </summary>
      <returns>Offliner configuration</returns>
    </member>
    <member name="T:Rock.Framework.Offliner.Configuration.ConnectionDetectorSection">
      <summary>
            TODO: Update summary.
            </summary>
    </member>
    <member name="T:Rock.Framework.Offliner.Configuration.ConnectionProviderElement">
      <summary>
            TODO: Update summary.
            </summary>
    </member>
    <member name="T:Rock.Framework.Offliner.Configuration.OfflinerSectionGroup">
      <summary>
            TODO: Update summary.
            </summary>
    </member>
    <member name="T:Rock.Framework.Offliner.Configuration.OfflinerStorageSection">
      <summary>
            TODO: Update summary.
            </summary>
    </member>
    <member name="T:Rock.Framework.Offliner.Configuration.StorageProviderElement">
      <summary>
            TODO: Update summary.
            </summary>
    </member>
    <member name="T:Rock.Framework.Offliner.Configuration.TemporaryStorageProviderConfiguration">
      <summary>
            TODO: Update summary.
            </summary>
    </member>
    <member name="P:Rock.Framework.Offliner.Configuration.TemporaryStorageProviderConfiguration.Encrypted">
      <summary>
            Gets or sets property forcing encryption of the 
            serialized content prior to storing  
            </summary>
    </member>
    <member name="P:Rock.Framework.Offliner.Configuration.TemporaryStorageProviderConfiguration.Signed">
      <summary>
            Gets or sets property forcing signing encrypted Content prior to storing
            </summary>
    </member>
    <member name="P:Rock.Framework.Offliner.Configuration.TemporaryStorageProviderConfiguration.CryptoProvider">
      <summary>
            Gets or sets name of the Crypto provider
            </summary>
    </member>
    <member name="T:Rock.Framework.Services.CSAHolidayDates">
      <summary>
            Holiday date as peresented by CSA (Central Storage Area)
            </summary>
    </member>
    <member name="P:Rock.Framework.Services.CSAHolidayDates.HolidayId">
      <remarks />
    </member>
    <member name="P:Rock.Framework.Services.CSAHolidayDates.HolidayName">
      <remarks />
    </member>
    <member name="P:Rock.Framework.Services.CSAHolidayDates.HolidayDate">
      <remarks />
    </member>
    <member name="P:Rock.Framework.Services.CSAHolidayDates.NextBusinessDayDate">
      <remarks />
    </member>
    <member name="P:Rock.Framework.Services.CSAHolidayDates.IsActive">
      <remarks />
    </member>
    <member name="T:Rock.Framework.Services.CsaServiceException">
      <summary>
            CsaServiceException
            </summary>
    </member>
    <member name="M:Rock.Framework.Services.CsaServiceException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Services.CsaServiceException" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Services.CsaServiceException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Services.CsaServiceException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Services.CsaServiceException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Services.CsaServiceException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Rock.Framework.Services.CsaServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Services.CsaServiceException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:Rock.Framework.Settings.Configuration.AuthorizerConfiguration">
      <summary>
            Authorizer configuration class
            </summary>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.AuthorizerConfiguration.ConnectionStringName">
      <summary>
            Gets or sets the name of the connection string for the database that stores the Authorizer data.
            </summary>
      <value>The name of the connection string.</value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.AuthorizerConfiguration.ADAccountName">
      <summary>
            Gets or sets the name of the AD account to use to create the AD Groups for applications for security.
            If not specified the current account will be used.
            </summary>
      <value>The name of the AD account.</value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.AuthorizerConfiguration.ADAccountPassword">
      <summary>
            Gets or sets the AD account password.
            </summary>
      <value>The AD account password.</value>
    </member>
    <member name="T:Rock.Framework.Settings.Configuration.IDirectoryServicesConfiguration">
      <summary>
            Interface for Directory services configuration class
            </summary>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.IDirectoryServicesConfiguration.LdapServer">
      <summary>
            Gets or sets the LDAP server.
            </summary>
      <value>The LDAP server in the format of LDAP://server.name.</value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.IDirectoryServicesConfiguration.UserName">
      <summary>
            Gets or sets the user name used to authenticate to AD. 
            Used only when an LdapServer is specified.
            </summary>
      <value>
            The name of the user.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.IDirectoryServicesConfiguration.Password">
      <summary>
            Gets or sets the password used to authenticate to AD.
            Used only when an LdapServer is specified.
            </summary>
      <value>
            The password.
            </value>
    </member>
    <member name="T:Rock.Framework.Settings.Configuration.DirectoryServicesConfiguration">
      <summary>
            Directory services configuration class
            </summary>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.DirectoryServicesConfiguration.LdapServer">
      <summary>
            Gets or sets the LDAP server.
            </summary>
      <value>The LDAP server in the format of LDAP://server.name.</value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.DirectoryServicesConfiguration.UserName">
      <summary>
            Gets or sets the user name used to authenticate to AD. 
            Used only when an LdapServer is specified.
            </summary>
      <value>
            The name of the user.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.DirectoryServicesConfiguration.Password">
      <summary>
            Gets or sets the password used to authenticate to AD.
            Used only when an LdapServer is specified.
            </summary>
      <value>
            The password.
            </value>
    </member>
    <member name="T:Rock.Framework.Settings.Configuration.MessagingConfiguration">
      <summary>
            Provides the collection of Sonic settings.
            </summary>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.MessagingConfiguration.SonicSettings">
      <summary>
            Gets the sonic settings.
            </summary>
    </member>
    <member name="T:Rock.Framework.Settings.Configuration.IConfigProvider">
      <summary>
            Loads configuration from a specific provider.
            </summary>
    </member>
    <member name="M:Rock.Framework.Settings.Configuration.IConfigProvider.GetConfiguration">
      <summary>
            Gets the configuration.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicConfigurationElementCollection.Item(System.String)">
      <summary>
            Gets or sets a property, attribute, or child element of this configuration element.
            </summary>
      <returns>
            The specified property, attribute, or child element
              </returns>
    </member>
    <member name="T:Rock.Framework.Settings.Configuration.SettingsConfiguration">
      <summary>
            Settings configuration class
            </summary>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SettingsConfiguration.Environment">
      <summary>
            Gets or sets the environment.
            </summary>
      <value>The environment.</value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SettingsConfiguration.ApplicationId">
      <summary>
             Gets or sets the applicationId.
            </summary>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SettingsConfiguration.CsaServiceAddress">
      <summary>
            Gets or sets the csa service address.
            </summary>
      <value>The csa service address.</value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SettingsConfiguration.Authorizer">
      <summary>
            Gets or sets the authorizer configuration.
            </summary>
      <value>The authorizer.</value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SettingsConfiguration.Stats">
      <summary>
            Gets or sets the stats.
            </summary>
      <value>
            The stats.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SettingsConfiguration.DirectoryServices">
      <summary>
            Gets or sets the directory services configuration.
            </summary>
      <value>The directory services.</value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SettingsConfiguration.Messaging">
      <summary>
            Gets or sets the messaging.
            </summary>
      <value>
            The messaging.
            </value>
    </member>
    <member name="T:Rock.Framework.Settings.Configuration.SettingsConfigurationFactory">
      <summary>
            Settings configuration factory
            </summary>
    </member>
    <member name="M:Rock.Framework.Settings.Configuration.SettingsConfigurationFactory.GetConfiguration">
      <summary>
            Gets the configuration.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Rock.Framework.Settings.Configuration.SonicSetting">
      <summary>
            Sonic settings. This class should not be used it is merely for configuration purposes of the Framework.
            </summary>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.AcknowledgeMode">
      <summary>
            Gets or sets the acknowledge mode.
            </summary>
      <value>
            The acknowledge mode.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.BrokerServerAddresses">
      <summary>
            Gets or sets the broker server addresses.
            </summary>
      <value>
            The broker server addresses.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.ClientId">
      <summary>
            Gets or sets the client id.
            </summary>
      <value>
            The client id.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.Destination">
      <summary>
            Gets the destination.
            </summary>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.DurableSubscriber">
      <summary>
            Gets or sets the durable subscriber.
            </summary>
      <value>
            The durable subscriber.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.DurableSubscriberName">
      <summary>
            Gets or sets the name of the durable subscriber.
            </summary>
      <value>
            The name of the durable subscriber.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.DurableMessageOrder">
      <summary>
            Gets or sets the durable message order.
            </summary>
      <value>
            The durable message order.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.FlowControlDisabled">
      <summary>
            Gets or sets a value indicating whether flow control is disabled.
            </summary>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.FlowToDisk">
      <summary>
            Gets or sets the flow to disk.
            </summary>
      <value>
            The flow to disk.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.FaultTolerantReconnectTimeout">
      <summary>
            Gets or sets the fault tolerant reconnect timeout.
            </summary>
      <value>
            The fault tolerant reconnect timeout.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.InitialConnectTimeout">
      <summary>
            Gets or sets the initial connect timeout.
            </summary>
      <value>
            The initial connect timeout.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.IsFaultTolerantConnection">
      <summary>
            Gets or sets the is fault tolerant connection.
            </summary>
      <value>
            The is fault tolerant connection.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.IsLoadBalanced">
      <summary>
            Gets or sets the is load balanced.
            </summary>
      <value>
            The is load balanced.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.MonitorInterval">
      <summary>
            Gets or sets the monitor interval.
            </summary>
      <value>
            The monitor interval.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.UserName">
      <summary>
            Gets or sets the name of the user.
            </summary>
      <value>
            The name of the user.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.Password">
      <summary>
            Gets or sets the password.
            </summary>
      <value>
            The password.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.PersistentMessageDelivery">
      <summary>
            Gets or sets the persistent message delivery.
            </summary>
      <value>
            The persistent message delivery.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.PreFetchCount">
      <summary>
            Gets or sets the pre fetch count.
            </summary>
      <value>
            The pre fetch count.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.PreFetchThreshold">
      <summary>
            Gets or sets the pre fetch threshold.
            </summary>
      <value>
            The pre fetch threshold.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.SelectorAtBroker">
      <summary>
            Gets or sets the selector at broker.
            </summary>
      <value>
            The selector at broker.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.ServiceUrl">
      <summary>
            Gets or sets the service URL.
            </summary>
      <value>
            The service URL.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.Sequential">
      <summary>
            Gets or sets the sequential.
            </summary>
      <value>
            The sequential.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.SonicDeliveryMode">
      <summary>
            Gets or sets the sonic delivery mode.
            </summary>
      <value>
            The sonic delivery mode.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.SonicSetting.Transacted">
      <summary>
            Gets or sets the transacted.
            </summary>
      <value>
            The transacted.
            </value>
    </member>
    <member name="T:Rock.Framework.Settings.Configuration.StatsConfiguration">
      <summary>
            Stats configuration class
            </summary>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.StatsConfiguration.BufferingEnabled">
      <summary>
            BufferingEnabled
            </summary>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.StatsConfiguration.BatchSize">
      <summary>
            BatchSize
            </summary>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.StatsConfiguration.IntervalBetweenPosts">
      <summary>
            IntervalBetweenPosts
            </summary>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.StatsConfiguration.Enabled">
      <summary>
            Gets or sets a value indicating whether [enabled].
            </summary>
      <value>
        <c>true</c> if [enabled]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.StatsConfiguration.Retries">
      <summary>
            Gets or sets the retries.
            </summary>
      <value>
            The retries.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.StatsConfiguration.IntervalBetweenRetries">
      <summary>
            Gets or sets the interval between retries.
            </summary>
      <value>
            The interval between retries.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.StatsConfiguration.MaxDegreeOfParallelism">
      <summary>
            Gets or sets the maximum degree of parallelism.
            </summary>
      <value>
            The maximum degree of parallelism.
            </value>
    </member>
    <member name="P:Rock.Framework.Settings.Configuration.StatsConfiguration.BufferCapacity">
      <summary>
            Gets or sets the buffer capacity.
            </summary>
      <value>
            The buffer capacity.
            </value>
    </member>
    <member name="T:Rock.Framework.Environment">
      <summary>
            Gets the environment settings
            </summary>
      <remarks>
        <para>
          <h1>Environment Configuration</h1>
            To keep track of different environments for your application and have the Framework auto configure 
            certain settings for you add the following to your application config file.  As 
            of the 1.1.0.0 release of the framework this is not a required configuration option, however in version 1.2.0.0 it 
            will be required.  
            </para>
        <para>
          <h2>Simplified Logger Configuration</h2>
            By setting the environment in the config file logging providers become easier to configure. Specifically 
            the <see cref="T:Rock.Framework.Logging.Provider.NetMsmqLogProvider" /> and the <see cref="T:Rock.Framework.Logging.Provider.WebServiceLogProvider" />.  
            These providers have various endpoints that need to be configured per environment. However, using the environment setting in the config file 
            will allow these providers to auto configure themselves as well as auto load balance how logs are stored.  See the detailed 
            documentation for these providers for further explanation.  
            </para>
      </remarks>
      <example>
        <code><![CDATA[ 
             <configSections>
               <section name="rock.framework" type="Rock.Framework.Settings.Configuration.RockFrameworkSection, Rock.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848"/>
            </configSections>
            <rock.framework applicationId="1">
               <environment name="Dev"/>
               <authorizer connectionStringName="Authorizer-SQL_Server_Name" />
             </rock.framework>
            <connectionStrings>
               <add name="Authorizer-SQL_Server_Name" providerName="System.Data.SqlClient" connectionString="Data Source=SQL_Server_Name;Initial Catalog=Authorizer;Persist Security Info=True;Integrated Security=True;"/>
            </connectionStrings>
            ]]></code>
        <code>
             if (Environment.Current == EnvironmentSetting.Dev)
             {
                 alertEmail = "someone@ql.com";
                 creditServiceProxy.Url = "http://localhost:1207/MyService.asmx";
             }
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Environment.Current">
      <summary>
            Gets the current environment.
            </summary>
      <value>The current environment.</value>
    </member>
    <member name="P:Rock.Framework.Environment.FrameworkVersion">
      <summary>
            Gets the version of the current referenced Rock.Framework assembly
            </summary>
      <value>The framework version. (example 1.1.0.)</value>
    </member>
    <member name="P:Rock.Framework.Environment.FrameworkFileVersion">
      <summary>
            Gets the framework file version.
            </summary>
      <value>The framework file version. (example 1.1.65.8209)</value>
    </member>
    <member name="P:Rock.Framework.Environment.ApplicationId">
      <summary>
            Gets the application id of the current app as set in the loggerSettings.
            </summary>
      <value>The application id.</value>
    </member>
    <member name="T:Rock.Framework.EnvironmentSetting">
      <summary>
            The environment settings.
            </summary>
    </member>
    <member name="F:Rock.Framework.EnvironmentSetting.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Rock.Framework.EnvironmentSetting.Dev">
      <summary>
            Development
            </summary>
    </member>
    <member name="F:Rock.Framework.EnvironmentSetting.Test">
      <summary>
            Test
            </summary>
    </member>
    <member name="F:Rock.Framework.EnvironmentSetting.Beta">
      <summary>
            Beta
            </summary>
    </member>
    <member name="F:Rock.Framework.EnvironmentSetting.Prod">
      <summary>
            Production
            </summary>
    </member>
    <member name="T:Rock.Framework.Compression.Zip">
      <summary>
		Allows to compress files and/or entire directory structures in zip archives.
	</summary>
      <remarks>
        <para>
          <h2>About Zip compression</h2>
			Zip class simplifies the compression of files and directories in zip archives.

			<h3>Features</h3>
			The following features are supported by the Zip class.
			<h4>Adding individual files</h4>
			You can add invividual files to the archive and optionally specify the relative
			path where the file must be positioned in the archive. If the archive file already
			contains the file then it can be refreshed with the newer version.

			<h4>Adding directories</h4>
			This is a powerfull feature that will allow entire directories to be added 
			to the archive and allows applying of filters.			
		</para>
      </remarks>
      <example>
        <para>
          <h3>Adding a file to the archive</h3>
        </para>
        <code><![CDATA[
				 Zip archive = new Zip();
			     archive.Add("myFile.txt");
			     archive.Compress("myArchive.zip");
				]]></code>
        <para>
          <h3>Adding a file to the archive and specify the relative path 
			where in the compressed package this should appear. 
			The relative path MUST start with "\" sign and it should contain the file name.
		    The file name in the relative path is not required to match the original file name.
			</h3>
        </para>
        <code><![CDATA[
				 Zip archive = new Zip();
			     archive.Add("C:\folder1\myFile.txt", @"\folder1\something.txt");
			     archive.Compress("myArchive.zip");
				]]></code>
        <para>
          <h3>Adding a directory to the archive. In this example the entire content of the directory
			including all sub-directories will be included.</h3>
        </para>
        <code><![CDATA[
				 Zip archive = new Zip();
			     archive.AddDirectory("C:\folder1");
			     archive.Compress("myArchive.zip");
				]]></code>
        <para>
          <h3>
				Adding a directory to the archive without the sub-directories.
			</h3>
        </para>
        <code><![CDATA[
				 Zip archive = new Zip();
			     archive.AddDirectory("C:\folder1", options:SearchOption.TopDirectoryOnly);
			     archive.Compress("myArchive.zip");
				]]></code>
        <para>
          <h3>Compressing into an existing zip file.</h3>
        </para>
        <code><![CDATA[
				 Zip archive = new Zip();
			     archive.Add("myFile.txt");
			     archive.Compress("myArchive.zip", append:true);
				]]></code>
        <para>
          <h3>Compressing into an existing zip file and refreshing the file if it already exists.</h3>
        </para>
        <code><![CDATA[
				 Zip archive = new Zip();
			     archive.Add("myFile.txt");
			     archive.Compress("myArchive.zip", append:true, refreshExisting:true);
				]]></code>
      </example>
    </member>
    <member name="F:Rock.Framework.Compression.Zip._mimeTypeLookup">
      <summary>
            Look up of file type extenion to MIME type
            </summary>
    </member>
    <member name="M:Rock.Framework.Compression.Zip.Add(System.String)">
      <summary>
            Add new file to be compressed. The file will be added to the root of the archive.
            </summary>
      <param name="fileFullPath">The full path of the file to compress.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="fileFullPath" /> is null </exception>
    </member>
    <member name="M:Rock.Framework.Compression.Zip.Add(System.String,System.String)">
      <summary>
            Add new file to be compressed
            </summary>
      <param name="fileFullPath">The full path of the file to compress.</param>
      <param name="pathInZip">Where in the compressed package this should appear.
            The URI must be relative and the path separator must be "\" 
            i.e. \RelativeDirectory\FileName.extesion
            i.e. \something.txt
            </param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="fileFullPath" /> is null </exception>
      <exception cref="T:System.ArgumentNullException">When <paramref name="pathInZip" /> is null </exception>
      <exception cref="T:System.ArgumentException">When <paramref name="pathInZip" /> has already been added</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="fileFullPath" /> has already been added</exception>
      <exception cref="T:System.UriFormatException">When <paramref name="pathInZip" /> is not relative </exception>
    </member>
    <member name="M:Rock.Framework.Compression.Zip.Add(System.IO.FileInfo,System.Uri)">
      <summary>
            Add new file to be compressed
            </summary>
      <param name="file">File to compress, must exist.</param>
      <param name="pathInZip">Where in the compressed package this should appear.
            The URI must be relative and the path separator must be "\" 
            i.e. \RelativeDirectory\FileName.extesion
            i.e. \something.txt
            </param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="file" /> is null </exception>
      <exception cref="T:System.ArgumentNullException">When <paramref name="pathInZip" /> is null </exception>
      <exception cref="T:System.ArgumentException">When <paramref name="pathInZip" /> has already been added</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="file" /> has already been added</exception>
      <exception cref="T:System.UriFormatException">When <paramref name="pathInZip" /> is not relative </exception>
    </member>
    <member name="M:Rock.Framework.Compression.Zip.AddDirectory(System.String,System.String,System.IO.SearchOption)">
      <summary>
            Add Directory to be compressed, the file structure will be relative the deepest directory.  
            i.e. c:\directory all files in temp would be added to the root and c:\directory\subdirectory would added to the zip as /subdirectory/filename.extension
            </summary>
      <param name="directoryPath">Directory to compress.</param>
      <param name="search">Only add files that match this pattern i.e. *.jpg  all jpg files</param>
      <param name="options">Just this directory or add the files in the sub-directories as well</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="directoryPath" /> is null </exception>
    </member>
    <member name="M:Rock.Framework.Compression.Zip.AddDirectory(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
      <summary>
            Add Directory to be compressed, the file structure will be relative the deepest directory.  
            i.e. c:\directory all files in temp would be added to the root and c:\directory\subdirectory would added to the zip as \subdirectory\filename.extension
            </summary>
      <param name="directory">Directory to compress.</param>
      <param name="search">Only add files that match this pattern i.e. *.jpg  all jpg files</param>
      <param name="options">Just this directory or add the files in the sub-directories as well</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="directory" /> is null </exception>
    </member>
    <member name="M:Rock.Framework.Compression.Zip.Remove(System.String)">
      <summary>
            Remove a file from being compressed, if compress has been called it will not remove it from the compressed file.
            Refreshing the compressed file does not remove the file from the compressed file.
            </summary>
      <param name="file">File to remove</param>
      <returns>Success if the file was removed, otherwise false. If the file is not in the set to be compressed then false will be removed.</returns>
    </member>
    <member name="M:Rock.Framework.Compression.Zip.Remove(System.IO.FileInfo)">
      <summary>
            Remove a file from being compressed, if compress has been called it will not remove it from the compressed file.
            Refreshing the compressed file does not remove the file from the compressed file.
            </summary>
      <param name="file">File to remove</param>
      <returns>Success if the file was removed, otherwise false. If the file is not in the set to be compressed then false will be removed.</returns>
    </member>
    <member name="M:Rock.Framework.Compression.Zip.Compress(System.String,System.Boolean,System.Boolean)">
      <summary>
            Compress the files to the destination file
            </summary>
      <param name="destination">File full path where to create and put the files in.</param>
      <param name="append">If the file exists can new files be added to it</param>
      <param name="refreshExisting">If the file exists and contains the uri part already can the file be updated with the current version</param>
      <exception cref="T:System.InvalidOperationException">When there are no files to compress</exception>
    </member>
    <member name="M:Rock.Framework.Compression.Zip.Compress(System.IO.FileInfo,System.Boolean,System.Boolean)">
      <summary>
            Compress the files to the destination file
            </summary>
      <param name="destination">File to create and put the files in.</param>
      <param name="append">If the file exists can new files be added to it</param>
      <param name="refreshExisting">If the file exists and contains the uri part already can the file be updated with the current version</param>
      <exception cref="T:System.InvalidOperationException">When there are no files to compress</exception>
    </member>
    <member name="M:Rock.Framework.Compression.Zip.CompressFile(System.Boolean,System.Boolean,System.Boolean,System.IO.Packaging.Package,System.Collections.Generic.KeyValuePair{System.IO.FileInfo,System.Uri})">
      <summary>
            Add file to the compress file destination if allowed.
            </summary>
    </member>
    <member name="M:Rock.Framework.Compression.Zip.CreatePart(System.Boolean,System.Boolean,System.Boolean,System.IO.Packaging.Package,System.Collections.Generic.KeyValuePair{System.IO.FileInfo,System.Uri})">
      <summary>
            Get or Create a Package Part based on the append, refreshexisting options and whether fileAlreadyExisted.
            If refreshing and it exists in the package then get that part.
            If the file didn't exist create a new part.
            If the appending and it doesn't exist in the package already create a new part.
            </summary>
      <returns>PackagePart if one should be created or retrieved otherwise null.</returns>
    </member>
    <member name="M:Rock.Framework.Compression.Zip.CopyStream(System.IO.Stream,System.IO.Stream)">
      <summary>
              Copies data from a source stream to a target stream.</summary>
      <param name="source">
              The source stream to copy from.</param>
      <param name="target">
              The destination stream to copy to.</param>
    </member>
    <member name="M:Rock.Framework.Compression.Zip.GetMimeType(System.IO.FileInfo)">
      <summary>
            Given a file name, extract the extension and if it exists in <see cref="F:Rock.Framework.Compression.Zip._mimeTypeLookup" /> return the associated MIME type, otherwise return Octet.
            </summary>
      <param name="item">File name</param>
      <returns>File MIME type association</returns>
    </member>
    <member name="T:Rock.Framework.Util.Collections.AnonymousUtilities">
      <summary>
            Utility methods for anonymous types
            </summary>
    </member>
    <member name="M:Rock.Framework.Util.Collections.AnonymousUtilities.ConvertToIDictionary``1(System.Object)">
      <summary>
            Converts an anonymous type to a genetic dictionary of string and T.
            </summary>
      <typeparam name="T">the type of the value used for dictionary</typeparam>
      <param name="anonymousObject">The anonymous object.</param>
      <returns>IDictionary</returns>
    </member>
    <member name="T:Rock.Framework.Collections.EnumerableToDataTableConverter`1">
      <summary>
            Converts any list or collection of objects that implement IEnumerable into a
            DataTable.
            </summary>
      <example>
        <code>
            List<![CDATA[<PersonHelper>]]> persons = new List<![CDATA[<PersonHelper>]]>();
            persons.Add(new PersonHelper { Email = "bob1@bob.com", FirstName = "Bob1", LastName = "Smith1" });
            persons.Add(new PersonHelper { Email = "bob2@bob.com", FirstName = "Bob2", LastName = "Smith2" });
            persons.Add(new PersonHelper { Email = "bob3@bob.com", FirstName = "Bob3", LastName = "Smith3" });
            persons.Add(new PersonHelper { Email = "bob4@bob.com", FirstName = "Bob4", LastName = "Smith4" });
            persons.Add(new PersonHelper { Email = "bob5@bob.com", FirstName = "Bob5", LastName = "Smith5" });
            DataTable dt = persons.ToDataTable("DataTableName");
            </code>
      </example>
      <typeparam name="T">The type of the IEnumerable collection to be converted.</typeparam>
    </member>
    <member name="F:Rock.Framework.Collections.EnumerableToDataTableConverter`1._collection">
      <summary>
            The collection being coverted.
            </summary>
    </member>
    <member name="F:Rock.Framework.Collections.EnumerableToDataTableConverter`1._dataTableName">
      <summary>
            The name of the data table.
            </summary>
    </member>
    <member name="F:Rock.Framework.Collections.EnumerableToDataTableConverter`1._dt">
      <summary>
            DataTable
            </summary>
    </member>
    <member name="M:Rock.Framework.Collections.EnumerableToDataTableConverter`1.#ctor(`0,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Collections.EnumerableToDataTableConverter`1" /> class.
            </summary>
      <param name="list">The list or collection that implements IEnumerable.</param>
      <param name="dataTableName">Name of the data table.</param>
    </member>
    <member name="M:Rock.Framework.Collections.EnumerableToDataTableConverter`1.Convert">
      <summary>
            Converts this instance into a DataTable.
            </summary>
      <returns>DataTable</returns>
    </member>
    <member name="M:Rock.Framework.Collections.EnumerableToDataTableConverter`1.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Rock.Framework.Collections.EnumerableToDataTableConverter`1.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Rock.Framework.Collections.EnumerableToDataTableConverter`1" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="P:Rock.Framework.Collections.EnumerableToDataTableConverter`1.PropertyCollection">
      <summary>
            Gets the property collection.
            </summary>
      <value>The property collection.</value>
    </member>
    <member name="T:Rock.Framework.Dates.CompanyHolidays">
      <summary>
            Static class for getting Company Holidays from the CSA (centralized storage area) service.
            </summary>
      <exception cref="T:Rock.Framework.Services.CsaServiceException">The CSA service is not online or not responding.</exception>
    </member>
    <member name="F:Rock.Framework.Dates.CompanyHolidays._service">
      <summary>
            The CSA Webservice Soap Client
            </summary>
    </member>
    <member name="F:Rock.Framework.Dates.CompanyHolidays._holidays">
      <summary>
            The read only collection of holidays
            </summary>
    </member>
    <member name="M:Rock.Framework.Dates.CompanyHolidays.GetHolidays(System.Int32)">
      <summary>
            Gets all company holidays for a given year
            </summary>
      <param name="year">The year</param>
      <returns>A read only collection of holidays</returns>
      <exception cref="T:Rock.Framework.Services.CsaServiceException">The CSA service is not online or not responding.</exception>
    </member>
    <member name="M:Rock.Framework.Dates.CompanyHolidays.GetHolidays(System.DateTime,System.DateTime)">
      <summary>
            Gets all company holidays for a given date range
            </summary>
      <param name="startDate">The range start date</param>
      <param name="endDate">The range end date</param>
      <returns>A read only collection of holidays</returns>
      <exception cref="T:Rock.Framework.Services.CsaServiceException">The CSA service is not online or not responding.</exception>
    </member>
    <member name="M:Rock.Framework.Dates.CompanyHolidays.ConvertCsaHolidayArrayToHolidayReadOnlyCollection(Rock.Framework.Services.CSAHolidayDates[])">
      <summary>
            Converts an array of CSA hoildays to a read only collection of holidays
            </summary>
      <param name="csaHolidays">
      </param>
      <returns>
      </returns>
      <exception cref="T:Rock.Framework.Services.CsaServiceException">The CSA service is not online or not responding.</exception>
    </member>
    <member name="P:Rock.Framework.Dates.CompanyHolidays.AllHolidays">
      <summary>
            All company holidays in the CSA database
            </summary>
    </member>
    <member name="T:Rock.Framework.Dates.DateTimePrecise">
      <summary>
            A high precision DateTime that supplements the DateTime.Now with the information from Stopwatch
            giving a current time that has a 16 millisecond accuracy and a 100 nanosecond precision.
            </summary>
    </member>
    <member name="P:Rock.Framework.Dates.DateTimePrecise.UtcNow">
      <summary>
            Gets the UTC now.
            </summary>
      <value>The UTC now.</value>
            NOTE: there are issues with using this method in a Virtual Machine
        </member>
    <member name="P:Rock.Framework.Dates.DateTimePrecise.Now">
      <summary>
            Returns the current date and time.
            </summary>
      <value>current date and time.</value>
            NOTE: there are issues with using this method in a Virtual Machine
        </member>
    <member name="P:Rock.Framework.Dates.DateTimePrecise.NowUnique">
      <summary>
            Returns a date time that is unique and will avoid the 16 millisecond precision issue with DateTime.Now.
            Useful in the situation where the events that fire in a close loop have to be ordered based on the time stamp
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Rock.Framework.Dates.Holiday">
      <summary>
            Represents a company holiday
            </summary>
    </member>
    <member name="P:Rock.Framework.Dates.Holiday.HolidayId">
      <summary>
            Gets or sets the holiday id.
            </summary>
      <value>The holiday id.</value>
    </member>
    <member name="P:Rock.Framework.Dates.Holiday.Name">
      <summary>
            Gets or sets the name of the holiday.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Rock.Framework.Dates.Holiday.Date">
      <summary>
            Gets or sets the date of the holiday.
            </summary>
      <value>The date.</value>
    </member>
    <member name="P:Rock.Framework.Dates.Holiday.NextBusinessDay">
      <summary>
            Gets or sets the next business day.
            </summary>
      <value>The next business day.</value>
    </member>
    <member name="P:Rock.Framework.Dates.Holiday.IsActive">
      <summary>
            Gets or sets a value indicating whether this holiday is active.
            </summary>
      <value>
        <c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Rock.Framework.Encryption.AsymmetricEncryption">
      <summary>
            RSA asymmetric encryption static class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Encryption.AsymmetricEncryption.EncryptString(System.String,System.Int32,System.String)">
      <summary>
            Encrypts a string using the provided RSA public key.
            </summary>
      <param name="inputValue">The input string.</param>
      <param name="keySize">Size of the key.</param>
      <param name="publicKey">The public key.</param>
      <returns>encrypted string</returns>
    </member>
    <member name="M:Rock.Framework.Encryption.AsymmetricEncryption.DecryptString(System.String,System.Int32,System.String)">
      <summary>
            Decrypts a string using the provided RSA public key.
            </summary>
      <param name="inputValue">The input string.</param>
      <param name="keySize">Size of the key.</param>
      <param name="privateKey">The private key.</param>
      <returns>decrypted string</returns>
    </member>
    <member name="M:Rock.Framework.Encryption.AsymmetricEncryption.GenerateKeys(System.Int32,System.String@,System.String@)">
      <summary>
            Generates the RSA public and private keys.
            </summary>
      <remarks>
            Keys must be protected and permanently stored since any data encrypted with keys is required to decrypt the data.
            </remarks>
      <param name="keySize">Size of the key.</param>
      <param name="publicKey">The public key.</param>
      <param name="privateKey">The private key.</param>
    </member>
    <member name="T:Rock.Framework.Enumerations.EnumUtilities">
      <summary>
            Utility methods for enumerations
            </summary>
    </member>
    <member name="M:Rock.Framework.Enumerations.EnumUtilities.ToBindableList(System.Type)">
      <summary>
             Create a List based on the enum values that can be used to bind.
             </summary>
      <example>
        <code><![CDATA[
                List<KeyValuePair<int, string>> daysOfWeek = EnumUtilities.ToBindableList( typeof(DayOfWeek));
                ]]></code>
      </example>
      <param name="enumType">Type of the enum.</param>
      <returns>List with int as key and enum string as value.</returns>
    </member>
    <member name="T:Rock.Framework.Msmq.Queue">
      <summary>
            Provides common tasks for dealing with Msmq.
            </summary>
    </member>
    <member name="M:Rock.Framework.Msmq.Queue.GetOrCreatePrivateQueue(System.String,System.Boolean)">
      <summary>
            Gets the private queue by name or creates the private queue if it doesn't exist.
            </summary>
      <param name="queueName">Name of the queue.</param>
      <param name="transactional">if set to <c>true</c> [transactional].</param>
      <returns>
        <see cref="T:System.Messaging.MessageQueue" />
      </returns>
    </member>
    <member name="M:Rock.Framework.Msmq.Queue.GetPrivateQueueByName(System.String)">
      <summary>
            Gets a private queue by name.
            </summary>
      <param name="queueName">Name of the queue.</param>
      <returns>
        <see cref="T:System.Messaging.MessageQueue" />
      </returns>
    </member>
    <member name="T:Rock.Framework.Names.INameFormatter">
      <summary>
            Interface for Name Formatter
            </summary>
    </member>
    <member name="P:Rock.Framework.Names.INameFormatter.NameFormatter">
      <summary>
            Gets the name formatter.
            </summary>
      <value>The name formatter.</value>
    </member>
    <member name="T:Rock.Framework.Names.NameFormatter">
      <summary>
            Name Formatter provides standard name formats as string properties.
            It automatically handles nulls, empty strings and preferred vs legal names.
            <remarks>If a preferred name is null or empty the legal name is used.</remarks></summary>
    </member>
    <member name="M:Rock.Framework.Names.NameFormatter.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Names.NameFormatter" /> class.
            </summary>
      <param name="firstName">The first name.</param>
      <param name="lastName">The last name.</param>
    </member>
    <member name="M:Rock.Framework.Names.NameFormatter.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Names.NameFormatter" /> class.
            </summary>
      <param name="firstName">The first name.</param>
      <param name="lastName">The last name.</param>
      <param name="preferredFirstName">The preferred first name.</param>
    </member>
    <member name="M:Rock.Framework.Names.NameFormatter.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Names.NameFormatter" /> class.
            </summary>
      <param name="firstName">The first name.</param>
      <param name="lastName">The last name.</param>
      <param name="preferredFirstName">The preferred first name.</param>
      <param name="preferredLastName">The preferred last name.</param>
    </member>
    <member name="M:Rock.Framework.Names.NameFormatter.#ctor(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Names.NameFormatter" /> class.
            </summary>
      <param name="firstName">The first name.</param>
      <param name="lastName">The last name.</param>
      <param name="preferredFirstName">The preferred first name.</param>
      <param name="preferredLastName">The preferred last name.</param>
      <param name="middleName">The middle name.</param>
    </member>
    <member name="M:Rock.Framework.Names.NameFormatter.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Names.NameFormatter" /> class.
            </summary>
      <param name="firstName">The first name.</param>
      <param name="lastName">The last name.</param>
      <param name="preferredFirstName">The preferred first name.</param>
      <param name="preferredLastName">The preferred last name.</param>
      <param name="middleName">The middle name.</param>
      <param name="prefix">The name prefix.</param>
      <param name="suffix">The name suffix.</param>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.FirstName">
      <summary>
            Gets the first name.
            </summary>
      <value>The first name.</value>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.LastName">
      <summary>
            Gets the last name.
            </summary>
      <value>The last name.</value>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.PreferredFirstName">
      <summary>
            Gets the preferred first name.
            </summary>
      <value>The preferred first name.</value>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.PreferredLastName">
      <summary>
            Gets the preferred last name.
            </summary>
      <value>The preferred last name.</value>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.MiddleName">
      <summary>
            Gets the middle name.
            </summary>
      <value>The middle name.</value>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.MiddleInitial">
      <summary>
            Gets the middle initial.
            </summary>
      <value>The middle initial.</value>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.Prefix">
      <summary>
            Gets the prefix.
            </summary>
      <value>The prefix.</value>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.Suffix">
      <summary>
            Gets the suffix.
            </summary>
      <value>The suffix.</value>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.LegalNameFirstLast">
      <summary>
            Gets the legal name first last.
            </summary>
      <returns>The legal name formatted as "first last".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Lawrence Blackburn"</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.LegalNameFirstLast
            (formattedName will be "Lawrence Blackburn")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.LegalNameFirstMiddleLast">
      <summary>
            Gets the legal name first middle last.
            </summary>
      <returns>The legal name formatted as "first midddle last".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Lawrence Judson Blackburn"</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.LegalNameFirstMiddleLast
            (formattedName will be "Lawrence Judson Blackburn")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.LegalNameFirstMiddleInitialLast">
      <summary>
            Gets the legal name first middle initial last.
            </summary>
      <returns>The legal name formatted as "first m. last".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Lawrence J. Blackburn"</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.LegalNameFirstMiddleInitialLast
            (formattedName will be "Lawrence J. Blackburn")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.LegalNameFull">
      <summary>
            Gets the full legal name.
            </summary>
      <returns>The full legal name formatted as "prefix first middle last suffix".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Mr. Lawrence Judson Blackburn I"</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.LegalNameFull
            (formattedName will be "Mr. Lawrence Judson Blackburn I")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.LegalNameFullMiddleInitial">
      <summary>
            Gets the full legal name with middle initial.
            </summary>
      <returns>The full legal name formatted as "prefix first m. last suffix".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Mr. Lawrence J. Blackburn I"</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.LegalNameFullMiddleInitial
            (formattedName will be "Mr. Lawrence J. Blackburn I")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.LegalNameLastFirst">
      <summary>
            Gets the legal name last first.
            </summary>
      <returns>The legal name formatted as "last, first".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Blackburn, Lawrence"</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.LegalNameLastFirst
            (formattedName will be "Blackburn, Lawrence")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.LegalNameLastFirstMiddle">
      <summary>
            Gets the legal name last first middle.
            </summary>
      <returns>The legal name formatted as "last, first middle".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Blackburn, Lawrence Judson"</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.LegalNameLastFirstMiddle
            (formattedName will be "Blackburn, Lawrence Judson")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.LegalNameLastFirstMiddleInitial">
      <summary>
            Gets the legal name last first middle initial.
            </summary>
      <returns>The legal name formatted as "last, first m.".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Blackburn, Lawrence J."</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.LegalNameLastFirstMiddleInitial
            (formattedName will be "Blackburn, Lawrence J.")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.PreferredNameFirstLast">
      <summary>
            Gets the perferred name first last.  Returns legal name if preferred name is null or empty.
            </summary>
      <returns>The perferred name formatted as "first last".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Jud Blackburn"</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameFirstLast
            (formattedName will be "Jud Blackburn")
            
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", null, null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameFirstLast
            (formattedName will be "Lawrence Blackburn")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.PreferredNameFirstMiddleLast">
      <summary>
            Gets the perferred name first middle last.  Returns legal name if preferred name is null or empty.
            </summary>
      <returns>The perferred name formatted as "first middle last".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Jud Judson Blackburn"</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameFirstMiddleLast
            (formattedName will be "Jud Judson Blackburn")
            
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", null, null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameFirstMiddleLast
            (formattedName will be "Lawrence Judson Blackburn")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.PreferredNameFirstMiddleInitialLast">
      <summary>
            Gets the perferred name first middle initial last.  Returns legal name if preferred name is null or empty.
            </summary>
      <returns>The perferred name formatted as "first m. last".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Jud J. Blackburn"</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameFirstMiddleInitialLast
            (formattedName will be "Jud J. Blackburn")
            
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", null, null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameFirstMiddleInitialLast
            (formattedName will be "Lawrence J. Blackburn")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.PreferredNameFull">
      <summary>
            Gets the full perferred name.  Returns legal name if preferred name is null or empty.
            </summary>
      <returns>The perferred name formatted as "prefix first middle last suffix".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Mr. Jud Judson Blackburn I"</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameFull
            (formattedName will be "Mr. Jud Judson Blackburn I")
            
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", null, null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameFull
            (formattedName will be "Mr. Lawrence Judson Blackburn I")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.PreferredNameFullMiddleInitial">
      <summary>
            Gets the full perferred name with middle initial.  Returns legal name if preferred name is null or empty.
            </summary>
      <returns>The perferred name formatted as "prefix first m. last suffix".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Mr. Jud J. Blackburn I"</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameFullMiddleInitial
            (formattedName will be "Mr. Jud J. Blackburn I")
            
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", null, null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameFullMiddleInitial
            (formattedName will be "Mr. Lawrence J. Blackburn I")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.PreferredNameLastFirst">
      <summary>
            Gets the perferred name last first.  Returns legal name if preferred name is null or empty.
            </summary>
      <returns>The perferred name formatted as "last, first".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Blackburn, Jud"</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameLastFirst
            (formattedName will be "Blackburn, Jud")
            
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", null, null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameLastFirst
            (formattedName will be "Blackburn, Lawrence")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.PreferredNameLastFirstMiddle">
      <summary>
            Gets the perferred name last first middle.  Returns legal name if preferred name is null or empty.
            </summary>
      <returns>The perferred name formatted as "last, first middle".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Blackburn, Jud Judson"</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameLastFirstMiddle
            (formattedName will be "Blackburn, Jud Judson")
            
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", null, null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameLastFirstMiddle
            (formattedName will be "Blackburn, Lawrence Judson")
            </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Names.NameFormatter.PreferredNameLastFirstMiddleInitial">
      <summary>
            Gets the perferred name last first middle initial.  Returns legal name if preferred name is null or empty.
            </summary>
      <returns>The perferred name formatted as "last, first m.".</returns>
      <remarks>
            Using the name "Mr. Lawrence Judson Blackburn I",
            where preferred first name = "Jud",
            will return the following result:
            <list type="bullet"><item>"Blackburn, Jud J."</item></list></remarks>
      <example>
        <code>
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", "Jud", null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameLastFirstMiddleInitial
            (formattedName will be "Blackburn, Jud J.")
            
            NameFormatter nameFormatter = new NameFormatter("Lawrence", "Blackburn", null, null, "Judson", "Mr.", "I");
            string formattedName = nameFormatter.PreferredNameLastFirstMiddleInitial
            (formattedName will be "Blackburn, Lawrence J.")
            </code>
      </example>
    </member>
    <member name="T:Rock.Framework.Net.CidrIPAddress">
      <summary>
            Represents a Classless Inter-Domain Routing (CIDR, pronounced "cider") IP 
            Address for the purpose of checking whether a specific IP Address is 
            contained within the CIDR block. Currently, only IPv4 addresses are 
            supported.
            </summary>
    </member>
    <member name="M:Rock.Framework.Net.CidrIPAddress.#ctor(System.String)">
      <summary>
            Parameterized constructor
            </summary>
      <param name="cidrIPAddress">A CIDR IP address block given in dot-decimal notation</param>
    </member>
    <member name="M:Rock.Framework.Net.CidrIPAddress.Contains(System.String)">
      <summary>
            Determines whether an ip address is contained within the CIDR block 
            network range.
            </summary>
      <param name="ipAddress">
            IP address to determine if it is contained within the CIDR block, 
            represented in dot-decimal notation. Only IPv4 versions are supported 
            at this time.
            </param>
      <returns>
            True if the IP address is within the CIDR block; otherwise, false;
            </returns>
    </member>
    <member name="M:Rock.Framework.Net.CidrIPAddress.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Rock.Framework.Net.CidrIPAddress.ToString(System.String)">
      <summary>
            Returns a string based on the IFormatProvider.
            </summary>
      <param name="format">The format.</param>
      <returns>string</returns>
    </member>
    <member name="M:Rock.Framework.Net.CidrIPAddress.ToString(System.IFormatProvider)">
      <summary>
            Returns the string based on the format provider.
            </summary>
      <param name="formatProvider">The format provider.</param>
      <returns>string</returns>
    </member>
    <member name="M:Rock.Framework.Net.CidrIPAddress.ToString(System.String,System.IFormatProvider)">
      <summary>
            Formats the value of the current instance using the specified format.
            </summary>
      <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
      <returns>
            A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="P:Rock.Framework.Net.CidrIPAddress.AddressFamily">
      <summary>
            Gets the address family.
            </summary>
      <value>The address family.</value>
    </member>
    <member name="P:Rock.Framework.Net.CidrIPAddress.PrefixLength">
      <summary>
            Number of bits that are included in the network prefix portion of the address.
            </summary>
    </member>
    <member name="T:Rock.Framework.Net.DnsQueryException">
      <summary>
            Dns Query Exception
            </summary>
    </member>
    <member name="M:Rock.Framework.Net.DnsQueryException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Net.DnsQueryException" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Net.DnsQueryException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Net.DnsQueryException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Net.DnsQueryException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Net.DnsQueryException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Rock.Framework.Net.DnsQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Net.DnsQueryException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:Rock.Framework.Net.DnsWrapper">
      <summary>
            Wrapper for DNS API
            </summary>
    </member>
    <member name="M:Rock.Framework.Net.DnsWrapper.GetDomainMXRecords(System.String,System.Boolean@)">
      <summary>
            Gets the domain MX records.
            </summary>
      <param name="domain">The domain.</param>
      <param name="domainExists">if set to <c>true</c> [domain exists].</param>
      <returns>collection of mx records</returns>
      <exception cref="T:Rock.Framework.Net.DnsQueryException">
      </exception>
    </member>
    <member name="T:Rock.Framework.Net.IMail">
      <summary>
            SmtpClient MailMessage wrapper that allows to send emails through an SMTP host.
            </summary>
    </member>
    <member name="M:Rock.Framework.Net.IMail.Send">
      <summary>Sends the specified message to an SMTP server for delivery.</summary>
      <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">The message could not be delivered to one or more of the recipients in <see cref="P:Rock.Framework.Net.IMail.To"></see>, <see cref="P:Rock.Framework.Net.IMail.CC"></see>, or <see cref="P:Rock.Framework.Net.IMail.Bcc"></see>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Rock.Framework.Net.IMail.From">
        </see> is null.-or-<see cref="P:Rock.Framework.Net.IMail.To"></see> is null.-or- message is null.</exception>
      <exception cref="T:System.Net.Mail.SmtpException">The connection to the SMTP server failed.-or-Authentication failed.-or-The operation timed out.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Rock.Framework.Net.IMail"></see> has a <see cref="M:Rock.Framework.Net.IMail.SendAsync"></see> call in progress.-or- <see cref="P:System.Net.Mail.SmtpClient.Host"></see> is null.-or-<see cref="P:System.Net.Mail.SmtpClient.Host"></see> is equal to the empty string ("").-or- <see cref="P:System.Net.Mail.SmtpClient.Port"></see> is zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">There are no recipients in <see cref="P:Rock.Framework.Net.IMail.To"></see>, <see cref="P:Rock.Framework.Net.IMail.CC"></see>, and <see cref="P:Rock.Framework.Net.IMail.Bcc"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:Rock.Framework.Net.IMail.SendAsync">
      <summary>Sends the specified e-mail message to an SMTP server for delivery. This method does not block the calling thread and allows the caller to pass an object to the method that is invoked when the operation completes. </summary>
      <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">The message could not be delivered to one or more of the recipients in <see cref="P:Rock.Framework.Net.IMail.To"></see>, <see cref="P:Rock.Framework.Net.IMail.CC"></see>, or <see cref="P:Rock.Framework.Net.IMail.Bcc"></see>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Rock.Framework.Net.IMail.From">
        </see> is null.-or-<see cref="P:Rock.Framework.Net.IMail.To"></see> is null.-or- message is null.</exception>
      <exception cref="T:System.Net.Mail.SmtpException">The connection to the SMTP server failed.-or-Authentication failed.-or-The operation timed out.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Net.Mail.SmtpClient"></see> has a <see cref="M:Rock.Framework.Net.IMail.SendAsync"></see> call in progress.-or- <see cref="P:System.Net.Mail.SmtpClient.Host"></see> is null.-or-<see cref="P:System.Net.Mail.SmtpClient.Host"></see> is equal to the empty string ("").-or- <see cref="P:System.Net.Mail.SmtpClient.Port"></see> is zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">There are no recipients in <see cref="P:Rock.Framework.Net.IMail.To"></see>, <see cref="P:Rock.Framework.Net.IMail.CC"></see>, and <see cref="P:Rock.Framework.Net.IMail.Bcc"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:Rock.Framework.Net.IMail.SendAsyncCancel">
      <summary>Cancels an asynchronous operation to send an e-mail message.</summary>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="P:Rock.Framework.Net.IMail.Message">
      <summary>Gets the mail message reference.</summary>
      <value>The <see cref="T:System.Net.Mail.MailMessage"></see> instance.</value>
    </member>
    <member name="P:Rock.Framework.Net.IMail.Client">
      <summary>Gets the smtp client.</summary>
      <value>The <see cref="T:System.Net.Mail.SmtpClient"></see> instance.</value>
    </member>
    <member name="P:Rock.Framework.Net.IMail.Sender">
      <summary> Gets or sets the sender's address for this e-mail message.</summary>
      <value>A <see cref="T:System.Net.Mail.MailAddress"></see> that contains the sender's address information.</value>
    </member>
    <member name="P:Rock.Framework.Net.IMail.From">
      <summary>Gets or sets the from address for this e-mail message.</summary>
      <returns>A <see cref="T:System.Net.Mail.MailAddress"></see> that contains the from address information.</returns>
    </member>
    <member name="P:Rock.Framework.Net.IMail.ReplyToList">
      <summary>Gets or sets the ReplyToList address collection for the mail message.</summary>
      <returns>A MailAddressCollection that indicates the value of the <see cref="P:Rock.Framework.Net.IMail.ReplyToList"></see> field.</returns>
    </member>
    <member name="P:Rock.Framework.Net.IMail.To">
      <summary>Gets the address collection that contains the recipients of this e-mail message.</summary>
      <returns>A writable <see cref="T:System.Net.Mail.MailAddressCollection"></see> object.</returns>
    </member>
    <member name="P:Rock.Framework.Net.IMail.CC">
      <summary>Gets the address collection that contains the carbon copy (CC) recipients for this e-mail message.</summary>
      <returns>A writable <see cref="T:System.Net.Mail.MailAddressCollection"></see> object.</returns>
    </member>
    <member name="P:Rock.Framework.Net.IMail.Bcc">
      <summary>Gets the address collection that contains the blind carbon copy (BCC) recipients for this e-mail message.</summary>
      <returns>A writable <see cref="T:System.Net.Mail.MailAddressCollection"></see> object.</returns>
    </member>
    <member name="P:Rock.Framework.Net.IMail.Subject">
      <summary>Gets or sets the subject line for this e-mail message.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the subject content.</returns>
    </member>
    <member name="P:Rock.Framework.Net.IMail.Body">
      <summary>Gets or sets the message body.</summary>
      <returns>A <see cref="T:System.String"></see> value that contains the body text.</returns>
    </member>
    <member name="P:Rock.Framework.Net.IMail.Attachments">
      <summary>Gets the attachment collection used to store data attached to this e-mail message.</summary>
      <returns>A writable <see cref="T:System.Net.Mail.AttachmentCollection"></see>.</returns>
    </member>
    <member name="P:Rock.Framework.Net.IMail.IsBodyHtml">
      <summary>Gets or sets a value indicating whether the mail message body is in Html.</summary>
      <returns>true if the message body is in Html; else false. The default is false.</returns>
    </member>
    <member name="P:Rock.Framework.Net.IMail.BodyEncoding">
      <summary>Gets or sets the encoding used to encode the message body.</summary>
      <returns>An <see cref="T:System.Text.Encoding"></see> applied to the contents of the <see cref="P:Rock.Framework.Net.IMail.Body"></see>.</returns>
    </member>
    <member name="E:Rock.Framework.Net.IMail.SendCompleted">
      <summary>
            Occurs when an asynchronous e-mail send operation completes..
            </summary>
    </member>
    <member name="T:Rock.Framework.Net.IMailAttachment">
      <summary>
            Mail attachment interface
            </summary>
    </member>
    <member name="M:Rock.Framework.Net.IMailAttachment.AttachFile(System.String)">
      <summary>
            Adds a file attachment to the email message.
            </summary>
      <param name="fileName">Full path to the file to be attached.</param>
    </member>
    <member name="M:Rock.Framework.Net.IMailAttachment.AttachFile(System.IO.Stream,System.String)">
      <summary>
            Adds a file attachment to the email message.
            </summary>
      <param name="fileStream">Source stream to be attached.</param>
      <param name="altText">Alternative name for the file.</param>
    </member>
    <member name="T:Rock.Framework.Net.Mail">
      <summary>
		SmtpClient and MailMessage wrapper that allows to send emails through an SMTP host.
	</summary>
      <remarks>
		To use this class, you must first configure the mail settings in the configuration file. The system.net element contains settings for classes in the System.Net namespace.
		The settings configure authentication modules, connection management, the proxy server, and Internet request modules for receiving information from Internet hosts. Place this settings under <![CDATA[<configuration>]]> element.
		
		This is an example of email configuration that will send the emails to the specified folder.
		<code><![CDATA[		
		<system.net>
			<mailSettings>
				<smtp deliveryMethod="SpecifiedPickupDirectory">
					<specifiedPickupDirectory pickupDirectoryLocation="c:\mail"/>
				</smtp>
			</mailSettings>
		</system.net>
		]]></code>
		To send live emails use the following configuration
		<code><![CDATA[
		<system.net>
			<mailSettings>
				<smtp deliveryMethod="Network" >
					<network host="mailgw1"  />
				</smtp>
			</mailSettings>	
		</system.net>
		]]></code></remarks>
    </member>
    <member name="M:Rock.Framework.Net.Mail.Send(System.String,System.String,System.String,System.String)">
      <summary>Sends the specified e-mail message to an SMTP server for delivery.</summary>
      <param name="from">The from address for this e-mail message.</param>
      <param name="to">The to address for this e-mail messageo.</param>
      <param name="subject">Email subject.</param>
      <param name="body">Email body.</param>
    </member>
    <member name="M:Rock.Framework.Net.Mail.Send(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
      <summary>Sends the specified e-mail message to an SMTP server for delivery.</summary>
      <param name="from">The from address for this e-mail message.</param>
      <param name="to">A <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection that contains the recipients of this e-mail message.</param>
      <param name="subject">Email subject.</param>
      <param name="body">Email body.</param>
    </member>
    <member name="T:Rock.Framework.Net.MailWrapper">
      <summary>
		Static SmtpClient and MailMessage wrapper that allows to send emails through an SMTP host.
	</summary>
      <remarks>
		To use this class, you must first configure the mail settings in the configuration file. The system.net element contains settings for classes in the System.Net namespace.
		The settings configure authentication modules, connection management, the proxy server, and Internet request modules for receiving information from Internet hosts. Place this settings under <![CDATA[<configuration>]]> element.
		<code><![CDATA[		
		<system.net>
			<mailSettings>
				<smtp deliveryMethod="SpecifiedPickupDirectory">
					<specifiedPickupDirectory pickupDirectoryLocation="c:\mail"/>
				</smtp>
			</mailSettings>
		</system.net>
		]]></code></remarks>
    </member>
    <member name="M:Rock.Framework.Net.MailWrapper.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Net.MailWrapper" /> class.
            </summary>
      <param name="from">The from address for this e-mail message.</param>
      <param name="to">The to address for this e-mail messageo.</param>
      <param name="subject">Email subject.</param>
      <param name="body">Email body.</param>
    </member>
    <member name="M:Rock.Framework.Net.MailWrapper.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:Rock.Framework.Net.MailWrapper" /> class.
             </summary>
      <param name="from">The from address for this e-mail message.</param>
      <param name="to">A <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection that contains the recipients of this e-mail message.</param>
      <param name="subject">Email subject.</param>
      <param name="body">Email body.</param>
      <remarks>
             You can configure your Smtp setting in a standard .NET configuration file in the format:
             <![CDATA[  <system.net>
                <mailSettings>
                  <smtp from="me@mycompany.com">
                    <!-- 
                    The <network> node supports the following properties, but we won't use all of them
                    <network host="127.0.0.1" port="25" userName="myUserName" password="OpenSesame" defaultCredentials="true" />
                    -->
                    <network host="127.0.0.1" />
                  </smtp>
                </mailSettings>
              </system.net>]]> 
             To log your SMPT sending process configure the appropriate trace sources and switches in the format:
             <![CDATA[  <system.diagnostics>
            <trace autoflush="true" />
             <sources>
               <source name="System.Net" >
                 <listeners>
                   <add name="MyTraceFile"/>
                 </listeners>
               </source>
               <source name="System.Net.Sockets">
                 <listeners>
                   <add name="MyTraceFile"/>
                 </listeners>
               </source>
             </sources>
            
             <sharedListeners>
               <add name="MyTraceFile" type="System.Diagnostics.TextWriterTraceListener" initializeData="System.Net.trace.log" />
             </sharedListeners>
            
             <switches>
               <add name="System.Net" value="Verbose" />
               <add name="System.Net.Sockets" value="Verbose" />
             </switches>
             </system.diagnostics>]]></remarks>
    </member>
    <member name="M:Rock.Framework.Net.MailWrapper.Send">
      <summary>Sends the specified message to an SMTP server for delivery.</summary>
      <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">The message could not be delivered to one or more of the recipients in <see cref="P:Rock.Framework.Net.IMail.To"></see>, <see cref="P:Rock.Framework.Net.IMail.CC"></see>, or <see cref="P:Rock.Framework.Net.IMail.Bcc"></see>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Rock.Framework.Net.IMail.From">
        </see> is null.-or-<see cref="P:Rock.Framework.Net.IMail.To"></see> is null.-or- message is null.</exception>
      <exception cref="T:System.Net.Mail.SmtpException">The connection to the SMTP server failed.-or-Authentication failed.-or-The operation timed out.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Rock.Framework.Net.IMail"></see> has a <see cref="M:Rock.Framework.Net.IMail.SendAsync"></see> call in progress.-or- <see cref="P:System.Net.Mail.SmtpClient.Host"></see> is null.-or-<see cref="P:System.Net.Mail.SmtpClient.Host"></see> is equal to the empty string ("").-or- <see cref="P:System.Net.Mail.SmtpClient.Port"></see> is zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">There are no recipients in <see cref="P:Rock.Framework.Net.IMail.To"></see>, <see cref="P:Rock.Framework.Net.IMail.CC"></see>, and <see cref="P:Rock.Framework.Net.IMail.Bcc"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:Rock.Framework.Net.MailWrapper.SendAsync">
      <summary>Sends the specified e-mail message to an SMTP server for delivery. This method does not block the calling thread and returns the current mail message to the method that is invoked when the operation completes. </summary>
      <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">The message could not be delivered to one or more of the recipients in <see cref="P:Rock.Framework.Net.IMail.To"></see>, <see cref="P:Rock.Framework.Net.IMail.CC"></see>, or <see cref="P:Rock.Framework.Net.IMail.Bcc"></see>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Rock.Framework.Net.IMail.From">
        </see> is null.-or-<see cref="P:Rock.Framework.Net.IMail.To"></see> is null.-or- message is null.</exception>
      <exception cref="T:System.Net.Mail.SmtpException">The connection to the SMTP server failed.-or-Authentication failed.-or-The operation timed out.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Net.Mail.SmtpClient"></see> has a <see cref="M:Rock.Framework.Net.IMail.SendAsync"></see> call in progress.-or- <see cref="P:System.Net.Mail.SmtpClient.Host"></see> is null.-or-<see cref="P:System.Net.Mail.SmtpClient.Host"></see> is equal to the empty string ("").-or- <see cref="P:System.Net.Mail.SmtpClient.Port"></see> is zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">There are no recipients in <see cref="P:Rock.Framework.Net.IMail.To"></see>, <see cref="P:Rock.Framework.Net.IMail.CC"></see>, and <see cref="P:Rock.Framework.Net.IMail.Bcc"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:Rock.Framework.Net.MailWrapper.SendAsyncCancel">
      <summary>Cancels an asynchronous operation to send an e-mail message.</summary>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:Rock.Framework.Net.MailWrapper.AttachFile(System.String)">
      <summary>
            Adds a file attachment to the email message.
            </summary>
      <param name="fileName">Full path to the file to be attached.</param>
    </member>
    <member name="M:Rock.Framework.Net.MailWrapper.AttachFile(System.IO.Stream,System.String)">
      <summary>
            Adds a file attachment to the email message.
            </summary>
      <param name="fileStream">Source stream to be attached.</param>
      <param name="altText">Alternative name for the file.</param>
    </member>
    <member name="M:Rock.Framework.Net.MailWrapper.Dispose">
      <summary>Releases all resources used by the <see cref="T:Rock.Framework.Net.MailWrapper"></see>. </summary>
    </member>
    <member name="M:Rock.Framework.Net.MailWrapper.Dispose(System.Boolean)">
      <summary>Releases all resources used by the <see cref="T:Rock.Framework.Net.MailWrapper"></see>. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:Rock.Framework.Net.MailWrapper.Message">
      <summary>Gets the mail message reference.</summary>
      <value>The <see cref="T:System.Net.Mail.MailMessage"></see> instance.</value>
    </member>
    <member name="P:Rock.Framework.Net.MailWrapper.Client">
      <summary>Gets the smtp client.</summary>
      <value>The <see cref="T:System.Net.Mail.SmtpClient"></see> instance.</value>
    </member>
    <member name="P:Rock.Framework.Net.MailWrapper.Subject">
      <summary>Gets or sets the subject line for this e-mail message.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the subject content.</returns>
    </member>
    <member name="P:Rock.Framework.Net.MailWrapper.Sender">
      <summary> Gets or sets the sender's address for this e-mail message.</summary>
      <value>A <see cref="T:System.Net.Mail.MailAddress"></see> that contains the sender's address information.</value>
    </member>
    <member name="P:Rock.Framework.Net.MailWrapper.ReplyToList">
      <summary>Gets the ReplyToList address for the mail message.</summary>
      <returns>A MailAddressCollection that indicates the value of the <see cref="P:Rock.Framework.Net.IMail.ReplyToList"></see> field.</returns>
    </member>
    <member name="P:Rock.Framework.Net.MailWrapper.CC">
      <summary>Gets the address collection that contains the carbon copy (CC) recipients for this e-mail message.</summary>
      <returns>A writable <see cref="T:System.Net.Mail.MailAddressCollection"></see> object.</returns>
    </member>
    <member name="P:Rock.Framework.Net.MailWrapper.From">
      <summary>Gets or sets the from address for this e-mail message.</summary>
      <returns>A <see cref="T:System.Net.Mail.MailAddress"></see> that contains the from address information.</returns>
    </member>
    <member name="P:Rock.Framework.Net.MailWrapper.Bcc">
      <summary>Gets the address collection that contains the blind carbon copy (BCC) recipients for this e-mail message.</summary>
      <returns>A writable <see cref="T:System.Net.Mail.MailAddressCollection"></see> object.</returns>
    </member>
    <member name="P:Rock.Framework.Net.MailWrapper.Body">
      <summary>Gets or sets the message body.</summary>
      <returns>A <see cref="T:System.String"></see> value that contains the body text.</returns>
    </member>
    <member name="P:Rock.Framework.Net.MailWrapper.Attachments">
      <summary>Gets the attachment collection used to store data attached to this e-mail message.</summary>
      <returns>A writable <see cref="T:System.Net.Mail.AttachmentCollection"></see>.</returns>
    </member>
    <member name="P:Rock.Framework.Net.MailWrapper.IsBodyHtml">
      <summary>Gets or sets a value indicating whether the mail message body is in Html.</summary>
      <returns>true if the message body is in Html; else false. The default is false.</returns>
    </member>
    <member name="P:Rock.Framework.Net.MailWrapper.BodyEncoding">
      <summary>Gets or sets the encoding used to encode the message body.</summary>
      <returns>An <see cref="T:System.Text.Encoding"></see> applied to the contents of the <see cref="P:Rock.Framework.Net.IMail.Body"></see>.</returns>
    </member>
    <member name="P:Rock.Framework.Net.MailWrapper.To">
      <summary>Gets the address collection that contains the recipients of this e-mail message.</summary>
      <returns>A writable <see cref="T:System.Net.Mail.MailAddressCollection"></see> object.</returns>
    </member>
    <member name="E:Rock.Framework.Net.MailWrapper.SendCompleted">
      <summary>
            Occurs when an asynchronous e-mail send operation completes..
            </summary>
    </member>
    <member name="T:Rock.Framework.Net.MXRecord">
      <summary>
            Domain MXRecord
            </summary>
    </member>
    <member name="M:Rock.Framework.Net.MXRecord.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
    </member>
    <member name="M:Rock.Framework.Net.MXRecord.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:Rock.Framework.Net.MXRecord.CompareTo(Rock.Framework.Net.MXRecord)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other" /> parameter.
            Zero
            This object is equal to <paramref name="other" />.
            Greater than zero
            This object is greater than <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Rock.Framework.Net.MXRecord.ToString">
      <summary>
            Returns the fully qualified type name of this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
    </member>
    <member name="M:Rock.Framework.Net.MXRecord.op_Equality(Rock.Framework.Net.MXRecord,Rock.Framework.Net.MXRecord)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="a">A.</param>
      <param name="b">The b.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Rock.Framework.Net.MXRecord.op_Inequality(Rock.Framework.Net.MXRecord,Rock.Framework.Net.MXRecord)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="a">A.</param>
      <param name="b">The b.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="P:Rock.Framework.Net.MXRecord.Name">
      <summary>
            Gets the name of the MXRecord.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Rock.Framework.Net.MXRecord.Preference">
      <summary>
            Gets the preference of the MXRecord.
            </summary>
      <value>The preference.</value>
    </member>
    <member name="T:Rock.Framework.Net.Utilities">
      <summary>
            Provides various network related utils.
            </summary>
    </member>
    <member name="M:Rock.Framework.Net.Utilities.GetIPAddress">
      <summary>
            Gets the IP address.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Net.Utilities.ValidateIP4Address(System.String)">
      <summary>
            Validates the IP4 address.
            </summary>
      <param name="ipAddress">The ip address.</param>
      <returns>true if address is valid</returns>
    </member>
    <member name="P:Rock.Framework.Net.Utilities.MachineIPAddress">
      <summary>
            The machines primary IP address. The address is cached for performance reasons
            and also updates to the new IP address if the IP address is changed on the machine.
            </summary>
    </member>
    <member name="T:Rock.Framework.Numbers.NumberFormatters">
      <summary>
            Various utility methods for number types
            </summary>
    </member>
    <member name="M:Rock.Framework.Numbers.NumberFormatters.ToPhoneFormat(System.Nullable{System.Int64})">
      <summary>
            Formats a int64 into a phone using the mask ###-###-####
            </summary>
      <param name="phoneNumber">The phone number.</param>
      <returns>formatted phone</returns>
    </member>
    <member name="M:Rock.Framework.Numbers.NumberFormatters.ToPhoneFormat(System.Nullable{System.Int64},System.Nullable{System.Int32})">
      <summary>
            Formats a int64 number into a phone ###-###-#### ext.{0}
            </summary>
      <param name="phoneNumber">The phone number.</param>
      <param name="phoneExtension">The phone extension.</param>
      <returns>formatted phone</returns>
    </member>
    <member name="T:Rock.Framework.Serialization.BinarySerializer">
      <summary>
             Takes any object marked as [Serializable] and converts it into a byte array.
             </summary>
      <remarks>
        <h3>About</h3>
             The binary serializer supports the ability to serialize and deserialize any object. 
             This functionality can be used in a lot of ways including storing information in a 
             database for caching purposes or writing data to a file system for caching or saving settings 
             of a program.  
            
             </remarks>
      <example>
        <code><![CDATA[
             /// <summary>
             /// Contains various application settings.  It loads the existing cached settings if they exist, 
             /// otherwise a new one is created.
             /// </summary>
             [Serializable]
             public class AppSettings
             {
                 /// <summary>
                 /// Gets or sets the name.
                 /// </summary>
                 /// <value>The name.</value>
                 public string Name { get; set; }
                 /// <summary>
                 /// Gets or sets the version.
                 /// </summary>
                 /// <value>The version.</value>
                 public string Version { get; set; }
                 /// <summary>
                 /// Gets or sets the path to write fax docs.
                 /// </summary>
                 /// <value>The path to write fax docs.</value>
                 public string PathToWriteFaxDocs { get; set; }
                 /// <summary>
                 /// Gets or sets the color of the background.
                 /// </summary>
                 /// <value>The color of the background.</value>
                 public string BackgroundColor { get; set; }
                 /// <summary>
                 /// Gets or sets the search items to return.
                 /// </summary>
                 /// <value>The search items to return.</value>
                 public int SearchItemsToReturn { get; set; }
             
                 /// <summary>
                 /// Gets the settings.
                 /// </summary>
                 /// <param name="path">The path.</param>
                 /// <returns></returns>
                 public static AppSettings GetSettings(string path)
                 {
                     if (System.IO.File.Exists(path))
                     {
                         byte[] dat = System.IO.File.ReadAllBytes(path);
                         return BinarySerializer.BinaryToObject<AppSettings>(dat);
                     }
                     else
                     {
                         return new AppSettings();
                     }
                 }
             
                 /// <summary>
                 /// Saves the settings.
                 /// </summary>
                 /// <param name="path">The path.</param>
                 /// <param name="settings">The settings.</param>
                 public static void SaveSettings(string path, AppSettings settings)
                 {
                     byte[] dat = BinarySerializer.ToBinary(settings);
                     System.IO.File.WriteAllBytes(path, dat);
                 }
             }
             ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Serialization.BinarySerializer.ToBinary(System.Object)">
      <summary>
            Takes any object marked as [Serializable] and converts it to a byte array.
            </summary>
      <param name="value">object to serialize</param>
      <returns>byte[]</returns>
      <example>
        <code><![CDATA[
            List<PersonHelper> persons = PersonHelper.GetFiveRandomPersons();
            byte[] dat = BinarySerializer.ToBinary(persons);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Serialization.BinarySerializer.BinaryToObject``1(System.Byte[])">
      <summary>
            Converts a byte array into original instance of the object.
            </summary>
      <typeparam name="T">The Type.</typeparam>
      <param name="value">The value.</param>
      <returns>object of type T</returns>
      <example>
        <code><![CDATA[
            List<PersonHelper> newPersons = BinarySerializer.BinaryToObject<List<PersonHelper>>(dat);
            ]]></code>
      </example>
    </member>
    <member name="T:Rock.Framework.Serialization.JsonSerializer">
      <summary>
            Utility class that can serialize any object to a JSON string, or deserialize a JSON string into it's object representation.
            </summary>
      <remarks>
        <h3>About</h3>
            The JSON serializer supports the ability to serialize and deserialize any object to and from JavaScript Object Notation. 
            JSON is used primarily to transmit data between a server and web application, serving as an alternative to XML.
            </remarks>
      <example>
        <code><![CDATA[
                   List<PersonHelper> persons = PersonHelper.GetFiveRandomPersons();
                   string json = JsonSerializer.ToJson(persons);
                   
                   List<PersonHelper> deserializedPeople = JsonSerializer.JsonToObject<Dictionary<string, string>>(json);
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Serialization.JsonSerializer.ToJson``1(``0)">
      <summary>
            Serializes an object to JSON.
            </summary>
      <typeparam name="T">The type of object to be serialized.</typeparam>
      <param name="obj">The object to serialize.</param>
      <returns>JSON string</returns>
      <example>
        <code><![CDATA[
            class JsonHelperTestData
            {
                public string Property {get; set;}
            }
            JsonHelperTestData obj = new JsonHelperTestData { Property = "TestData" };
            string json = JsonSerializer.ToJson<JsonHelperTestData>(obj);]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Serialization.JsonSerializer.JsonToObject``1(System.String)">
      <summary>
            Deserializes an object from a JSON string.
            </summary>
      <typeparam name="T">The object type the JSON is to be converted into.</typeparam>
      <param name="input">The JSON to deserialize.</param>
      <returns>an object of type T</returns>
      <exception cref="T:System.ArgumentNullException">
      </exception>
      <example>
        <code><![CDATA[
            class JsonHelperTestData
            {
                public string Property {get; set;}
            } 
            string json = Serializer.ToJson<JsonHelperTestData>(new JsonHelperTestData { Property = "TestData" });
            JsonHelperTestData obj = Serializer.JsonToObject<JsonHelperTestData>(json); ]]></code>
      </example>
    </member>
    <member name="T:Rock.Framework.Serialization.XmlObjectSerializer">
      <summary>
		Provides standard XML to Object and Object to XML serialization for objects as well as WCF
		service objects attributed with DataContract and DataMember.
	</summary>
      <remarks>
        <h3>About XMLObjectSerializer</h3>
		In order to serialize an object to XML it must be marked with the serializable attribute.  If 
		the object is a WCF object it must be attributed with a DataContract.  
		When using XML serialization (not datacontract), only the properties with public get; set; 
		will be converted into XML (that's just how XML serializes).
		If properties need to be renamed, use <see cref="N:System.Xml.Serialization" /> attributes to override the serialization names.
		<para>
			This serializer supports the ability to serialize and deserialize WCF service objects using the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.
			This makes it possible to log incoming messages to WCF services easily with <see cref="T:Rock.Framework.Logging.Logger" />.
		</para></remarks>
      <example>
        <para>
          <h3>Loading and Saving Entities</h3>
			The following example shows how to incorporate XML persistence for an entity.
		</para>
        <code><![CDATA[
			 [Serializable]
			 public class LoanSummary
			 {
				public string FirstName { get; set; }
				public string LastName { get; set; }
				public decimal Amount { get; set; }
				public decimal PMI { get; set; }
				public decimal LTV { get; set; }
		    
				public LoanSummary()
				{
		    
				}
		    
				public string ToXML()
				{
					return XmlObjectSerializer.ToXml(this);
				}
		        
				public static LoanSummary LoadFromXML(string xml)
				{
					return XmlObjectSerializer.XmlToObject<LoanSummary>(xml);
				}
			 }
			]]></code>
        <para>
          <h3>
				Example Using <see cref="T:Rock.Framework.Logging.Logger" /> and DataContractSerializer
			</h3>
        </para>
        <code>
			[OperationBehavior(TransactionScopeRequired = true, TransactionAutoComplete = true)]
			public void Write(Rock.Framework.Logging.LogEntry entry)
			{
				Rock.Framework.Logging.LogEntry logEntry = new Rock.Framework.Logging.LogEntry();
				logEntry.ExtendedProperties.Add("ApplicationId", entry.ApplicationId.ToString());
				try
				{
					using (TransactionScope scope = new TransactionScope())
					{
						WriteResponse rep = Util.SaveLogEntry(entry, logEntry);
						if (rep.HasErrors)
						{
							logEntry.ExtendedProperties.Add("EntryHaveErrors", "TRUE");
							logEntry.ExtendedProperties.Add("ValidationErrros", rep.ToString());
							Util.SaveInvalidLogEntry(entry, rep.BrokenRules, logEntry);
							logEntry.ExtendedProperties.Add("SavedInvalidLogEntry", "TRUE");
						}
							scope.Complete();
						}
					}
				catch (Exception ex)
				{
					if (Global.Logger.IsErrorEnabled)
					{
						logEntry.Message = ex.Message;
						logEntry.ExceptionData = ex.FormatToString();
						logEntry.ExtendedProperties.Add("LogEntry", System.Web.HttpUtility.HtmlEncode(Rock.Framework.Xml.Serializer.ToXml(entry, Rock.Framework.Xml.XmlSerializerType.DataContractSerializer)));
						logEntry.ExtendedProperties.Add("OriginalLogEntryHash", entry.GetHashCode().ToString());
						Global.Logger.Error(logEntry);
					}
				}
				if (Global.Logger.IsInfoEnabled)
				{
					Global.Logger.Info(logEntry);
				}
			}
		</code>
      </example>
    </member>
    <member name="M:Rock.Framework.Serialization.XmlObjectSerializer.ToXml``1(``0)">
      <summary>
            Serializes an object to XML.
            </summary>
      <typeparam name="T">The type of object to be serialized.</typeparam>
      <param name="obj">The object to serialize.</param>
      <returns>XML string</returns>
      <exception cref="T:System.InvalidOperationException">
      </exception>
      <example>
        <code><![CDATA[
            class XmlHelperTestData
            {
                public string Property {get; set;}
            }
            XmlHelperTestData obj = new XmlHelperTestData { Property = "TestData" };
            string xml = XmlObjectSerializer.ToXml<XmlHelperTestData>(obj);]]></code>
      </example>
      <remarks>The object has to be serializable</remarks>
    </member>
    <member name="M:Rock.Framework.Serialization.XmlObjectSerializer.ToXml``1(``0,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Serializes an object to XML.
            </summary>
      <typeparam name="T">The type of object to be serialized.</typeparam>
      <param name="obj">The object to serialize.</param>
      <param name="serializerType">Type of the serializer.</param>
      <returns>XML string</returns>
      <exception cref="T:System.InvalidOperationException">
      </exception>
      <example>
        <code><![CDATA[
            class XmlHelperTestData
            {
            public string Property {get; set;}
            }
            XmlHelperTestData obj = new XmlHelperTestData { Property = "TestData" };
            string xml = Serializer.ToXml<XmlHelperTestData>(obj, SerializerType.DataContractSerializer);]]></code>
      </example>
      <remarks>The object has to be serializable</remarks>
    </member>
    <member name="M:Rock.Framework.Serialization.XmlObjectSerializer.XmlToObject``1(System.String)">
      <summary>
            Deserializes an object from XML.
            </summary>
      <typeparam name="T">The object type the XML is to be converted into.</typeparam>
      <param name="xml">The XML to deserialize.</param>
      <returns>an object of type T</returns>
      <exception cref="T:System.ArgumentNullException">
      </exception>
      <exception cref="T:System.InvalidOperationException">
      </exception>
      <example>
        <code><![CDATA[
            class XmlHelperTestData
            {
                public string Property {get; set;}
            } 
            string xml = Serializer.ToXml<XmlHelperTestData>(new XmlHelperTestData { Property = "TestData" });
            XmlHelperTestData obj = Serializer.XmlToObject<XmlHelperTestData>(xml); ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Serialization.XmlObjectSerializer.XmlToObject(System.String,System.Type)">
      <summary>
            Deserializes an object from XML for types only known at runtime.
            </summary>
      <param name="xml">The XML to deserialize.</param>
      <param name="type">The object type the XML is to be converted into.</param>
      <returns>an object of the type passed in</returns>
      <exception cref="T:System.ArgumentNullException">
      </exception>
      <exception cref="T:System.InvalidOperationException">
      </exception>
      <example>
        <code><![CDATA[
            class XmlHelperTestData
            {
                public string Property {get; set;}
            } 
            string xml = Serializer.ToXml<XmlHelperTestData>(new XmlHelperTestData { Property = "TestData" });
            XmlHelperTestData obj = Serializer.XmlToObject(xml, typeof(XmlHelperTestData); ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Serialization.XmlObjectSerializer.XmlToObject``1(System.String,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Deserializes an object from XML.
            </summary>
      <typeparam name="T">The object type the XML is to be converted into.</typeparam>
      <param name="xml">The XML to deserialize.</param>
      <param name="serializerType">Type of the serializer.</param>
      <returns>an object of type T</returns>
      <exception cref="T:System.ArgumentNullException">
      </exception>
      <exception cref="T:System.InvalidOperationException">
      </exception>
      <example>
        <code><![CDATA[
            class XmlHelperTestData
            {
            public string Property {get; set;}
            }
            string xml = Serializer.ToXml<XmlHelperTestData>(new XmlHelperTestData { Property = "TestData" }, SerializerType.DataContractSerializer);
            XmlHelperTestData obj = Serializer.XmlToObject<XmlHelperTestData>(xml); ]]></code>
      </example>
    </member>
    <member name="T:Rock.Framework.Serialization.XmlSerializerType">
      <summary>
            XML serializer types
            </summary>
    </member>
    <member name="F:Rock.Framework.Serialization.XmlSerializerType.None">
      <summary>
      </summary>
    </member>
    <member name="F:Rock.Framework.Serialization.XmlSerializerType.XmlSerialzer">
      <summary>
            XmlSerialzer
            </summary>
    </member>
    <member name="F:Rock.Framework.Serialization.XmlSerializerType.DataContractSerializer">
      <summary>
            DataContractSerializer is WCF compatible
            </summary>
    </member>
    <member name="T:Rock.Framework.Threading.Utilities">
      <summary>
            Utilities to assist with threading.
            </summary>
    </member>
    <member name="M:Rock.Framework.Threading.Utilities.FireAndForget(System.Delegate,System.Object[])">
      <summary>
            Executes asynchronously the passed delegate.  Uses ThreadPooling and takes advantage of multi-core processors.
            </summary>
      <param name="d">The delegate to be called.</param>
      <param name="args">An array of parameters to pass to the delegate.</param>
      <example>
        <code>
            private void LogMessage(ILogEntry logEntry) 
            { 
              // pretend this does something
            } 
            
            // create the delegate
            private Delegate _logDelegate = new Action{ILogEntry}(LogMessage);
            
            // calls the LogMessage method asynchronously
            Utilities.FireAndForget(_logDelegate, new object[] { logEntry });
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Threading.Utilities.FireAndForgetWithTimeout(System.Action,System.Int32)">
      <summary>
            Executes asynchronously the passed delegate with timeout.
            </summary>
      <param name="action">The action.</param>
      <param name="timeoutMilliseconds">The timeout milliseconds.</param>
    </member>
    <member name="T:Rock.Framework.UnitTests.NumberLength">
      <summary>
            Pre-defined number lengths
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.One">
      <summary>
            One
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Two">
      <summary>
            Two
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Three">
      <summary>
            Three
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Four">
      <summary>
            Four
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Five">
      <summary>
            Five
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Six">
      <summary>
            Six
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Seven">
      <summary>
            Seven
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Eight">
      <summary>
            Eight
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Nine">
      <summary>
            Nine
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Ten">
      <summary>
            Ten
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Eleven">
      <summary>
            Eleven
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Twelve">
      <summary>
            Twelve
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Thirteen">
      <summary>
            Thriteen
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Fourteen">
      <summary>
            Fourteen
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Fifteen">
      <summary>
            Fifteen
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Sixteen">
      <summary>
            Sixteen
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Seventeen">
      <summary>
            Seventeen
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Eighteen">
      <summary>
            Eighteen
            </summary>
    </member>
    <member name="F:Rock.Framework.UnitTests.NumberLength.Nineteen">
      <summary>
            Nineteen
            </summary>
    </member>
    <member name="T:Rock.Framework.UnitTests.RandomValueGenerator">
      <summary>
            Generates Random Values to be used when setting up objects for unit testing.
            </summary>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomInteger">
      <summary>
            Generates a positive random integer.
            </summary>
      <returns>A positive random integer.</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomInteger(System.Int32)">
      <summary>
            Generates a random integer greater than or equal to the minimum value.
            </summary>
      <param name="minValue">The minimum value.</param>
      <returns>A random integer.</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomInteger(System.Int32,System.Int32)">
      <summary>
            Generates a random integer greater than or equal to the minimum value and less than or equal to the maximum value.
            </summary>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
      <returns>A random integer.</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomByte">
      <summary>
            Generates a positive random byte.
            </summary>
      <returns>A positive random byte.</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomByte(System.Byte)">
      <summary>
            Generates a random byte greater than or equal to the minimum value.
            </summary>
      <param name="minValue">The minimum value.</param>
      <returns>A random byte.</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomByte(System.Byte,System.Byte)">
      <summary>
            Generates a random byte greater than or equal to the minimum value and less than or equal to the maximum value.
            </summary>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
      <returns>A random byte.</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomShort">
      <summary>
            Generates a positive random short.
            </summary>
      <returns>A positive random short.</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomShort(System.Int16)">
      <summary>
            Generates a random short greater than or equal to the minimum value.
            </summary>
      <param name="minValue">The minimum value.</param>
      <returns>A random short.</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomShort(System.Int16,System.Int16)">
      <summary>
            Generates a random short greater than or equal to the minimum value and less than or equal to the maximum value.
            </summary>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
      <returns>A random short.</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomLong">
      <summary>
            Generates a positive random long.
            </summary>
      <returns>A positive random long.</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomLong(Rock.Framework.UnitTests.NumberLength)">
      <summary>
            Generates a random long with the specified minimum length.
            </summary>
      <param name="minNumberLength">The minimum number length</param>
      <returns>A random number</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomLong(Rock.Framework.UnitTests.NumberLength,Rock.Framework.UnitTests.NumberLength)">
      <summary>
            Generates a random long with the specified minimum and maximum length.
            </summary>
      <param name="minNumberLength">The minimum number length</param>
      <param name="maxNumberLength">The maximum number length</param>
      <returns>A random long</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomNumber(Rock.Framework.UnitTests.NumberLength)">
      <summary>
            Generates a random number with the specified length.
            <remarks>NumberLength.None will always return zero.</remarks></summary>
      <param name="numberLength">The number length.</param>
      <returns>A random number</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomDouble">
      <summary>
            Generates a random double
            </summary>
      <returns>A random double</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomDecimal">
      <summary>
            Generates a random decimal
            </summary>
      <returns>A random decimal</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomDecimal(Rock.Framework.UnitTests.NumberLength,Rock.Framework.UnitTests.NumberLength)">
      <summary>
            Generates a random decimal with the specified whole number length and the specified decimal number length.
            </summary>
      <param name="wholeNumberLength">Length of the whole number.</param>
      <param name="decimalNumberLength">Length of the decimal number.</param>
      <returns>
            A random decimal
            </returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomDate">
      <summary>
            Generates a random date.
            </summary>
      <returns>A random date.</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomDate(System.DateTime)">
      <summary>
            Generates a random date greater than or equal to the minimum value.
            </summary>
      <param name="minValue">The minimum value.</param>
      <returns>
            A random date.
            </returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomDate(System.DateTime,System.DateTime)">
      <summary>
            Generates a random date greater than or equal to the minimum value and less than or equal to the maximum value.
            </summary>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
      <returns>
            A random date.
            </returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomBoolean">
      <summary>
            Generates a random boolean.
            </summary>
      <returns>A random boolean.</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomString(System.Int32)">
      <summary>
            Generates a random string with the specified length.
            </summary>
      <param name="length">The length of the string.</param>
      <returns>A random string.</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomString(System.Int32,System.Int32)">
      <summary>
            Generates a random string of strings.
            </summary>
      <param name="maxLength">The maximum length of the string.</param>
      <param name="maxWordCount">The maximum word count for the string.</param>
      <returns>A random string.</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomPhoneNumber">
      <summary>
            Generates a random phone number
            </summary>
      <returns>A random phone number</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomEmailAddress">
      <summary>
            Generates a random email address
            </summary>
      <returns>A random email address</returns>
    </member>
    <member name="M:Rock.Framework.UnitTests.RandomValueGenerator.RandomEnumerationValue``1">
      <summary>
            Randomly selects an item from the enumeration.
            </summary>
      <typeparam name="T">The type of enumeration</typeparam>
      <returns>An item from the enumeration</returns>
    </member>
    <member name="T:Rock.Framework.Xml.Utilities">
      <summary>
            XML Utilties
            </summary>
    </member>
    <member name="M:Rock.Framework.Xml.Utilities.FormatXml(System.String)">
      <summary>
            Formats XML so it is indented properly.
            </summary>
      <param name="unformattedXml">The unformatted XML.</param>
      <returns>Formatted XML that is properly indented.</returns>
    </member>
    <member name="T:Rock.Framework.Validation.ClientData">
      <summary>
            Standard validation for dealing with client data.
            </summary>
    </member>
    <member name="M:Rock.Framework.Validation.ClientData.ValidateEmailAddressFormat(System.String)">
      <summary>
            Validates that an email address is a well formed email address.
            </summary>
      <param name="email">Email address to validate</param>
      <returns>Boolean</returns>
      <example>
        <code>
            string email = "asdf@asdf.com";
            if (ClientData.ValidateEmailAddressFormat(email))
            {
                Console.WriteLine("Email is valid");
            }
            </code>
      </example>
      <remarks>
            This method does not validate the email is in fact an email address that can receive email.  It merely checks to see if the email is formatted correctly.
            </remarks>
    </member>
    <member name="M:Rock.Framework.Validation.ClientData.ValidateUSPhoneNumberFormat(System.String)">
      <summary>
            Validates the US phone number.
            </summary>
      <param name="phone">Phone number</param>
      <returns>Boolean</returns>
      <remarks>
            The following phone numbers return the following results:
            <list type="bullet"><listheader>Example tests and their result</listheader><item>true = (111) 222-3333</item><item>true = 1112223333</item><item>true = 111.222.3333</item><item>true = 111-222-3333</item><item>true = 111-222.3333</item><item>true = 111-222.3333</item><item>true = (111).222.3333</item><item>true = 111 222 3333</item><item>false = 1.123.123.1234</item><item>false = (123)-1234-123</item><item>false = 123-1234</item></list></remarks>
      <example>
        <code>
            string phone = "(123) 123-1234";
            if (ClientData.ValidateUSPhoneNumberFormat(phone))
            {
                Console.WriteLine("Phone number is valid.");
            } else
            {
                Console.WriteLine("Phone number is invalid.");
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Validation.ClientData.ValidateUSZipFormat(System.String)">
      <summary>
            Validates the format of a US zip code.
            </summary>
      <param name="zip">zip code (xxxxx or xxxxx-xxxx)</param>
      <returns>Boolean</returns>
      <remarks>
            This method does not take into account if the zip code is a real US zip code. 
            It merely validates the format of the data.  The data is expected to be all numbers in either the format of: XXXXX or XXXXX-XXXX.
            </remarks>
      <example>
        <code>
            string zip = "12345-1234";
            if (ClientData.ValidateUSZipFormat(zip))
            {
                Console.WriteLine("Zip is valid.");
            } else
            {
                Console.WriteLine("Zip is invalid.");
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Validation.ClientData.ValidateUSZipFormat(System.String,Rock.Framework.Validation.ZipValidationType)">
      <summary>
            Validates the format of a US zip code various ways including just 5 digits, or just the 4 digit extension or both.
            </summary>
      <param name="zip">zip code (xxxxx(ZipValidationType.ZipOnly) or xxxx(ZipValidationType.Zip4Only) or xxxxx-xxxx(ZipValidationType.Both)))</param>
      <param name="validationType">Type of zip validation.</param>
      <returns>Boolean</returns>
      <remarks>
            This method does not take into account if the zip code is a real US zip code.
            It merely validates the format of the data.  The data is expected to be all numbers in either the format of: XXXXX or XXXXX-XXXX or XXXX.
            </remarks>
      <example>
        <code>
            string zip = "12345-1234";
            if (ClientData.ValidateUSZipFormat(zip, ZipValidationType.Both))
            {
            Console.WriteLine("Zip is valid.");
            } else
            {
            Console.WriteLine("Zip is invalid.");
            }
            </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Validation.ClientData.ValidateName(System.String)">
      <summary>
            Validates the name.
            </summary>
      <param name="name">The name.</param>
      <returns>true is name is blank or valid</returns>
      <remarks>
            The following names return the following results:
            <list type="bullet"><listheader>Example tests and their result</listheader><item>true = Keith</item><item>true = O'Keith (supports apostrophes)</item><item>false = frank (must be capitalized)</item><item>false = keitho'elder@keith.org</item><item>false =  <![CDATA[~!@#*$%^&()_+|\}{["';:/?.><]]></item><item>false = ke^df</item><item>false = 'ohenry</item><item>true = K'ohenry</item><item>false = keith elder</item><item>true = Keith Elder</item><item>true = K'eith E'lder</item><item>true = Ice T</item></list></remarks>
              /// <example><code>
            if (!ClientData.ValidateName(txtFirstName.Text))
            {
                // do something
            }
            </code></example></member>
    <member name="M:Rock.Framework.Validation.ClientData.ValidateSocialSecurityNumber(System.String)">
      <summary>
            Validates the social security number.
            </summary>
      <param name="socialSecurityNumber">The social security number.</param>
      <returns>true if ssn is blank or valid, otherwise false</returns>
      <remarks>
            The following ssns return the following results:
            <list type="bullet"><listheader>Example tests and their result</listheader><item>true = "" (blank should pass)</item><item>true = "455-65-5646"</item><item>true = "455655646" (supports unformatted value)</item><item>true = "45 5-6 5-5 646" (removes internal blanks)</item><item>false = "773-82-5455" (first section cannot be greater than 772)</item><item>false = "987-65-4320" (reserved for advertising)</item><item>false = "739-82-5455" (first section cannot be between 734 and 749)</item><item>false = "455-00-4545" (none of the sections can be all zeros)</item><item>false = "666-56-4515" (first section cannot be all sixes)</item><item>false = "078-05-1120" (invalid ssn due to advertising)</item><item>false = "abc-we-asdf" (alpha characters are not allowed)</item><item>special characters are not allowed</item></list></remarks>
      <example>
        <code>
            if (!ClientData.ValidateSsn(txtSsn.Text))
            {
                // do something
            }
            </code>
      </example>
    </member>
    <member name="T:Rock.Framework.Validation.Date">
      <summary>
            Provides date validation.
            </summary>
    </member>
    <member name="M:Rock.Framework.Validation.Date.ValidateDateTime(System.String)">
      <summary>
            Validates that a string is a valid date.
            </summary>
      <param name="date">String version of the date to validate.</param>
      <returns>Boolean</returns>
      <remarks>
            This method uses the System.DateTime.TryParse method of the .Net framework but doesn't require 
            developers to have to declare an out parameter.  Note, if you call this method to validate and then push that 
            value onto a property of an object you are parsing the date value twice.  It is best to not use this method.  
            <para>
            It will take a string of a date in various formats. It will take a standard 
            date like 1/01/2001 but will also take written dates like June 1, 2008.  It also takes 
            into account leap years.  Time can also be specified as well. Here are some examples and their outcomes.
            </para><list type="bullet"><item>true = 01/01/2000</item><item>true = 02/29/2000 (this is a valid leap year date)</item><item>false = 02/29/2001 (not a valid leap year)</item><item>true = June 1, 2008</item></list></remarks>
      <example>
        <code>
            // BAD EXAMPLE
            if (Date.ValidateDateTime(txtLoanOriginationDate.Text))
            {
                // this is bad because the date value is parsed twice
                // see corrected bad example
                loan.OriginatioonDate = DateTime.Parse(txtLoanOriginationDate.Text);
            }
            
            // CORRECTED BAD EXAMPLE
            if (!DateTime.TryParse(txtLoanOriginationDate.Text, out loan.OriginationDate))
            {
               MessageBox.Show("The date you entered was invalid. Please correct it.");
            }
            
            
            // GOOD EXAMPLE
            if (!Date.ValidateDateTime(txtLoanOriginationDate.Text))
            {
                MessageBox.Show("The date you entered is invalid.");
            }
            </code>
      </example>
    </member>
    <member name="T:Rock.Framework.Validation.EmailValidator">
      <summary>
             Provides the framework for deep email validation and scrubbing to correct common misspells.
             It detects invalid email through validation syntax and also bogus expressions. It performs scrubbing
             by searching for common misspells and correcting them agains the provided list of translations. 
            </summary>
      <example>
        <code><![CDATA[
             List<string>() _bogusEmailExpression = new List<string>();
             Dictionary<string, string> _misspellTranslations = new Dictionary<string, string>();
             
             _bogusEmailExpression.Add("noemail@");
             _bogusEmailExpression.Add("n/a@");
             
             _misspellTranslations.Add("@al.com","@aol.com");
             _misspellTranslations.Add("@yaho.com","@yahoo.com");
             
              EmailValidator ev = new EmailValidator(_bogusEmailExpression, _misspellTranslations);
             
             string cleanEmail, error;
             EmailValidationResult isValid =  ev.Validate("noemail@wefwfw.com", out cleanEmail, out error);
             
             Console.WriteLine(isValid.ToString()); // it will return BogusEmail
             Console.WriteLine(cleanEmail); // it will return empty string since the email was not valid
             Console.WriteLine(error); // it will return 'Bogus email, failed expression - noemail@"
             
             Assert.IsTrue(isValid == EmailValidationResult.BogusEmail);
             ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Validation.EmailValidator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Validation.EmailValidator" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Validation.EmailValidator.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Validation.EmailValidator" /> class.
            </summary>
      <param name="bogusEmailExpression">The bogus email expression list. It has to contain valid regular expressions.</param>
      <param name="misspellTranslations">The misspell and their translations list.  It has to contain valid regular expressions for the misspel.</param>
    </member>
    <member name="M:Rock.Framework.Validation.EmailValidator.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Validation.EmailValidator" /> class.
            </summary>
      <param name="bogusEmailExpression">The bogus email expression list.</param>
      <param name="domainMisspellTranslations">The domain misspell translations.</param>
      <param name="tldMisspellTranslations">The TLD misspell translations.</param>
    </member>
    <member name="M:Rock.Framework.Validation.EmailValidator.Validate(System.String,System.String@,System.String@)">
      <summary>
            Validates the specified email address against the provided list of bogus expressions
            and scrub it agains the provided list of misspell translations.
            </summary>
      <param name="emailAddress">The email address to validate.</param>
      <param name="scrubbedEmail">If the email is valid it will return the scrubbed email otherwise an empty string.</param>
      <param name="error">Returns the expression where the validation failed.</param>
      <returns>Return a <see cref="T:Rock.Framework.Validation.EmailValidationResult" /> to indicate if the email is valid or where the validation failed.</returns>
    </member>
    <member name="P:Rock.Framework.Validation.EmailValidator.BogusEmailExpression">
      <summary>
            Gets the bogus email regex expression that when mached wil mark the email as invalid.
            </summary>
      <value>The bogus email expression as a list of RegEx expression.</value>
    </member>
    <member name="P:Rock.Framework.Validation.EmailValidator.MisspellTranslations">
      <summary>
            Gets the misspell translations.
            </summary>
      <value>The misspell translations as a dictionary of regular expression to search for and the replacement.</value>
    </member>
    <member name="P:Rock.Framework.Validation.EmailValidator.Validators">
      <summary>
            Gets the validators. Custom validators that allow to add more complex rules for searching bogus emails.
            </summary>
      <example><![CDATA[
            // For example you want to invalidate email with length higher than 50.
            mailValidator ev = new EmailValidator();
            ev.Validators.Add("Length higher that 50", s => s.Length > 50);
            string emailToValidate = "LooooooooooooooooooooooooooongEmaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaail@AsDfGH.com";
            string cleanEmail, error;
            EmailValidationResult isValid = ev.Validate(emailToValidate, out cleanEmail, out error);
            ]]></example>
      <value>A dictionary key provides a name for the rule that is used to generate the error,
            the value is a delegate that accepts a string (in this case the email to validate) and 
            returns a boolean to indicate whether the email has passed the rule.</value>
    </member>
    <member name="P:Rock.Framework.Validation.EmailValidator.Scrubbers">
      <summary>
            Gets the custom scrubbers list. You can set more advanced scrubbers that go beyond the basic regular expression replacement by
            providing a list of delegates of the form <![CDATA[Func<string,string>]]>. 
            </summary>
      <example>
        <code>
            // For example you want to have the emails in lower case.
            mailValidator ev = new EmailValidator();
            ev.Scrubbers.Add(s =&gt; s.ToLower());
            string emailToValidate = "AsDfG@AsDfGH.com";
            string cleanEmail, error;
            EmailValidationResult isValid = ev.Validate(emailToValidate, out cleanEmail, out error);
            </code>
      </example>
      <value>The scrubbers.</value>
    </member>
    <member name="T:Rock.Framework.Validation.EmailValidationResult">
      <summary>
            Email validator level. Indicated is the email is valid or where the validation failed.
            </summary>
    </member>
    <member name="F:Rock.Framework.Validation.EmailValidationResult.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Rock.Framework.Validation.EmailValidationResult.BadSyntax">
      <summary>
            Syntax failed
            </summary>
    </member>
    <member name="F:Rock.Framework.Validation.EmailValidationResult.BogusEmail">
      <summary>
            The email is a match with a bogus email expression.
            </summary>
    </member>
    <member name="F:Rock.Framework.Validation.EmailValidationResult.CustomValidatorFailed">
      <summary>
            A custom validator failed.
            </summary>
    </member>
    <member name="F:Rock.Framework.Validation.EmailValidationResult.BadDomain">
      <summary>
            Domain verification failed.
            </summary>
    </member>
    <member name="F:Rock.Framework.Validation.EmailValidationResult.SmtpError">
      <summary>
            An error occurred communicating with the SMTP server
            </summary>
    </member>
    <member name="F:Rock.Framework.Validation.EmailValidationResult.BadUser">
      <summary>
            The SMTP server was contacted but the SMTP server reported an error with the email address.
            </summary>
    </member>
    <member name="F:Rock.Framework.Validation.EmailValidationResult.Success">
      <summary>
            The email has been successfully validated.
            </summary>
    </member>
    <member name="T:Rock.Framework.Validation.Xml">
      <summary>
            XML, XSD and other XLM related validations.
            </summary>
    </member>
    <member name="M:Rock.Framework.Validation.Xml.ValidateXmlIsProperlyFormatted(System.String)">
      <summary>
            Validates that a string is properly formatted XML.
            </summary>
      <param name="xml">The XML.</param>
      <returns>true if xml is valid, false if it isn't</returns>
      <remarks>
            Given a string that is XML the method will validate the XML is well formed.  All nodes much match in case.  In other words the following XML would be invalid: <![CDATA[<Root>mydata</root>]]>.
            All nodes must have proper closing and ending tags.
            </remarks>
      <example>
        <code>
            string xml = "<![CDATA[<Client><Firstname>Dan</Firstname><Lastname>Gilbert</Lastname></Client>]]>";
            if (Xml.ValiateXmlIsProperlyFormatted(xml))
            {
                Console.WriteLine("Xml is valid.");
            } 
            else
            {
                Console.WriteLine("Xml is invalid.");
            }
            </code>
      </example>
    </member>
    <member name="T:Rock.Framework.Validation.ZipValidationType">
      <summary>
            Zip validation type
            </summary>
    </member>
    <member name="F:Rock.Framework.Validation.ZipValidationType.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Rock.Framework.Validation.ZipValidationType.ZipOnly">
      <summary>
            Will validate the first 5 digits of a zip.
            </summary>
    </member>
    <member name="F:Rock.Framework.Validation.ZipValidationType.Zip4Only">
      <summary>
            Will validate the last 4 digits of a zip.
            </summary>
    </member>
    <member name="F:Rock.Framework.Validation.ZipValidationType.Both">
      <summary>
            Will validate a full zip like 12345-1234.
            </summary>
    </member>
    <member name="T:Rock.Framework.Wcf.Behaviors.InlineWsdl">
      <summary>
            IEndpointBehavior implementation that will force WCF to generate all schemas 
            inline into the generated WSDL files, instead of as individual files.  <see cref="T:Rock.Framework.Wcf.Hosts.InlineWsdlServiceHostFactory" /> 
            for an example.
            </summary>
    </member>
    <member name="M:Rock.Framework.Wcf.Behaviors.InlineWsdl.ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>
            Writes custom Web Services Description Language (WSDL) elements into the generated WSDL for a contract.
            </summary>
      <param name="exporter">The <see cref="T:System.ServiceModel.Description.WsdlExporter" /> that exports the contract information.</param>
      <param name="context">Provides mappings from exported WSDL elements to the contract description.</param>
    </member>
    <member name="M:Rock.Framework.Wcf.Behaviors.InlineWsdl.ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>
            Writes custom Web Services Description Language (WSDL) elements into the generated WSDL for an endpoint.
            </summary>
      <param name="exporter">The <see cref="T:System.ServiceModel.Description.WsdlExporter" /> that exports the endpoint information.</param>
      <param name="context">Provides mappings from exported WSDL elements to the endpoint description.</param>
    </member>
    <member name="M:Rock.Framework.Wcf.Behaviors.InlineWsdl.AddImportedSchemas(System.Xml.Schema.XmlSchema,System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.List{System.Xml.Schema.XmlSchema})">
      <summary>
            Recursively extract all the list of imported
            schemas
            </summary>
      <param name="schema">Schema to examine</param>
      <param name="schemaSet">SchemaSet with all referenced schemas</param>
      <param name="importsList">List to add imports to</param>
    </member>
    <member name="M:Rock.Framework.Wcf.Behaviors.InlineWsdl.RemoveXsdImports(System.Xml.Schema.XmlSchema)">
      <summary>
            Remove any &lt;xsd:imports/&gt; in the schema
            </summary>
      <param name="schema">Schema to process</param>
    </member>
    <member name="M:Rock.Framework.Wcf.Behaviors.InlineWsdl.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
      <param name="endpoint">The endpoint to modify.</param>
      <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
    </member>
    <member name="M:Rock.Framework.Wcf.Behaviors.InlineWsdl.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>
            Implements a modification or extension of the client across an endpoint.
            </summary>
      <param name="endpoint">The endpoint that is to be customized.</param>
      <param name="clientRuntime">The client runtime to be customized.</param>
    </member>
    <member name="M:Rock.Framework.Wcf.Behaviors.InlineWsdl.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>
            Applies the dispatch behavior.
            </summary>
      <param name="endpoint">The endpoint.</param>
      <param name="endpointDispatcher">The dispatcher.</param>
    </member>
    <member name="M:Rock.Framework.Wcf.Behaviors.InlineWsdl.Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>
            Implement to confirm that the endpoint meets some intended criteria.
            </summary>
      <param name="endpoint">The endpoint to validate.</param>
    </member>
    <member name="M:Rock.Framework.Wcf.Behaviors.InlineWsdl.CreateBehavior">
      <summary>
            Creates a behavior extension based on the current configuration settings.
            </summary>
      <returns>The behavior extension.</returns>
    </member>
    <member name="P:Rock.Framework.Wcf.Behaviors.InlineWsdl.BehaviorType">
      <summary>
            Gets the type of behavior.
            </summary>
      <value>
      </value>
      <returns>A <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:Rock.Framework.Wcf.Behaviors.MessageInspector">
      <summary>
             Provides a custom behavior that allows a client or service to capture messages and log
             them or assist in debugging messages.
             </summary>
      <example>
        <code>
              private void CallService(string endPoint)
                {
                    MessageViewerInspector inspector = new MessageViewerInspector();
            
                    ServiceReference1.MyServiceClient proxy = new WindowsFormsApplication1.ServiceReference1.MyServiceClient(endPoint);
            
                    proxy.Endpoint.Behaviors.Add(inspector);
                    proxy.AddTwoNumbers(Int32.Parse(textBox1.Text), Int32.Parse(textBox2.Text));
                    proxy.Close();
            
                    richTextBox1.Text = inspector.RequestMessage;
                    richTextBox2.Text = inspector.ResponseMessage;
                }
             </code>
      </example>
    </member>
    <member name="M:Rock.Framework.Wcf.Behaviors.MessageInspector.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
      <param name="endpoint">The endpoint to modify.</param>
      <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
    </member>
    <member name="M:Rock.Framework.Wcf.Behaviors.MessageInspector.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>
            Implements a modification or extension of the client across an endpoint.
            </summary>
      <param name="endpoint">The endpoint that is to be customized.</param>
      <param name="clientRuntime">The client runtime to be customized.</param>
    </member>
    <member name="M:Rock.Framework.Wcf.Behaviors.MessageInspector.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>
            Implements a modification or extension of the service across an endpoint.
            </summary>
      <param name="endpoint">The endpoint that exposes the contract.</param>
      <param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
    </member>
    <member name="M:Rock.Framework.Wcf.Behaviors.MessageInspector.Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>
            Implement to confirm that the endpoint meets some intended criteria.
            </summary>
      <param name="endpoint">The endpoint to validate.</param>
    </member>
    <member name="P:Rock.Framework.Wcf.Behaviors.MessageInspector.RequestMessage">
      <summary>
            Gets or sets the request message.
            </summary>
      <value>The request message.</value>
    </member>
    <member name="P:Rock.Framework.Wcf.Behaviors.MessageInspector.ResponseMessage">
      <summary>
            Gets or sets the response message.
            </summary>
      <value>The response message.</value>
    </member>
    <member name="T:Rock.Framework.Wcf.DataContracts.BrokenRule">
      <summary>
            This class represents a broken rule.  The rule can be a business rule, validation rule or other.
            </summary>
    </member>
    <member name="M:Rock.Framework.Wcf.DataContracts.BrokenRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Wcf.DataContracts.BrokenRule" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Wcf.DataContracts.BrokenRule.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Wcf.DataContracts.BrokenRule" /> class.
            </summary>
      <param name="property">The property.</param>
      <param name="error">The error.</param>
    </member>
    <member name="P:Rock.Framework.Wcf.DataContracts.BrokenRule.Property">
      <summary>
            Gets or sets the property.
            </summary>
      <value>The property.</value>
    </member>
    <member name="P:Rock.Framework.Wcf.DataContracts.BrokenRule.Error">
      <summary>
            Gets or sets the error.
            </summary>
      <value>The error.</value>
    </member>
    <member name="T:Rock.Framework.Wcf.DataContracts.ExceptionItem">
      <summary>
            Represents an Exception that has occured in the application.
            </summary>
    </member>
    <member name="M:Rock.Framework.Wcf.DataContracts.ExceptionItem.#ctor(System.Exception)">
      <summary>
            This is the preferred constructor. All other constructors for this type should
            be implemented in terms of this one.
            </summary>
      <param name="ex">System.Exception object to wrap this instance around</param>
    </member>
    <member name="M:Rock.Framework.Wcf.DataContracts.ExceptionItem.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="P:Rock.Framework.Wcf.DataContracts.ExceptionItem.Message">
      <summary>
            This provides access to Exceptions top level message
            </summary>
    </member>
    <member name="P:Rock.Framework.Wcf.DataContracts.ExceptionItem.Type">
      <summary>
            Stores the system.type of the exception that this was created from
            </summary>
    </member>
    <member name="P:Rock.Framework.Wcf.DataContracts.ExceptionItem.InnerItem">
      <summary>
            Provides access to the next Exception item in the collection
            </summary>
    </member>
    <member name="T:Rock.Framework.Wcf.Hosts.InlineWsdlServiceHost">
      <summary>
            A WCF ServiceHost that provides a flat inline WSDL.
            <remarks>
            Use this if you are self hosting.  Otherwise use the factory.
            </remarks></summary>
    </member>
    <member name="M:Rock.Framework.Wcf.Hosts.InlineWsdlServiceHost.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Wcf.Hosts.InlineWsdlServiceHost" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Wcf.Hosts.InlineWsdlServiceHost.#ctor(System.Type,System.Uri[])">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Wcf.Hosts.InlineWsdlServiceHost" /> class.
            </summary>
      <param name="serviceType">Type of the service.</param>
      <param name="baseAddresses">The base addresses.</param>
    </member>
    <member name="M:Rock.Framework.Wcf.Hosts.InlineWsdlServiceHost.#ctor(System.Object,System.Uri[])">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Wcf.Hosts.InlineWsdlServiceHost" /> class.
            </summary>
      <param name="singeltonInstance">The singelton instance.</param>
      <param name="baseAddresses">The base addresses.</param>
    </member>
    <member name="M:Rock.Framework.Wcf.Hosts.InlineWsdlServiceHost.ApplyConfiguration">
      <summary>
            Loads the service description information from the configuration file and applies it to the runtime being constructed.
            </summary>
      <exception cref="T:System.InvalidOperationException">The description of the service hosted is null.</exception>
    </member>
    <member name="T:Rock.Framework.Wcf.Hosts.InlineWsdlServiceHostFactory">
      <summary>
            A factory that provides a flattened WSDL for WCF Service Hosts. 
            It provides instances of <see cref="T:System.ServiceModel.ServiceHost"></see> in managed hosting environments where  
            the host instance is created dynamically in response to incoming messages and also can be used in IIS service hosts.
            <para>
            See remarks for how to apply to IIS service hosts.
            </para></summary>
      <remarks>
        <para>To flatten a WSDL in a service hosted in IIS the easiest way to flatten it is to edit the .svc file using the XML Editor in 
            Visual Studio (right click, open with, select XML editor). Add the factory tag as shown in 
            the example below.  Refresh your WSDL and the schemas should be now flattened.</para>
        <para>NOTE: If your WSDL is not flattening properly, see if you have TEMPURI namespaces in your WSDL. If you do then you have a 
            namespace problem.  You may need to add the correct namespace on your service by adding a [ServiceBehavior] attribute as well 
            as specifying the bindingNamespace on the binding.</para>
      </remarks>
      <example>
        <code><![CDATA[
            <%@ ServiceHost Language="C#" Debug="true" Service="Rock.Core.Logging.CentralizedService.Web.WebService" CodeBehind="Web.svc.cs" Factory="Rock.Framework.Wcf.Hosts.InlineWsdlServiceHostFactory, Rock.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=e3e50ed925359848" %>
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Wcf.Hosts.InlineWsdlServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])">
      <summary>
            Creates a <see cref="T:System.ServiceModel.ServiceHost" /> for a specified type of service with a specific base address.
            </summary>
      <param name="serviceType">Specifies the type of service to host.</param>
      <param name="baseAddresses">The <see cref="T:System.Array" /> of type <see cref="T:System.Uri" /> that contains the base addresses for the service hosted.</param>
      <returns>
            A <see cref="T:System.ServiceModel.ServiceHost" /> for the type of service specified with a specific base address.
            </returns>
    </member>
    <member name="T:Rock.Framework.Wcf.Service">
      <summary>
            Wrapper for WCF calls which will perform proper clean up and closing.
            </summary>
      <example>
        <code><![CDATA[
            var client = new ServiceClient();
            string result = string.Empty;
            client.Use((instance) => { result = instance.GetData(1); });
            client = new ServiceClient();
            result = client.Use<ServiceClient, string>((instance) => { return instance.GetData(1); });
            Service.Use<ServiceClient>(new ServiceClient(), (instance) => { instance.GetData(1); });
            Service.Use<ServiceClient, string>(new ServiceClient(), (instance) => { return instance.GetData(1); });
            ]]></code>
      </example>
      <remarks>
            This is a wrapper for WCF disposing pattern.
            The typical "using" can cause problems as noted in http://msdn.microsoft.com/en-us/library/aa355056.aspx.
            This wrapper only supports default named endpoint so it does not need to recreate the object on every use.
            This pattern is derived from http://web.archive.org/web/20100703123454/http://old.iserviceoriented.com/blog/post/Indisposable+-+WCF+Gotcha+1.aspx
            and http://brucezhang.wordpress.com/2009/05/16/dispose-in-wcf/
            </remarks>
    </member>
    <member name="M:Rock.Framework.Wcf.Service.Use``1(``0,System.Action{``0})">
      <summary>
            Uses the specified client.
            </summary>
      <typeparam name="T">The Type of Client to use</typeparam>
      <param name="client">The client.</param>
      <param name="action">The action.</param>
    </member>
    <member name="M:Rock.Framework.Wcf.Service.Use``2(``0,System.Func{``0,``1})">
      <summary>
            Uses the specified client.
            </summary>
      <typeparam name="T">The Type of Client to use</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="client">The client.</param>
      <param name="func">The func.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Rock.Framework.Wcf.ServiceContracts.ResponseBase">
      <summary>
             All interopable services that return messages should inherit from this class  
             to provide a standard way to handle broken rules and exceptions for consumers.  
             Using this base class provides cross platform interopability between platforms that 
             cannot fully support FaultExeceptions.
             </summary>
      <example>
        <code>
              public class PullCreditResponse : ResponseBase 
              {
                public PullCreditResponse()
                {
                    
                }
            
                [DataMember]
                public int CreditScore { get; set; }
               }
               
               public class CreditService : IPullCredit
               {
                 public PullCreditResponse PullCredit(PullCreditRequest request)
                 {
                   PullCreditResponse response = new PullCreditResponse();
                   // check some rules
                   if (String.IsNullOrEmpty(request.Ssn))
                   {
                     response.BrokenRules.Add(new BrokenRule("Ssn", "Ssn is a required field"));
                   }
                   
                   if (response.BrokenRules.Count != 0)
                   {
                     return response;
                   }
                   // continue process credit request
                   CreditService service = new CreditService();
                   CreditRequest req = Translator.TranslatePullCreditRequestToCreditRequest(request);
                   try
                   {
                     CreditResponse rep = service.PullCredit(req);
                     response = Translator.TranslateCreditResponseToPullCreditResponse(rep);
                   }
                   catch (PullCreditException ex)
                   {
                     Global.Logger.Error("Cannot pull credit", ex);
                     response.Exception = new ExceptionItem(ex);
                   }
                   return response;
                 }
               }
             </code>
      </example>
    </member>
    <member name="P:Rock.Framework.Wcf.ServiceContracts.ResponseBase.HasErrors">
      <summary>
            Gets a value indicating whether this instance has errors.
            </summary>
      <value>
        <c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Wcf.ServiceContracts.ResponseBase.BrokenRules">
      <summary>
            Gets or sets the broken rules.
            </summary>
      <value>The broken rules.</value>
    </member>
    <member name="P:Rock.Framework.Wcf.ServiceContracts.ResponseBase.Exception">
      <summary>
            Gets or sets the exception.
            </summary>
      <value>The exception.</value>
    </member>
    <member name="T:Rock.Framework.Messaging.EmailInvalidException">
      <summary>
            Thrown when email is not in the proper format.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.EmailInvalidException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.EmailInvalidException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="T:Rock.Framework.Messaging.IMessageSender">
      <summary>
            Defines an interface for sending messages.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.IMessageSender.SendMessage(System.String)">
      <summary>
            Sends message data.
            </summary>
      <param name="data">The data to be sent.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.MessageExtensions.CheckForInvalidProperties``1(``0)">
      <summary>
            Checks for invalid properties.
            </summary>
      <typeparam name="TMessage">The type of the message.</typeparam>
      <param name="message">The message.</param>
      <exception cref="T:System.ArgumentNullException">
            ApiKey
            or
            MessageClientId
            </exception>
      <exception cref="T:System.ArgumentException">AppId is invalid;AppId</exception>
    </member>
    <member name="T:Rock.Framework.Messaging.MessageSender">
      <summary>
            The default implementation of <see cref="T:Rock.Framework.Messaging.IMessageSender" />. Sends messages to sonic via an HTTP POST.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.MessageSender.SendMessage(System.String)">
      <summary>
            Sends message data.
            </summary>
      <param name="data">The data to be sent.</param>
      <exception cref="T:System.NotSupportedException">The request cache validator indicated that the response for this request can be served from the cache; however, this request includes data to be sent to the server. Requests that send data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented. </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort">
        </see> was previously called.-or- The time-out period for the request expired.-or- An error occurred while processing the request. </exception>
      <exception cref="T:System.InvalidOperationException">The stream is already in use by a previous call to <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see>.-or- <see cref="P:System.Net.HttpWebRequest.TransferEncoding"></see> is set to a value and <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false. </exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method">
        </see> is GET or HEAD, and either <see cref="P:System.Net.HttpWebRequest.ContentLength"></see> is greater or equal to zero or <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is true.-or- <see cref="P:System.Net.HttpWebRequest.KeepAlive"></see> is true, <see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering"></see> is false, <see cref="P:System.Net.HttpWebRequest.ContentLength"></see> is -1, <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false, and <see cref="P:System.Net.HttpWebRequest.Method"></see> is POST or PUT. </exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:Rock.Framework.Messaging.MessageSender.SonicUrl">
      <summary>
            Gets the url that is used to when posting to sonic.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.ISenderMessage">
      <summary>
            Defines the interface for an outgoing message.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.ISenderMessage.StringValue">
      <summary>
            Gets the string value of the message.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.ISenderMessage.BinaryValue">
      <summary>
            Gets the binary value of the message.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.ISenderMessage.MessageFormat">
      <summary>
            Gets the message format of the message.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.ISenderMessage.Headers">
      <summary>
            Gets the headers of the message.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.BinarySenderMessage">
      <summary>
            An implementation of <see cref="T:Rock.Framework.Messaging.ISenderMessage" /> for use when a byte array is the
            payload of the message.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.BinarySenderMessage.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.BinarySenderMessage" /> class using
            <see cref="F:Rock.Framework.Messaging.MessageFormat.Binary" /> for its format. The value of
            <see cref="P:Rock.Framework.Messaging.BinarySenderMessage.StringValue" /> will be the result of a base 64 encoding operation on
            <paramref name="binaryValue" />.
            </summary>
      <param name="binaryValue">The binary value of the message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.BinarySenderMessage.#ctor(System.Byte[],Rock.Framework.Messaging.MessageFormat,System.Text.Encoding)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.BinarySenderMessage" /> class. If
            <paramref name="messageFormat" /> is <see cref="F:Rock.Framework.Messaging.MessageFormat.Binary" />,
            the value of <see cref="P:Rock.Framework.Messaging.BinarySenderMessage.StringValue" /> will be the result of a base 64 encoding
            operation on <paramref name="binaryValue" />. Otherwise, <paramref name="encoding" />
            (or <see cref="P:System.Text.Encoding.UTF8" /> if null) will be used to obtain the value of
            <see cref="P:Rock.Framework.Messaging.BinarySenderMessage.StringValue" />.
            </summary>
      <param name="binaryValue">The binary value of the message.</param>
      <param name="messageFormat">The message's format.</param>
      <param name="encoding">
            The encoding to use when converting the binary value to a string if 
            <paramref name="messageFormat" /> is not <see cref="F:Rock.Framework.Messaging.MessageFormat.Binary" />.
            </param>
    </member>
    <member name="P:Rock.Framework.Messaging.BinarySenderMessage.StringValue">
      <summary>
            Gets the string value of the message.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.BinarySenderMessage.BinaryValue">
      <summary>
            Gets the binary value of the message.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.BinarySenderMessage.MessageFormat">
      <summary>
            Gets the message format of the message.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.BinarySenderMessage.Headers">
      <summary>
            Gets the headers for this message.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.IMessagingScenarioFactory">
      <summary>
            Defines an interface for creating instances of various messaging scenarios.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.IMessagingScenarioFactory.CreateQueueProducers(System.String,System.Int32)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.ISender" /> that use the queue producer scenario.
            </summary>
      <param name="name">The name of the queue.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.ISender" /> to return.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.ISender" /> that use the queue producer scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.IMessagingScenarioFactory.CreateQueueConsumers(System.String,System.Int32)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that use the queue consumer scenario.
            </summary>
      <param name="name">The name of the queue.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> to return.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that use the queue consumer scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.IMessagingScenarioFactory.CreateTopicPublishers(System.String,System.Int32)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.ISender" /> that use the topic publisher scenario.
            </summary>
      <param name="name">The name of the topic.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.ISender" /> to return.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.ISender" /> that use the topic publisher scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.IMessagingScenarioFactory.CreateTopicSubscribers(System.String,System.Int32)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that use the topic subscriber scenario.
            </summary>
      <param name="name">The name of the topic.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> to return.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that use the topic subscriber scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.IMessagingScenarioFactory.CreateSenderReceivers(System.String,System.Int32)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.
            </summary>
      <param name="name">The name of the request reply scenario.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" /> to return.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.</returns>
    </member>
    <member name="T:Rock.Framework.Messaging.IReceiver">
      <summary>
            Defines an interface for receiving messages.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.IReceiver.Start(System.String)">
      <summary>
            Starts listening for messages.
            </summary>
      <param name="selector">Also known as a 'routing key', this value enables only certain messages to be received.</param>
    </member>
    <member name="P:Rock.Framework.Messaging.IReceiver.Name">
      <summary>
            Gets the name of this instance of <see cref="T:Rock.Framework.Messaging.IReceiver" />.
            </summary>
    </member>
    <member name="E:Rock.Framework.Messaging.IReceiver.MessageReceived">
      <summary>
            Occurs when a message is received.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.IReceiverMessage">
      <summary>
            Defines the interface for a received message.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.IReceiverMessage.GetStringValue(System.Text.Encoding)">
      <summary>
            Gets the string value of the message. If the implemenation "speaks" binary,
            <paramref name="encoding" /> is used to convert the binary message to a string.
            If <paramref name="encoding" /> is null, the binary data will be converted using
            base 64 encoding.
            </summary>
      <param name="encoding">
            The encoding to use. A null value indicates that base 64 encoding should be used.
            </param>
      <returns>The string value of the message.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.IReceiverMessage.GetBinaryValue(System.Text.Encoding)">
      <summary>
            Gets the binary value of the message. If the implemenation "speaks" string,
            <paramref name="encoding" /> is used to convert the string message to a byte array.
            If <paramref name="encoding" /> is null, the string data will be converted using
            base 64 encoding.
            </summary>
      <param name="encoding">
            The encoding to use. A null value indicates that base 64 encoding should be used.
            </param>
      <returns>The binary value of the message.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.IReceiverMessage.GetHeaderValue(System.String,System.Text.Encoding)">
      <summary>
            Gets a header value by key. If the implementation "speaks" binary,
            <paramref name="encoding" /> is used to convert the binary header to a string.
            If <paramref name="encoding" /> is null, the binary header will be converted
            using base 64 encoding.
            </summary>
      <param name="key">The key of the header to retrieve.</param>
      <param name="encoding">
            The encoding to use. A null value indicates that base 64 encoding should be used.
            </param>
      <returns>The string value of the header.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.IReceiverMessage.Acknowledge">
      <summary>
            Acknowledges the message.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.ISender">
      <summary>
            Defines an interface for sending messages.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.ISender.SendAsync(Rock.Framework.Messaging.ISenderMessage)">
      <summary>
            Asynchronously sends the specified message.
            </summary>
      <param name="message">The message to send.</param>
    </member>
    <member name="P:Rock.Framework.Messaging.ISender.Name">
      <summary>
            Gets the name of this instance of <see cref="T:Rock.Framework.Messaging.ISender" />.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.ISenderReceiver">
      <summary>
            Defines an interface for sending a message and receiving a response as one operation.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.ISenderReceiver.SendAndReceive(Rock.Framework.Messaging.ISenderMessage)">
      <summary>
            Sends the specified message, then returns a response message.
            </summary>
      <param name="message">The message to send.</param>
      <returns>The response message.</returns>
    </member>
    <member name="P:Rock.Framework.Messaging.ISenderReceiver.Name">
      <summary>
            Gets the name of this instance of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.MessageFormat">
      <summary>
            Defines various message formats.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.MessageFormat.Text">
      <summary>
            The message's string value is unformatted text.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.MessageFormat.Xml">
      <summary>
            The message's string value is an XML document.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.MessageFormat.Json">
      <summary>
            The message's string value is a JSON object.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.MessageFormat.Binary">
      <summary>
            The message's binary value is an unformatted byte array.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.MessageReceivedEventArgs">
      <summary>
            Provides data for the <see cref="E:Rock.Framework.Messaging.IReceiver.MessageReceived" /> event.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.MessageReceivedEventArgs.#ctor(Rock.Framework.Messaging.IReceiverMessage)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.MessageReceivedEventArgs" /> class.
            </summary>
      <param name="message">The received message.</param>
    </member>
    <member name="P:Rock.Framework.Messaging.MessageReceivedEventArgs.Message">
      <summary>
            Gets the received message.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.MessagingScenarioExtensions">
      <summary>
            Provides a set of methods that simplify usage of instances of <see cref="T:Rock.Framework.Messaging.ISender" />,
            <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />, and <see cref="T:Rock.Framework.Messaging.IReceiver" />.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioExtensions.Send(Rock.Framework.Messaging.ISender,Rock.Framework.Messaging.ISenderMessage)">
      <summary>
            Synchronously sends the specified message.
            </summary>
      <param name="source">The <see cref="T:Rock.Framework.Messaging.ISender" /> from which to send the message.</param>
      <param name="message">The message to send.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioExtensions.Send(Rock.Framework.Messaging.ISender,System.String)">
      <summary>
            Synchronously sends the specified string message using the <see cref="F:Rock.Framework.Messaging.MessageFormat.Text" /> format.
            </summary>
      <param name="source">The <see cref="T:Rock.Framework.Messaging.ISender" /> from which to send the message.</param>
      <param name="message">The message to send.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioExtensions.SendAsync(Rock.Framework.Messaging.ISender,System.String)">
      <summary>
            Asynchronously sends the specified string message using the <see cref="F:Rock.Framework.Messaging.MessageFormat.Text" /> format.
            </summary>
      <param name="source">The <see cref="T:Rock.Framework.Messaging.ISender" /> from which to send the message.</param>
      <param name="message">The message to send.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioExtensions.Send(Rock.Framework.Messaging.ISender,System.String,Rock.Framework.Messaging.MessageFormat)">
      <summary>
            Synchronously sends the specified string message.
            </summary>
      <param name="source">The <see cref="T:Rock.Framework.Messaging.ISender" /> from which to send the message.</param>
      <param name="message">The message to send.</param>
      <param name="messageFormat">The message's format.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioExtensions.SendAsync(Rock.Framework.Messaging.ISender,System.String,Rock.Framework.Messaging.MessageFormat)">
      <summary>
            Asynchronously sends the specified string message.
            </summary>
      <param name="source">The <see cref="T:Rock.Framework.Messaging.ISender" /> from which to send the message.</param>
      <param name="message">The message to send.</param>
      <param name="messageFormat">The message's format.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioExtensions.Send(Rock.Framework.Messaging.ISender,System.Byte[])">
      <summary>
            Synchronously sends the specified binary message using the <see cref="F:Rock.Framework.Messaging.MessageFormat.Binary" /> format.
            </summary>
      <param name="source">The <see cref="T:Rock.Framework.Messaging.ISender" /> from which to send the message.</param>
      <param name="message">The message to send.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioExtensions.SendAsync(Rock.Framework.Messaging.ISender,System.Byte[])">
      <summary>
            Asynchronously sends the specified binary message using the <see cref="F:Rock.Framework.Messaging.MessageFormat.Binary" /> format.
            </summary>
      <param name="source">The <see cref="T:Rock.Framework.Messaging.ISender" /> from which to send the message.</param>
      <param name="message">The message to send.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioExtensions.Send(Rock.Framework.Messaging.ISender,System.Byte[],Rock.Framework.Messaging.MessageFormat)">
      <summary>
            Synchronously sends the specified binary message.
            </summary>
      <param name="source">The <see cref="T:Rock.Framework.Messaging.ISender" /> from which to send the message.</param>
      <param name="message">The message to send.</param>
      <param name="messageFormat">The message's format.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioExtensions.SendAsync(Rock.Framework.Messaging.ISender,System.Byte[],Rock.Framework.Messaging.MessageFormat)">
      <summary>
            Asynchronously sends the specified binary message.
            </summary>
      <param name="source">The <see cref="T:Rock.Framework.Messaging.ISender" /> from which to send the message.</param>
      <param name="message">The message to send.</param>
      <param name="messageFormat">The message's format.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioExtensions.SendAndReceive(Rock.Framework.Messaging.ISenderReceiver,System.String)">
      <summary>
            Sends the specified string message, then returns a response message, using the
            <see cref="F:Rock.Framework.Messaging.MessageFormat.Text" /> format.
            </summary>
      <param name="source">The <see cref="T:Rock.Framework.Messaging.ISenderReceiver" /> from which to send and receive.</param>
      <param name="message">The string message to send.</param>
      <returns>The response message.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioExtensions.SendAndReceive(Rock.Framework.Messaging.ISenderReceiver,System.String,Rock.Framework.Messaging.MessageFormat)">
      <summary>
            Sends the specified string message, then returns a response message.
            </summary>
      <param name="source">The <see cref="T:Rock.Framework.Messaging.ISenderReceiver" /> from which to send and receive.</param>
      <param name="message">The string message to send.</param>
      <param name="messageFormat">The message's format.</param>
      <returns>The response message.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioExtensions.SendAndReceive(Rock.Framework.Messaging.ISenderReceiver,System.Byte[])">
      <summary>
            Sends the specified binary message, then returns a response message, using the
            <see cref="F:Rock.Framework.Messaging.MessageFormat.Binary" /> format.
            </summary>
      <param name="source">The <see cref="T:Rock.Framework.Messaging.ISenderReceiver" /> from which to send and receive.</param>
      <param name="message">The binary message to send.</param>
      <returns>The response message.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioExtensions.SendAndReceive(Rock.Framework.Messaging.ISenderReceiver,System.Byte[],Rock.Framework.Messaging.MessageFormat)">
      <summary>
            Sends the specified binary message, then returns a response message.
            </summary>
      <param name="source">The <see cref="T:Rock.Framework.Messaging.ISenderReceiver" /> from which to send and receive.</param>
      <param name="message">The binary message to send.</param>
      <param name="messageFormat">The message's format.</param>
      <returns>The response message</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioExtensions.Start(Rock.Framework.Messaging.IReceiver)">
      <summary>
            Starts listening for messages.
            </summary>
      <param name="source">The <see cref="T:Rock.Framework.Messaging.IReceiver" /> from which to receive messages.</param>
    </member>
    <member name="T:Rock.Framework.Messaging.MessagingScenarioFactory">
      <summary>
            Provides methods for creating instances of various messaging scenarios.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactory.CreateQueueProducer(System.String)">
      <summary>
            Creates a new instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the queue producer scenario
            by calling the <see cref="M:Rock.Framework.Messaging.MessagingScenarioFactoryExtensions.CreateQueueProducer(Rock.Framework.Messaging.IMessagingScenarioFactory,System.String)" /> extension method
            on the <see cref="P:Rock.Framework.Messaging.MessagingScenarioFactory.Current" /> property.
            </summary>
      <param name="name">The name of the queue.</param>
      <returns>A new instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the queue producer scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactory.GetQueueProducer(System.String)">
      <summary>
            Gets a cached instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the queue producer scenario.
            </summary>
      <param name="name">The name of the queue.</param>
      <returns>A cached instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the queue producer scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactory.CreateQueueConsumer(System.String)">
      <summary>
            Creates a new instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the queue consumer scenario
            by calling the <see cref="M:Rock.Framework.Messaging.MessagingScenarioFactoryExtensions.CreateQueueConsumer(Rock.Framework.Messaging.IMessagingScenarioFactory,System.String)" /> extension method
            on the <see cref="P:Rock.Framework.Messaging.MessagingScenarioFactory.Current" /> property.
            </summary>
      <param name="name">The name of the queue.</param>
      <returns>A new instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the queue consumer scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactory.GetQueueConsumer(System.String)">
      <summary>
            Gets a cached instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the queue consumer scenario.
            </summary>
      <param name="name">The name of the queue.</param>
      <returns>A cached instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the queue consumer scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactory.CreateTopicPublisher(System.String)">
      <summary>
            Creates a new instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the topic publisher scenario
            by calling the <see cref="M:Rock.Framework.Messaging.MessagingScenarioFactoryExtensions.CreateTopicPublisher(Rock.Framework.Messaging.IMessagingScenarioFactory,System.String)" /> extension method
            on the <see cref="P:Rock.Framework.Messaging.MessagingScenarioFactory.Current" /> property.
            </summary>
      <param name="name">The name of the topic.</param>
      <returns>A new instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the topic publisher scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactory.GetTopicPublisher(System.String)">
      <summary>
            Gets a cached instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the topic publisher scenario.
            </summary>
      <param name="name">The name of the topic.</param>
      <returns>A cached instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the topic publisher scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactory.CreateTopicSubscriber(System.String)">
      <summary>
            Creates a new instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the topic subscriber scenario
            by calling the <see cref="M:Rock.Framework.Messaging.MessagingScenarioFactoryExtensions.CreateTopicSubscriber(Rock.Framework.Messaging.IMessagingScenarioFactory,System.String)" /> extension method
            on the <see cref="P:Rock.Framework.Messaging.MessagingScenarioFactory.Current" /> property.
            </summary>
      <param name="name">The name of the topic.</param>
      <returns>A new instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the topic subscriber scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactory.GetTopicSubscriber(System.String)">
      <summary>
            Gets a cached instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the topic subscriber scenario.
            </summary>
      <param name="name">The name of the topic.</param>
      <returns>A cached instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the topic subscriber scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactory.CreateSenderReceiver(System.String)">
      <summary>
            Creates a new instance of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" /> by calling the
            <see cref="M:Rock.Framework.Messaging.MessagingScenarioFactoryExtensions.CreateTopicSubscriber(Rock.Framework.Messaging.IMessagingScenarioFactory,System.String)" /> extension method
            on the <see cref="P:Rock.Framework.Messaging.MessagingScenarioFactory.Current" /> property.
            </summary>
      <param name="name">The name of the request reply scenario.</param>
      <returns>A new instance of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactory.GetSenderReceiver(System.String)">
      <summary>
            Gets a cached instance of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.
            </summary>
      <param name="name">The name of the request reply scenario.</param>
      <returns>A cached instance of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactory.ShutDown">
      <summary>
            Shut down the factory in preparation for exiting the application.
            Calling this method puts the <see cref="T:Rock.Framework.Messaging.MessagingScenarioFactory" /> class
            into an unusable state.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.MessagingScenarioFactory.Current">
      <summary>
            Gets or sets the <see cref="T:Rock.Framework.Messaging.IMessagingScenarioFactory" /> object that is used
            by the various methods of <see cref="T:Rock.Framework.Messaging.MessagingScenarioFactory" />. If set to
            null, the value will revert to the default value.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.MessagingScenarioFactoryExtensions">
      <summary>
            Provides a set of static methods for creating various messaging scenarios using an instance of <see cref="T:Rock.Framework.Messaging.IMessagingScenarioFactory" />.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactoryExtensions.CreateQueueProducer(Rock.Framework.Messaging.IMessagingScenarioFactory,System.String)">
      <summary>
            Creates an instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the queue producer scenario.
            </summary>
      <param name="source">The factory from which to create the scenario.</param>
      <param name="name">The name of the queue.</param>
      <returns>An instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the queue producer scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactoryExtensions.CreateQueueConsumer(Rock.Framework.Messaging.IMessagingScenarioFactory,System.String)">
      <summary>
            Creates an instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the queue consumer scenario.
            </summary>
      <param name="source">The factory from which to create the scenario.</param>
      <param name="name">The name of the queue.</param>
      <returns>An instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the queue consumer scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactoryExtensions.CreateTopicPublisher(Rock.Framework.Messaging.IMessagingScenarioFactory,System.String)">
      <summary>
            Creates an instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the topic publisher scenario.
            </summary>
      <param name="source">The factory from which to create the scenario.</param>
      <param name="name">The name of the topic.</param>
      <returns>An instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the topic publisher scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactoryExtensions.CreateTopicSubscriber(Rock.Framework.Messaging.IMessagingScenarioFactory,System.String)">
      <summary>
            Creates an instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the topic subscriber scenario.
            </summary>
      <param name="source">The factory from which to create the scenario.</param>
      <param name="name">The name of the topic.</param>
      <returns>An instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the topic subscriber scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.MessagingScenarioFactoryExtensions.CreateSenderReceiver(Rock.Framework.Messaging.IMessagingScenarioFactory,System.String)">
      <summary>
            Creates an instance of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.
            </summary>
      <param name="source">The factory from which to create the scenario.</param>
      <param name="name">The name of the scenario.</param>
      <returns>An instance of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.</returns>
    </member>
    <member name="T:Rock.Framework.Messaging.ReceiverMessageExtensions">
      <summary>
            Provides a set of methods for obtaining values from objects that implement
            <see cref="T:Rock.Framework.Messaging.IReceiverMessage" />.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.ReceiverMessageExtensions.GetStringValue(Rock.Framework.Messaging.IReceiverMessage)">
      <summary>
            Gets the string value of the message. If the implemenation "speaks" binary,
            <see cref="P:System.Text.Encoding.UTF8" /> is used to convert the binary message to a string.
            </summary>
      <param name="source">The message from which to obtain a string value.</param>
      <returns>The string value of the message.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.ReceiverMessageExtensions.GetBinaryValue(Rock.Framework.Messaging.IReceiverMessage)">
      <summary>
            Gets the binary value of the message. If the implemenation "speaks" string,
            <see cref="P:System.Text.Encoding.UTF8" /> is used to convert the string message to a byte array.
            </summary>
      <param name="source">The message from which to obtain a binary value.</param>
      <returns>The binary value of the message.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.ReceiverMessageExtensions.GetHeaderValue(Rock.Framework.Messaging.IReceiverMessage,System.String)">
      <summary>
            Gets a header value by key. If the implementation "speaks" binary,
            <see cref="P:System.Text.Encoding.UTF8" /> is used to convert the binary header to a string.
            </summary>
      <param name="source">The message from which to obtain a binary value.</param>
      <param name="key">The key of the header to retrieve.</param>
      <returns>The string value of the header.</returns>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.IAutoRecoverConfig">
      <summary>
            Represents the configuration for the auto-recovery mechanism.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.IAutoRecoverConfig.Enabled">
      <summary>
            Gets a value indicating whether the auto-recovery mechanism is enabled.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.IAutoRecoverConfig.IntervalMinutes">
      <summary>
            Gets the interval minutes for the auto-recovery mechanism.
            </summary>
      <value>
            The interval in minutes.
            </value>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.AutoRecoverConfig">
      <summary>
            An immutable implementation of <see cref="T:Rock.Framework.Messaging.SonicMQ.IAutoRecoverConfig" />.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.AutoRecoverConfig.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.AutoRecoverConfig" /> class.
            </summary>
      <param name="enabled">Whether the auto-recovery mechanism is enabled.</param>
      <param name="intervalMinutes">The interval, in minutes, for the auto-recovery mechanism.</param>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.AutoRecoverConfig.Enabled">
      <summary>
            Gets a value indicating whether the auto-recovery mechanism is enabled.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.AutoRecoverConfig.IntervalMinutes">
      <summary>
            Gets the interval, in minutes, for the auto-recovery mechanism.
            </summary>
      <value>
            The interval in minutes.
            </value>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.ISonicConfigProvider">
      <summary>
            Represents an object that creates instances of <see cref="T:Rock.Framework.Messaging.SonicMQ.ISonicArgs" />.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.ISonicConfigProvider.GetSonicArgs(System.String)">
      <summary>
            Gets an instance of <see cref="T:Rock.Framework.Messaging.SonicMQ.ISonicArgs" /> for the given name.
            </summary>
      <param name="name">The name of the args.</param>
      <returns>An instance of <see cref="T:Rock.Framework.Messaging.SonicMQ.ISonicArgs" />.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.ISonicConfigProvider.GetAutoRecoverConfig">
      <summary>
            Gets the configuration for auto-recovery.
            </summary>
      <returns>An instance of <see cref="T:Rock.Framework.Messaging.SonicMQ.IAutoRecoverConfig" />.</returns>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.FileSonicConfigProvider">
      <summary>
            An implementation of <see cref="T:Rock.Framework.Messaging.SonicMQ.ISonicConfigProvider" /> that reads from an app.config or a web.config.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.FileSonicConfigProvider.GetSonicArgs(System.String)">
      <summary>
            Gets an instance of <see cref="T:Rock.Framework.Messaging.SonicMQ.ISonicArgs" /> for the given name.
            </summary>
      <param name="name">The name of the args.</param>
      <returns>An instance of <see cref="T:Rock.Framework.Messaging.SonicMQ.ISonicArgs" />.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.FileSonicConfigProvider.GetAutoRecoverConfig">
      <summary>
            Gets the configuration for auto-recovery.
            </summary>
      <returns>An instance of <see cref="T:Rock.Framework.Messaging.SonicMQ.IAutoRecoverConfig" />.</returns>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.FlowToDisk">
      <summary>
            If the setting is on, specifies that when a subscriber's in-memory buffer 
            is full the broker should offload the messages for the subscriber to the database without blocking the publisher(s). 
            </summary>
      <remarks>
            If flow control is active, MessageProducers might block, waiting for MessageConsumers to
            process messages accumulated in in-memory buffers. The flow-to-disk feature relieves
            this problem by temporarily writing messages to disk, allowing message production to
            continue despite slow message consumption. This feature is designed for Pub/Sub
            messaging, in which one slow consumer might hold up message production for other
            consumers. 
            </remarks>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.FlowToDisk.UseBrokerSetting">
      <summary>
            Specifies that the broker setting of FLOW_TO_DISK is used for the consumer.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.FlowToDisk.On">
      <summary>
            Specifies that FLOW_TO_DISK is on for the consumer, regardless of the broker setting.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.FlowToDisk.Off">
      <summary>
            Specifies that FLOW_TO_DISK is off for the consumer, regardless of the broker setting.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.ISonicArgs">
      <summary>
            Interface for base sonic args.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.BrokerServerAddresses">
      <summary>
            The broker server addresses seperated by a , with no space. Example: "tcp://ql1sonicdev1:2506,tcp://ql2sonicdev1:2506"
            </summary>
      <remarks>
            This allows us to support fault tolerance connections. If one server is down, it will try the other one or randomize the servers
            depending on how the <see cref="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.Sequential" /> setting is set.
            </remarks>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.UserName">
      <summary>
            Username
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.Password">
      <summary>
            Password
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.Transacted">
      <summary>
            If true, the session is transacted and the acknowledgementMode setting has no effect,
            because the transaction implicitly handles acknowledgement.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.SonicDeliveryMode">
      <summary>
            Gets or sets the sonic delivery mode.
            </summary>
      <value>
            The sonic delivery mode.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.AcknowledgeMode">
      <summary>
            Gets or sets the acknowledge mode. Indicates whether the client acknowledges messages it receives. If the session only
            produces messages, acknowledgementMode has no effect
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.PersistentMessageDelivery">
      <summary>
            Important messages should be sent with a PERSISTENT delivery mode and flagged to be
            preserved on expiration or when they cannot be routed successfully across routing nodes.
            You can choose to also generate an administrative notification when a message is
            enqueued on the DMQ. 
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.PreFetchCount">
      <summary>
            The number of messages that the consumer takes off the queue to
            buffer locally for consumption and acknowledgment (default value = 3).
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.FlowControlDisabled">
      <summary>
            Gets or sets a value indicating whether flow control is disabled.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.FlowToDisk">
      <summary>
            If flow control is active, MessageProducers might block, waiting for MessageConsumers to
            process messages accumulated in in-memory buffers. The flow-to-disk feature relieves
            this problem by temporarily writing messages to disk, allowing message production to
            continue despite slow message consumption. This feature is designed for Pub/Sub
            messaging, in which one slow consumer might hold up message production for other
            consumers.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.PreFetchThreshold">
      <summary>
            The minimum number of messages in the local buffer that will
            trigger a request for the delivery of more messages to the consumer. The number of
            requested messages is equal to the PrefetchCount (default value = 1).
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.SelectorAtBroker">
      <summary>
            Gets or sets a value indicating whether [set selector at broker].
            </summary>
      <remarks>
        <para>If this value is set to true then messages can be selected from the queue by setting a selector for messages. A common example is 
            maybe you want messages to be picked up by clients based on their ID. You can set their ID on the message and then use that ID to select 
            their messages.</para>
        <para>Connections where message selectors are used can receive a large number of messages
            from the broker and select only a few messages for processing. This condition can be
            relieved by setting the connection to evaluate messages through a given message selector
            on the broker and then deliver only the qualified message to the client. 
            Choosing where message selectors do their filtering does not effect the messages 
            processed, but might drastically reduce the message traffic at the expense of some 
            additional overhead on the broker. These options can also be set on the factory through 
            the Management Console (see the Progress SonicMQ Configuration and Management 
            Guide for information).</para>
      </remarks>
      <value>
        <c>true</c> if [set selector at broker]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.DurableMessageOrder">
      <summary>
            Strict message ordering is not enabled by default.  Setting this will set strict message 
            order enforcement. 
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.MonitorInterval">
      <summary>
            Gets or sets the monitor interval.
            </summary>
      <value>
            The monitor interval.
            </value>
      <remarks>
        <para>
            The monitoring interval is a property of the ConnectionFactory that is set before 
            connections are created. The value found in the factory when a connection is created applies to any sessions
            created by that connection, and cannot be subsequently modified. The property defines 
            the duration of the monitoring interval in seconds, where 0 indicates that flow control 
            monitoring is disabled for all sessions on the connection.  
            Since flow control pause notifications are generated after the session is blocked for one 
            full monitoring interval, it might take as long as another monitoring interval from the time 
            the session becomes blocked before a notification is generated. 
            The block-detection logic monitors whether one or more produced messages remain 
            blocked in the client buffers due to flow control. The logic does not monitor conditions 
            where the client is unable to send a message due to network congestion or other loadrelated 
            factors.
            </para>
        <para>
            If a producer session remains blocked over multiple monitoring intervals, a flow control 
            pause notification is generated at the end of each monitoring interval as long as the 
            producer session remains blocked. When the session becomes unblocked, a flow control 
            resume notification is generated.
            </para>
      </remarks>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.Sequential">
      <summary>
            Uses the first broker in the list if set to true, otherwise will select randomly. 
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.FaultTolerantReconnectTimeout">
      <summary>
            When a problem is detected with a fault tolerant connection, the client runtime tries to 
            resume the connection. If it can connect to the same broker, it does; otherwise, it tries to 
            reconnect to a standby broker (if you are using broker replication).
            </summary>
      <remarks>
        <para>
            A positive integer — Specifies a timeout; the client runtime abandons further 
            reconnection attempts if the timeout is exceeded. Zero (0) — Specifies no timeout; the client runtime tries to reconnect indefinitely.
            </para>
        <para>
            If the client fails to reconnect in the allocated time, the client is completely disconnected 
            by the broker. A fault-tolerant client runtime that attempts to reconnect late and after the 
            broker has discarded state will encounter a connection failure. When the client runtime 
            fails to resume a connection, the client runtime drops the connection and returns a 
            connection dropped exception to the client application’s ExceptionListener.
            </para>
      </remarks>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.InitialConnectTimeout">
      <summary>
            When the client runtime tries to establish an initial connection, it sequentially tries the URLs listed in the ConnectionFactory
            </summary>
      <remarks>
            The client runtime continues to try to establish a connection until either a connection is 
            successful or the initial connect timeout is exceeded. If the client runtime is trying to 
            connect to a URL when a timeout occurs, it does not stop immediately. It must complete 
            its current attempt (and fail) before returning a failure to the client application. However, 
            it can return a failure before trying all URLs in the list.
            <para><list type="bullet"><item><term>Positive non-zero value</term><description> Specifies a timeout; the client runtime abandons further 
            connection attempts if the timeout is exceeded</description></item><item><term>Zero (0)</term><description>Specifies no timeout; the client runtime tries indefinitely</description></item><item><term> Negative one (-1)</term><description>
            Specifies that each URL is tried one time only; the client runtime tries each URL sequentially one at a time until a successful connection is 
            made or until all URLs are tried. This sequence is the same as the connection 
            sequence used for standard connections
            </description></item></list></para></remarks>
      <value>The initial connect timeout.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.IsFaultTolerantConnection">
      <summary>
            Gets or sets a value indicating whether this instance is fault tolerant connection.
            </summary>
      <value>
        <c>true</c> if this instance is fault tolerant connection; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.IsLoadBalanced">
      <summary>
            Load balancing is not enabled on any of our brokers, there are some times we might use it.  
            Any broker in a cluster can redirect incoming client connections to another broker in the 
            same cluster for the purpose of load balancing. Load balancing must be configured on the 
            broker. The client must also be configured to indicate that it is willing to have a connect 
            request re-directed to another broker.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.ClientId">
      <summary>
            Gets or sets the client id.
            </summary>
      <value>The client id.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.Destination">
      <summary>
            Name of the topic or the queue.  Example: rock.ql.lola
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.DurableSubscriber">
      <summary>
            Gets or sets a value indicating whether [durable subscriber].
            </summary>
      <value>
        <c>true</c> if [durable subscriber]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.DurableSubscriberName">
      <summary>
            Gets or sets the name of the durable subscriber.
            </summary>
      <value>The name of the durable subscriber.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.ServiceUrl">
      <summary>
            The service url you are posting to.  Optional as service url may be defined in Sonic.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode">
      <summary>
            A client marks a message as persistent if it feels that the application will have problems if the message 
            is lost in transit. A client marks a message as non-persistent if an occasional lost message is tolerable. 
            Clients use delivery mode to tell the runtime how to balance message transport reliability with throughput. 
            </summary>
      <remarks>
            Delivery mode covers only the transport of the message to its destination. Retention of a message at the 
            destination until its receipt is acknowledged is not guaranteed by a PERSISTENT delivery mode. Clients 
            should assume that message retention policies are set administratively. Message retention policy governs 
            the reliability of message delivery from destination to message consumer. For example, if a client's 
            message storage space is exhausted, some messages may be dropped in accordance with a site-specific message 
            retention policy. 
            </remarks>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode.None">
      <summary>
            Not implemented.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode.NonPersistent">
      <summary>
            This is the lowest-overhead delivery mode because it does not require that the message be logged to 
            stable storage. The level of runtime failure that causes a NON_PERSISTENT message to be lost is not defined. 
            The runtime must deliver a NON_PERSISTENT message with an at-most-once guarantee. This means that it 
            may lose the message, but it must not deliver it twice. 
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode.Persistent">
      <summary>
            This delivery mode instructs the runtime to log the message to stable storage as part of the client's send 
            operation. Only a hard media failure should cause a PERSISTENT message to be lost.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory">
      <summary>
            An implementation of <see cref="T:Rock.Framework.Messaging.IMessagingScenarioFactory" /> that creates various 
            scenarios that use Sonic endpoints.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.#ctor(Rock.Framework.Messaging.SonicMQ.ISonicConfigProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory" /> class.
            </summary>
      <param name="sonicConfigProvider">An object that creates an object that determines the configuration of instances the various messaging scenario objects.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateQueueProducers(System.String,System.Int32)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.ISender" /> that use the queue producer scenario.
            </summary>
      <param name="name">The name of the queue.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.ISender" /> to return.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.ISender" /> that use the queue producer scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateQueueProducers(System.String,System.Int32,Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.ISender" /> that use the queue producer scenario.
            </summary>
      <param name="name">The name of the queue.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.ISender" /> to return.</param>
      <param name="args">An object that determines the configuration of the resulting instances of <see cref="T:Rock.Framework.Messaging.ISender" />.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.ISender" /> that use the queue producer scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateQueueProducer(System.String,Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Creates an instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the queue producer scenario.
            </summary>
      <param name="name">The name of the queue.</param>
      <param name="args">An object that determines the configuration of the resulting instances of <see cref="T:Rock.Framework.Messaging.ISender" />.</param>
      <returns>An instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the queue producer scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateQueueConsumers(System.String,System.Int32)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that use the queue consumer scenario.
            </summary>
      <param name="name">The name of the queue.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> to return.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that use the queue consumer scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateQueueConsumers(System.String,System.Int32,Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that use the queue consumer scenario.
            </summary>
      <param name="name">The name of the queue.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> to return.</param>
      <param name="args">An object that determines the configuration of the resulting instances of <see cref="T:Rock.Framework.Messaging.IReceiver" />.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that use the queue consumer scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateQueueConsumer(System.String,Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Creates an instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the queue consumer scenario.
            </summary>
      <param name="name">The name of the queue.</param>
      <param name="args">An object that determines the configuration of the resulting instances of <see cref="T:Rock.Framework.Messaging.IReceiver" />.</param>
      <returns>An instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the queue consumer scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateTopicPublishers(System.String,System.Int32)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.ISender" /> that use the topic publisher scenario.
            </summary>
      <param name="name">The name of the topic.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.ISender" /> to return.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.ISender" /> that use the topic publisher scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateTopicPublishers(System.String,System.Int32,Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.ISender" /> that use the topic publisher scenario.
            </summary>
      <param name="name">The name of the topic.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.ISender" /> to return.</param>
      <param name="args">An object that determines the configuration of the resulting instances of <see cref="T:Rock.Framework.Messaging.ISender" />.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.ISender" /> that use the topic publisher scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateTopicPublisher(System.String,Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Creates an instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the topic publisher scenario.
            </summary>
      <param name="name">The name of the topic.</param>
      <param name="args">An object that determines the configuration of the resulting instances of <see cref="T:Rock.Framework.Messaging.ISender" />.</param>
      <returns>An instance of <see cref="T:Rock.Framework.Messaging.ISender" /> that uses the topic publisher scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateTopicSubscribers(System.String,System.Int32)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that use the topic subscriber scenario.
            </summary>
      <param name="name">The name of the topic.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> to return.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that use the topic subscriber scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateTopicSubscribers(System.String,System.Int32,Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that use the topic subscriber scenario.
            </summary>
      <param name="name">The name of the topic.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> to return.</param>
      <param name="args">An object that determines the configuration of the resulting instances of <see cref="T:Rock.Framework.Messaging.IReceiver" />.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that use the topic subscriber scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateTopicSubscriber(System.String,Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Creates an instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the topic subscriber scenario.
            </summary>
      <param name="name">The name of the topic.</param>
      <param name="args">An object that determines the configuration of the resulting instances of <see cref="T:Rock.Framework.Messaging.IReceiver" />.</param>
      <returns>An instance of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that uses the topic subscriber scenario.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateSenderReceivers(System.String,System.Int32)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.
            </summary>
      <param name="name">The name of the request reply scenario.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" /> to return.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateSenderReceivers(System.String,System.Int32,Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Creates instances of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.
            </summary>
      <param name="name">The name of the request reply scenario.</param>
      <param name="count">The number of instances of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" /> to return.</param>
      <param name="args">An object that determines the configuration of the resulting instances of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.</param>
      <returns>Instances of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CreateSenderReceiver(System.String,Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Creates an instance of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.
            </summary>
      <param name="name">The name of the request reply scenario.</param>
      <param name="args">An object that determines the configuration of the resulting instances of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.</param>
      <returns>An instance of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.CleanUp">
      <summary>
            Properly disposes of all scenarios and Sonic objects.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory.Finalize">
      <summary>
            Finalizes an instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicMessagingScenarioFactory" /> class.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.SonicReceiver">
      <summary>
            An implementation of <see cref="T:Rock.Framework.Messaging.IReceiver" /> that receives messages from a Sonic endpoint.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicReceiver.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicReceiver.Start(System.String)">
      <summary>
            Starts listening for messages.
            </summary>
      <param name="selector">Also known as a 'routing key', this value enables only certain messages to be received.</param>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.SonicReceiver.Name">
      <summary>
            Gets the name of this instance of <see cref="T:Rock.Framework.Messaging.IReceiver" />.
            </summary>
    </member>
    <member name="E:Rock.Framework.Messaging.SonicMQ.SonicReceiver.MessageReceived">
      <summary>
            Occurs when a message is received.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.SonicReceiverMessage">
      <summary>
            An implementation of <see cref="T:Rock.Framework.Messaging.IReceiverMessage" /> that wraps a Sonic message.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicReceiverMessage.GetStringValue(System.Text.Encoding)">
      <summary>
            Gets the string value of the message.
            </summary>
      <param name="encoding">Ignored.</param>
      <returns>The string value of the message.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicReceiverMessage.GetBinaryValue(System.Text.Encoding)">
      <summary>
            Gets the binary value of the message. <paramref name="encoding" /> is used to
            convert the string message to a byte array. If <paramref name="encoding" /> is 
            null, the string data will be converted using base 64 encoding.
            </summary>
      <param name="encoding">
            The encoding to use. A null value indicates that base 64 encoding should be used.
            </param>
      <returns>The binary value of the message.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicReceiverMessage.GetHeaderValue(System.String,System.Text.Encoding)">
      <summary>
            Gets a header value by key.
            </summary>
      <param name="key">The key of the header to retrieve.</param>
      <param name="encoding">Ignored.</param>
      <returns>The string value of the header.</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicReceiverMessage.Acknowledge">
      <summary>
            Acknowledges the message.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.SonicReceiverMessage.Message">
      <summary>
            Gets the wrapped Sonic message.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.SonicSender">
      <summary>
            An implementation of <see cref="T:Rock.Framework.Messaging.ISender" /> that sends messages to a Sonic endpoint.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicSender.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicSender.SendAsync(Rock.Framework.Messaging.ISenderMessage)">
      <summary>
            Sends the specified message.
            </summary>
      <param name="message">The message to send.</param>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.SonicSender.Name">
      <summary>
            Gets the name of this instance of <see cref="T:Rock.Framework.Messaging.ISender" />.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.SonicSenderReceiver">
      <summary>
            An implementation of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" /> that uses a Sonic endpoint.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicSenderReceiver.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicSenderReceiver.SendAndReceive(Rock.Framework.Messaging.ISenderMessage)">
      <summary>
            Sends the specified message, then returns a response message.
            </summary>
      <param name="message">The message to send.</param>
      <returns>The response message.</returns>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.SonicSenderReceiver.Name">
      <summary>
            Gets the name of this instance of <see cref="T:Rock.Framework.Messaging.ISenderReceiver" />.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.SonicSessionMode">
      <summary>
            Enumerations for session modes that wrap the Sonic API since the Sonic API only takes ints as parameters.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.SonicSessionMode.SessionTransacted">
      <summary>
            This value is returned from the method getAcknowledgeMode if the session is transacted. If a Session is transacted, the acknowledgement mode is ignored. 
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.SonicSessionMode.AutoAcknowledge">
      <summary>
            With this acknowledgment mode, the session automatically acknowledges a client's receipt of a 
            message either when the session has successfully returned from a call to receive or when the message 
            listener the session has called to process the message successfully returns. 
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.SonicSessionMode.ClientAcknowledge">
      <summary>
            With this acknowledgment mode, the client acknowledges a consumed message by calling the message's 
            acknowledge method. Acknowledging a consumed message acknowledges all messages that the session has 
            consumed.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.SonicSessionMode.DupsOkAcknowledge">
      <summary>
            This acknowledgment mode instructs the session to lazily acknowledge the delivery of messages. This 
            is likely to result in the delivery of some duplicate messages if the runtime fails, so it should only 
            be used by consumers that can tolerate duplicate messages. Use of this mode can reduce session overhead 
            by minimizing the work the session does to prevent duplicates. 
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.SonicSessionMode.SingleMessageAcknowledge">
      <summary>
            This acknoledgement mode acknowledges the current message instead of the current and previously unacknoledged messages. 
            The acknowledge( ) method, when called by the client application, acknowledges the receipt of only the current message and 
            no preceding messages. After a system failure, all unacknowledged messages might be redelivered. 
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.StringSenderMessage">
      <summary>
            An implementation of <see cref="T:Rock.Framework.Messaging.ISenderMessage" /> for use when a string is the
            payload of the message.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.StringSenderMessage.#ctor(System.String,System.Text.Encoding)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.StringSenderMessage" /> class 
            using <see cref="F:Rock.Framework.Messaging.MessageFormat.Text" /> for its format. The value of
            the <see cref="P:Rock.Framework.Messaging.StringSenderMessage.BinaryValue" /> property will be the result of a call to the
            <see cref="M:System.Text.Encoding.GetBytes(System.String)" /> method of <paramref name="encoding" />.
            If <paramref name="encoding" /> is null, <see cref="P:System.Text.Encoding.UTF8" /> is used.
            </summary>
      <param name="stringValue">The string value of the message.</param>
      <param name="encoding">
            The encoding to use when converting the string value to a byte array.
            </param>
    </member>
    <member name="M:Rock.Framework.Messaging.StringSenderMessage.#ctor(System.String,Rock.Framework.Messaging.MessageFormat,System.Text.Encoding)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.StringSenderMessage" /> class.
            If the value of <paramref name="messageFormat" /> is <see cref="F:Rock.Framework.Messaging.MessageFormat.Binary" />,
            then the value of the <see cref="P:Rock.Framework.Messaging.StringSenderMessage.BinaryValue" /> property will be the result of
            a call to <see cref="M:System.Convert.FromBase64String(System.String)" />. Otherwise, the value of the
            <see cref="P:Rock.Framework.Messaging.StringSenderMessage.BinaryValue" /> property will be the result of a call to the
            <see cref="M:System.Text.Encoding.GetBytes(System.String)" /> method of <paramref name="encoding" />.
            If <paramref name="encoding" /> is null, <see cref="P:System.Text.Encoding.UTF8" /> is used.
            </summary>
      <param name="stringValue">The string value of the message.</param>
      <param name="messageFormat">The message's format.</param>
      <param name="encoding">
            The encoding to use when converting the string value to a byte array if
            <paramref name="messageFormat" /> is not <see cref="F:Rock.Framework.Messaging.MessageFormat.Binary" />.
            </param>
    </member>
    <member name="P:Rock.Framework.Messaging.StringSenderMessage.StringValue">
      <summary>
            Gets the string value of the message.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.StringSenderMessage.BinaryValue">
      <summary>
            Gets the binary value of the message.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.StringSenderMessage.MessageFormat">
      <summary>
            Gets the message format of the message.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.StringSenderMessage.Headers">
      <summary>
            Gets the headers for this message.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.PhoneNumberInvalidException">
      <summary>
            Thrown when a phone number isn't set to a valid format.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.PhoneNumberInvalidException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.PhoneNumberInvalidException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="T:Rock.Framework.Messaging.SmsMessageLengthException">
      <summary>
            Thrown when the message length exceeds the standard 160 character length of text messages.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SmsMessageLengthException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SmsMessageLengthException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="T:Rock.Framework.Messaging.SmsMessageReceived">
      <summary>
            Represents an Sms/Text message received by Messenger.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageReceived.Message">
      <summary>
            Gets or sets the message body.
            </summary>
      <value>
            The message.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageReceived.FromCity">
      <summary>
            The city where the message was sent from as identified by the vendor.
            </summary>
      <value>
            From city.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageReceived.FromZip">
      <summary>
            The zip code where the message was sent from as identified by the vendor.
            </summary>
      <value>
            From zip.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageReceived.FromPhoneNumber">
      <summary>
            The phone number this message was sent from.
            </summary>
      <value>
            From phone number.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageReceived.ToPhoneNumber">
      <summary>
            The phone number where it was sent. Messenger uses it to link to various apps.
            </summary>
      <value>
            To phone number.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageReceived.ProviderMessageId">
      <summary>
            Provider supplied message id.
            </summary>
      <value>
            The provider message id.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageReceived.Provider">
      <summary>
            The provider we received this message from (i.e. twilio, responsys)
            </summary>
      <value>
            The provider.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageReceived.MessageReceivedId">
      <summary>
            Message received id as set by Messenger
            </summary>
      <value>
            The message received id.
            </value>
    </member>
    <member name="T:Rock.Framework.Messaging.SmsMessageStatusUpdate">
      <summary>
            This class will be used by Messenger platform to send status updates for outbound messages.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageStatusUpdate.MessageClientId">
      <summary>
            The unique tracking ID as assigned by the calling system used.
            </summary>
      <value>
            The message client id.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageStatusUpdate.MessengerId">
      <summary>
            The Id of the message as assigned by messenger.
            </summary>
      <value>
            The messenger id.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageStatusUpdate.VendorName">
      <summary>
            Vendor used for for this message (ie. Twilio, Responsys)
            </summary>
      <value>
            The name of the vendor.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageStatusUpdate.Status">
      <summary>
            The current status of the message as reported by the vendor
            </summary>
      <value>
            The status.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageStatusUpdate.NotificationDateTime">
      <summary>
            Gets or sets the notification date time.
            </summary>
      <value>
            The notification date time.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageStatusUpdate.ContactType">
      <summary>
            Gets or sets the type of the contact.
            </summary>
      <value>
            The type of the contact.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessageStatusUpdate.ContactId">
      <summary>
            Gets or sets the contact id.
            </summary>
      <value>
            The contact id.
            </value>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.ConnectionState">
      <summary>
            The sonic connection state
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.Internal.ConnectionState.Active">
      <summary>
            The connection is active.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.Internal.ConnectionState.Reconnecting">
      <summary>
            The connection is unavailable, but the 
            client runtime is trying to resume the connection.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.Internal.ConnectionState.Failed">
      <summary>
            The client runtime has tried to reconnect and failed.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.Internal.ConnectionState.Closed">
      <summary>
            The connection is closed.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicConnectionEventArgs">
      <summary>
            SonicConnectionEventArgs
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicConnectionEventArgs.ConectId">
      <summary>
            Gets or sets the connectId.
            </summary>
      <value>The connectId.</value>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicReinitializeEventArgs">
      <summary>
            SonicReinitializeEventArgs
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicReinitializeEventArgs.Name">
      <summary>
            Gets or sets the instance Name.
            </summary>
      <value>The instance Name.</value>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.SonicException">
      <summary>
            Base SonicException
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicException.#ctor">
      <summary>
            Initializes a new instance of the SonicException class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
              </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
              </exception>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSessionManager.GetActiveSessions">
      <summary>
            Gets the current active sessions.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSessionManager.CreateSession(Rock.Framework.Messaging.SonicMQ.ISonicArgs,Sonic.Jms.ExceptionListener)">
      <summary>
            Session Management
            </summary>
      <param name="args">
      </param>
      <param name="listener">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSessionManager.CloseSession(Sonic.Jms.Session,Rock.Framework.Messaging.SonicMQ.ISonicArgs,System.Boolean)">
      <summary>
            Close Session
            </summary>
      <param name="session">
      </param>
      <param name="args">
      </param>
      <param name="fromError">
      </param>
    </member>
    <member name="T:Rock.Framework.Messaging.VendorClientRecipient">
      <summary>
            The client being sent to the vendor.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.VendorClientRecipient.#ctor">
      <summary>
            Default ctor for VendorClientRecipient, Sets ContactType = ContactType.Client by default
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorClientRecipient.ContactType">
      <summary>
            Gets or sets the type of the contact.
            </summary>
      <value>
            The type of the contact.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorClientRecipient.GCID">
      <summary>
            Gets or sets the GCID.
            </summary>
      <value>
            The GCID.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorClientRecipient.LoanNumber">
      <summary>
            Gets or sets the loan number.
            </summary>
      <value>
            The loan number.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorClientRecipient.ExtProp">
      <summary>
            Gets or sets the ext prop.
            </summary>
      <value>
            The ext prop.
            </value>
    </member>
    <member name="T:Rock.Framework.Messaging.IMessage">
      <summary>
            Interface for messages sent through Messenger.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.IMessage.ThrowErrorIfInvalid">
      <summary>
            Validates this instance and throw an error if the data required is invalid.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.IMessage.MessageClientId">
      <summary>
            Required unique tracking ID assigned by the calling system used to track the status of the message later on.
            </summary>
      <value>
            A guid.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.IMessage.AppId">
      <summary>
            Required application ID.
            </summary>
      <value>
            The app id.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.IMessage.ApiKey">
      <summary>
            Required ApiKey assigned by Messenger. 
            </summary>
      <value>
            The Guid.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.IMessage.ExtProp">
      <summary>
            Optional dynamic property that can be set to any additional values based on the type of provider used.
            </summary>
      <remarks>
            Different implementations of various SMS providers have different functionality that can be triggered. Please see http://itiki/index.php/Messenger for more documentation.
            </remarks>
      <value>
            The ext prop.
            </value>
    </member>
    <member name="T:Rock.Framework.Messaging.VendorClientUpdateMessage">
      <summary>
            This message updates the client information in the vendor's database.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.VendorClientUpdateMessage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.VendorClientUpdateMessage" /> class.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorClientUpdateMessage.MessageClientId">
      <summary>
            Required unique tracking ID assigned by the calling system used to track the status of the message later on.
            </summary>
      <value>
            A guid.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorClientUpdateMessage.AppId">
      <summary>
            Required application ID.
            </summary>
      <value>
            The app id.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorClientUpdateMessage.ApiKey">
      <summary>
            Required ApiKey assigned by Messenger.
            </summary>
      <value>
            The Guid.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorClientUpdateMessage.ExtProp">
      <summary>
            Optional dynamic property that can be set to any additional values based on the type of provider used.
            </summary>
      <value>
            The ext prop.
            </value>
      <remarks>
            Different implementations of various SMS providers have different functionality that can be triggered. Please see http://itiki/index.php/Messenger for more documentation.
            </remarks>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorClientUpdateMessage.Recipients">
      <summary>
            Gets or sets the recipients.
            </summary>
      <value>
            The recipients.
            </value>
    </member>
    <member name="T:Rock.Framework.Messaging.VendorEmailMessage">
      <summary>
            Represents an email message that is delivered through a 3rd party vendor.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.VendorEmailMessage.#ctor">
      <summary>
            Initializes a new instance of the VendorEmailMessage class.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorEmailMessage.MessageClientId">
      <summary>
            Required unique tracking ID assigned by the calling system used to track the status of the message later on.
            </summary>
      <value>
            A guid.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorEmailMessage.AppId">
      <summary>
            Gets or sets the application ID.
            </summary>
      <value>
            The app id.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorEmailMessage.ApiKey">
      <summary>
            The Guid assigned to you via Core. Required.
            </summary>
      <value>
            The Guid.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorEmailMessage.ExtProp">
      <summary>
            This is a dynamic property that can be set to any additional values based on the type of provider used.
            </summary>
      <remarks>
            Different implementations of various SMS providers have different functionality that can be triggered. Please see http://itiki/index.php/Messenger for more documentation.
            </remarks>
      <value>
            The ext prop.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorEmailMessage.Recipients">
      <summary>
            Gets or sets the recipients.
            </summary>
      <value>
            The recipients.
            </value>
    </member>
    <member name="T:Rock.Framework.Messaging.VendorEmailRecipient">
      <summary>
            Recipient of email.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.VendorEmailRecipient.#ctor">
      <summary>
            Default ctor for VendorEmailRecipient, Sets ContactType = ContactType.Client by default
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorEmailRecipient.GCID">
      <summary>
            Gets or sets the GCID.
            </summary>
      <value>
            The GCID.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorEmailRecipient.ContactType">
      <summary>
            Gets or sets the type of the contact.
            </summary>
      <value>
            The type of the contact.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorEmailRecipient.LoanNumber">
      <summary>
            Gets or sets the loan number.
            </summary>
      <value>
            The loan number.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorEmailRecipient.EmailAddress">
      <summary>
            Gets or sets the email address.
            </summary>
      <value>
            The email address.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.VendorEmailRecipient.ExtProp">
      <summary>
            Gets or sets the ext prop.
            </summary>
      <value>
            The ext prop.
            </value>
    </member>
    <member name="T:Rock.Framework.Messaging.ContactType">
      <summary>
            Specifies either the recipient is either a team member or a client.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.ContactType.None">
      <summary>
            The none
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.ContactType.Client">
      <summary>
            Client
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.ContactType.TeamMember">
      <summary>
            Team member
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.ContactType.Prospect">
      <summary>
            Prospect
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.ContactType.Partner">
      <summary>
            Partner
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.IMessenger">
      <summary>
            Messenger interface
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.IMessenger.Send``1(``0)">
      <summary>
            Sends the specified message.
            </summary>
      <typeparam name="TMessage">The type of the message.</typeparam>
      <param name="message">The message.</param>
    </member>
    <member name="T:Rock.Framework.Messaging.Messenger">
      <summary>
            Messenger allows applications to send various type of messages via different mediums (text, email, twitter, facebook).
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.Messenger.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.Messenger" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.Messenger.#ctor(Rock.Framework.Messaging.IMessageSender)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.Messenger" /> class using the specified instance of
            <see cref="T:Rock.Framework.Messaging.IMessageSender" />.
            </summary>
      <param name="messageSender">The <see cref="T:Rock.Framework.Messaging.IMessageSender" /> that is used to send messages.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.Messenger.Send``1(``0)">
      <summary>
            Sends the specified message. Throws exception if it cannot deliver the message to Messenger.
            </summary>
      <typeparam name="TMessage">The type of the message.</typeparam>
      <param name="message">The message.</param>
      <exception cref="T:System.NotSupportedException">The request cache validator indicated that the response for this request can be served from the cache; however, this request includes data to be sent to the server. Requests that send data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented. </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort">
        </see> was previously called.-or- The time-out period for the request expired.-or- An error occurred while processing the request. </exception>
      <exception cref="T:System.InvalidOperationException">The stream is already in use by a previous call to <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see>.-or- <see cref="P:System.Net.HttpWebRequest.TransferEncoding"></see> is set to a value and <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false. </exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method">
        </see> is GET or HEAD, and either <see cref="P:System.Net.HttpWebRequest.ContentLength"></see> is greater or equal to zero or <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is true.-or- <see cref="P:System.Net.HttpWebRequest.KeepAlive"></see> is true, <see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering"></see> is false, <see cref="P:System.Net.HttpWebRequest.ContentLength"></see> is -1, <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false, and <see cref="P:System.Net.HttpWebRequest.Method"></see> is POST or PUT. </exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="T:Rock.Framework.Messaging.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.Properties.Resources.ApplicationFormUrlEncoded">
      <summary>
              Looks up a localized string similar to application/x-www-form-urlencoded.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.Properties.Resources.ApplicationSoapXml">
      <summary>
              Looks up a localized string similar to application/soap+xml.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.Properties.Resources.ContentType">
      <summary>
              Looks up a localized string similar to Content-Type.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.Properties.Resources.SERVICE_URL">
      <summary>
              Looks up a localized string similar to SERVICE_URL.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.Properties.Resources.SocketTimeoutEception">
      <summary>
              Looks up a localized string similar to sockettimeoutexception.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.Properties.Resources.SocketTimeoutException">
      <summary>
              Looks up a localized string similar to sockettimeoutexception.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.Properties.Resources.TextXml">
      <summary>
              Looks up a localized string similar to text/xml.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SmsMessage">
      <summary>
            Represents an Sms/Text message to be sent through Messenger.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SmsMessage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SmsMessage" /> class.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessage.Message">
      <summary>
            Gets or sets the message. Optional depending on ApiKey.
            </summary>
      <value>
            The message.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessage.Recipients">
      <summary>
            Gets or sets the recipients.
            </summary>
      <value>
            The recipients.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessage.MessageClientId">
      <summary>
            Required unique tracking ID assigned by the calling system used to track the status of the message later on.
            </summary>
      <value>
            A guid.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessage.AppId">
      <summary>
            Gets or sets the application ID.
            </summary>
      <value>
            The app id.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessage.ApiKey">
      <summary>
            The Guid assigned to you via Core. Required.
            </summary>
      <value>
            The Guid.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsMessage.ExtProp">
      <summary>
            This is a dynamic property that can be set to any additional values based on the type of provider used.
            </summary>
      <value>
            The ext prop.
            </value>
      <remarks>
            Different implementations of various SMS providers have different functionality that can be triggered. Please see http://itiki/index.php/Messenger for more documentation.
            </remarks>
    </member>
    <member name="T:Rock.Framework.Messaging.SmsRecipient">
      <summary>
            The recipient receiving the Sms message.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsRecipient.PhoneNumber">
      <summary>
            10 digit phone number with no spaces, dashes, parentheses. Example: 1112223333
            </summary>
      <value>
            The phone number.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsRecipient.ContactType">
      <summary>
            Gets or sets the type of the contact.
            </summary>
      <value>
            The type of the contact.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsRecipient.ContactId">
      <summary>
            Gets or sets the contact id.
            </summary>
      <value>
            The contact id.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SmsRecipient.ExtProp">
      <summary>
            This is a dynamic property that can be set to any additional values based on the type of provider used.
            </summary>
      <value>
            The ext prop.
            </value>
      <remarks>
            Different implementations of various SMS providers have different functionality that can be triggered. Please see http://itiki/index.php/Messenger for more documentation.
            </remarks>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs">
      <summary>
            Base parameters needed for connecting to and from Sonic.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs._brokerServerAddresses">
      <summary>
            server address(es)
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs._userName">
      <summary>
            username
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs._password">
      <summary>
            password
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs" /> class.
            </summary>
      <param name="destination">The destination.</param>
      <param name="brokerServerAddresses">The broker server addresses.</param>
      <param name="userName">Name of the user.</param>
      <param name="password">The password.</param>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.BrokerServerAddresses">
      <summary>
            The broker server addresses seperated by a , with no space. Example: "tcp://ql1sonicdev1:2506,tcp://ql2sonicdev1:2506"
            </summary>
      <value>
      </value>
      <remarks>
            This allows us to support fault tolerance connections. If one server is down, it will try the other one or randomize the servers
            depending on how the <see cref="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.Sequential" /> setting is set.
            </remarks>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.UserName">
      <summary>
            Username
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.Password">
      <summary>
            Password
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.Transacted">
      <summary>
            If true, the session is transacted and the acknowledgementMode setting has no effect,
            because the transaction implicitly handles acknowledgement.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.AcknowledgeMode">
      <summary>
            Gets or sets the acknowledge mode. Indicates whether the client acknowledges messages it receives. If the session only
            produces messages, acknowledgementMode has no effect
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.SonicDeliveryMode">
      <summary>
            Gets the sonic delivery mode.
            </summary>
      <value>
            The sonic delivery mode.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.PersistentMessageDelivery">
      <summary>
            Default is false. See <see cref="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.PersistentMessageDelivery" /></summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.PreFetchCount">
      <summary>
            Default is 3.  See <see cref="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.PreFetchCount" /></summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.FlowControlDisabled">
      <summary>
            See <see cref="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.FlowControlDisabled" /></summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.FlowToDisk">
      <summary>
            See <see cref="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.FlowToDisk" /></summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.PreFetchThreshold">
      <summary>
            Default is 1.  See <see cref="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.PreFetchThreshold" /></summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.SelectorAtBroker">
      <summary>
            Default is false.  See <see cref="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.SelectorAtBroker" /></summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.DurableMessageOrder">
      <summary>
            Default is false. See <see cref="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.DurableMessageOrder" /></summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.MonitorInterval">
      <summary>
            Default is 60. See <see cref="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.MonitorInterval" /></summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.Sequential">
      <summary>
            Default is true. See <see cref="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.Sequential" /></summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.FaultTolerantReconnectTimeout">
      <summary>
            Default is 600 seconds. See <see cref="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.FaultTolerantReconnectTimeout" /></summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.InitialConnectTimeout">
      <summary>
            Default is 60 seconds.  See <see cref="P:Rock.Framework.Messaging.SonicMQ.ISonicArgs.InitialConnectTimeout" /></summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.IsFaultTolerantConnection">
      <summary>
            Default is true. Gets or sets a value indicating whether this instance is fault tolerant.
            </summary>
      <value>
        <c>true</c> if this instance is fault tolerant; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.IsLoadBalanced">
      <summary>
            Default is false. Load balancing is not enabled on any of our brokers, there are some times we might use it.
            Any broker in a cluster can redirect incoming client connections to another broker in the
            same cluster for the purpose of load balancing. Load balancing must be configured on the
            broker. The client must also be configured to indicate that it is willing to have a connect
            request re-directed to another broker.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.ClientId">
      <summary>
            Gets or sets the client id.
            </summary>
      <value>The client id.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.Destination">
      <summary>
            Name of the topic or the queue destination.  Example: rock.ql.lola
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.DurableSubscriber">
      <summary>
            Gets or sets a value indicating whether [durable subscriber].
            </summary>
      <value>
        <c>true</c> if [durable subscriber]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.DurableSubscriberName">
      <summary>
            Gets or sets the name of the durable subscriber.
            </summary>
      <value>
            The name of the durable subscriber.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicArgs.ServiceUrl">
      <summary>
            The service url you are posting to.  Optional as service url may be defined in Sonic.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase">
      <summary>
            Base interface for Sonic scenarios.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase.onException(Sonic.Jms.JMSException)">
      <summary>
            fires when an exception occurs
            </summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase.Initialize">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase.Reinitialize">
      <summary>
            Re-Initializes this instance, ussualy when the connection dropped and has to reconnect.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase.ReconnectIfConnectionDropped(Sonic.Jms.JMSException)">
      <summary>
            Resumes the connection if connection dropped.
            </summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase.Disposed">
      <summary>
            If object is disposed.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase.IsConnected">
      <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
      <value>
        <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase.Name">
      <summary>
            instance identifier as defined by used
            Used to identify this instance in the SonicFactory.
            </summary>
      <value>
            The instance identifier.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase.SonicArgs">
      <summary>
            Gets or sets the sonic args.
            </summary>
      <value>
            The sonic args.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase.Session">
      <summary>
            Gets or sets the session.
            </summary>
      <value>The session.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase.Connection">
      <summary>
            Gets or sets the connection.
            </summary>
      <value>The connection.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase.Destination">
      <summary>
            Gets or sets the queue.
            </summary>
      <value>The queue.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase.ConnectId">
      <summary>
            Gets the Sonic Connection connectId.
            </summary>
      <value>
            The connect identifier.
            </value>
    </member>
    <member name="E:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase.JmsExceptionThrown">
      <summary>
            Occurs when [JMS exception thrown].
            </summary>
    </member>
    <member name="E:Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase.Reinitialized">
      <summary>
            Occurs when [reinitialized].
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase">
      <summary>
            Base abstract class for sonic libraries.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase._connected">
      <summary>
            is sonic connected
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.OnReinitialized">
      <summary>
            Called when [reinitialized].
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.#ctor">
      <summary>
            Initializes a new instance of the SonicBase class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.onException(Sonic.Jms.JMSException)">
      <summary>
            fires when an exception occurs
            </summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.OnJmsException(Sonic.Jms.JMSException)">
      <summary>
            Called when [JMS exception].
            </summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.Initialize">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.Reinitialize">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.ReconnectIfConnectionDropped(Sonic.Jms.JMSException)">
      <summary>
            Resumes the connection if connection dropped.
            </summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.BuildConnectId(System.String)">
      <summary>
            Builds the connect id.
            </summary>
      <returns>Unique String used for Sonic Connect Id</returns>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.Disposed">
      <summary>
            If object is disposed.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.SonicArgs">
      <summary>
            Gets or sets the sonic args.
            </summary>
      <value>
            The sonic args.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.Destination">
      <summary>
            Gets or sets the queue.
            </summary>
      <value>The queue.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.ConnectId">
      <summary>
            Gets the Sonic Connection connectId.
            </summary>
      <value>
            The connect identifier.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.Connection">
      <summary>
            Expose Connection
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.IsConnected">
      <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
      <value>
        <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.Name">
      <summary>
            Instance identifier as defined by used + the scenario type.
            Used to identify this instance in the SonicFactory.
            </summary>
      <value>
            The instance identifier.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.Session">
      <summary>
            Gets or sets the session.
            </summary>
      <value>The session.</value>
    </member>
    <member name="E:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.Reinitialized">
      <summary>
            Occurs when [reinitialized].
            </summary>
    </member>
    <member name="E:Rock.Framework.Messaging.SonicMQ.Internal.SonicBase.JmsExceptionThrown">
      <summary>
            Occurs when [JMS exception thrown].
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicBase">
      <summary>
            Base class for handling scenarios that need to connect to a topic.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicBase.#ctor(Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicBase" /> class.
            </summary>
      <param name="args">The args.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicBase" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicBase.Initialize">
      <summary>
            Initializes the specified args.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageCreator">
      <summary>
            Interface used to create messages.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageCreator.CreateMessage(System.String)">
      <summary>
            Creates a Sonic TextMessage. This allows for scenarios where headers need to be added to a message.
            </summary>
      <param name="data">The message data.</param>
      <returns>Sonic TextMessage</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageCreator.CreateXmlMessage(System.String)">
      <summary>
            Creates the XML message.
            </summary>
      <param name="xmlData">The XML data.</param>
      <returns>Sonic XMLMessage</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageCreator.CreateMessage``1(``0,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Creates the message. Uses the SonicDeliveryMode as specified in the args passed in.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <returns>Sonic TextMessage</returns>
      <remarks>This allows a user to create a TextMessage that allows for unique cases whereby the message needs
            to be altered before sent.</remarks>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageCreator.CreateXmlMessage``1(``0,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Creates the XML message.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <returns>Sonic TextMessage</returns>
      <remarks>This allows a user to create a TextMessage that allows for unique cases whereby the message needs
            to be altered before sent.</remarks>
      <returns>Sonic XMLMessage</returns>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender">
      <summary>
            Interface used for sending messages to Sonic.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender.Send(System.String,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender.Send(System.String,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode,System.Int64)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender.Send``1(``0,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Sends the message.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender.Send``1(``0,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode,Rock.Framework.Serialization.XmlSerializerType,System.Int64)">
      <summary>
            Sends the message.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender.Send(Sonic.Jms.TextMessage)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender.Send(Sonic.Jms.TextMessage,System.Int64)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender.Send(Sonic.Jms.Message)">
      <summary>
            Send a message.
            </summary>
      <param name="msg">The MSG.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender.Send(Sonic.Jms.Message,System.Int64)">
      <summary>
            Publishes the message.
            </summary>
      <param name="msg">The message.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender.Send(System.String)">
      <summary>
            Publishes the message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender.Send(System.String,System.Int64)">
      <summary>
            Publishes the message.
            </summary>
      <param name="message">The message.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender.Send``1(``0,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Publishes the message.
            </summary>
      <typeparam name="T">a type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender.Send``1(``0,Rock.Framework.Serialization.XmlSerializerType,System.Int64)">
      <summary>
            Publishes the message.
            </summary>
      <typeparam name="T">a type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender.SendXmlMessage(System.String)">
      <summary>
            Publishes the XML message.
            </summary>
      <param name="xmlData">The XML data.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicMessageSender.SendXmlMessage(System.String,System.Int64)">
      <summary>
            Publishes the XML message.
            </summary>
      <param name="xmlData">The XML data.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.ISonicSender">
      <summary>
            Interface implemented by Queue producers and Topic publishers.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicSender.MessageProducer">
      <summary>
            Gets or sets the queue sender.
            </summary>
      <value>The queue sender.</value>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase">
      <summary>
            Abstract base class used for sending messages to a topic.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.#ctor(Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Initializes a new instance of the SonicQueueSender class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.Send(System.String,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.Send(System.String,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode,System.Int64)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.Send``1(``0,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Sends the message.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.Send``1(``0,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode,Rock.Framework.Serialization.XmlSerializerType,System.Int64)">
      <summary>
            Sends the message.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.Send(Sonic.Jms.TextMessage)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.Send(Sonic.Jms.TextMessage,System.Int64)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.Send(Sonic.Jms.Message)">
      <summary>
            Send a message.
            </summary>
      <param name="msg">The MSG.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.Send(Sonic.Jms.Message,System.Int64)">
      <summary>
            Send a message.
            </summary>
      <param name="msg">The MSG.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.CreateXmlMessage(System.String)">
      <summary>
            Creates the XML message.
            </summary>
      <param name="xmlData">The XML data.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.CreateMessage``1(``0,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Creates the message. Uses the SonicDeliveryMode as specified in the args passed in.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <returns>
            Sonic TextMessage
            </returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.CreateXmlMessage``1(``0,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Creates the XML message.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <returns>
            Sonic TextMessage
            </returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.Send(System.String)">
      <summary>
            Sends the message
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.Send(System.String,System.Int64)">
      <summary>
            Sends the message
            </summary>
      <param name="message">The message.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.Send``1(``0,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Publishes the message.
            </summary>
      <typeparam name="T">a type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.Send``1(``0,Rock.Framework.Serialization.XmlSerializerType,System.Int64)">
      <summary>
            Publishes the message.
            </summary>
      <typeparam name="T">a type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.SendXmlMessage(System.String)">
      <summary>
            Publishes the XML message.
            </summary>
      <param name="xmlData">The XML data.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.SendXmlMessage(System.String,System.Int64)">
      <summary>
            Publishes the XML message.
            </summary>
      <param name="xmlData">The XML data.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.CreateMessage(System.String)">
      <summary>
            Creates a Sonic TextMessage. This allows for scenarios where headers need to be added to a message.
            </summary>
      <param name="data">The message data.</param>
      <returns>
            Sonic TextMessage
            </returns>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSenderBase.MessageProducer">
      <summary>
            Gets or sets the queue sender.
            </summary>
      <value>
            The queue sender.
            </value>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.SonicConfigurationException">
      <summary>
            Thrown if there is a sonic configuration error.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicConfigurationException.#ctor">
      <summary>
            Initializes a new instance of the SonicConfigurationException class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicConfigurationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicConfigurationException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicConfigurationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
              </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
              </exception>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicConfigurationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicConfigurationException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicFactory">
      <summary>
            Sonic factory used to create sonic scenarios.
            </summary>
      <remarks>
        <para>
            This factory is the primary way scenarios should be created an initialized. The factory stores a copy of the scenarios 
            in memory and then uppon AppDomain.Current.DomainUnload cleans up all of the scenarios to make sure they are 
            properly disconnected from Sonic. Once a scneario is initialized (which can take anywhere from .5 seconds to 3 seconds) 
            that scenario is re-used for each send request. 
            </para>
        <para>
            By default the factory relies on configuration to be stored in either the app.config or web.config. Please see the Sonic Overview in 
            the docs for more details about Sonic Configuration. 
            </para>
        <para>
            Configuration can be supplied to the SonicFactory to support those cases where programatic control is required.
            </para>
        <para>
            Be sure to call SonicFactory.CleanUp() when your process terminates. This will ensure the scenarios are disconnected properly 
            from Sonic.
            </para>
      </remarks>
      <example>
        <para>
            Examples for each of the current supported scenarios.
            </para>
        <code><![CDATA[
            ISonicRequestReply req = SonicFactory.GetInstance<SonicRequestReplyScenario>(";lkj");
            ISonicReceiver tRec = SonicFactory.GetInstance<SonicTopicSubscriberScenario>("asdf");
            ISonicReceiver qRec = SonicFactory.GetInstance<SonicQueueConsumerScenario>("zxcv");
            ISonicSender tSender = SonicFactory.GetInstance<SonicTopicPublisherScenario>("jkl;");
            ISonicSender qSender = SonicFactory.GetInstance<SonicQueueProducerScenario>("fdsa");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicFactory.Reset">
      <summary>
            FOR UNIT TESTS - Resets the singletons. Used for unit tests.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicFactory.CleanUp">
      <summary>
             Properly disposes of all scenarios and Sonic objects. 
            </summary>
      <remarks>
             This is automatically called on AppDomain DomainUnload event 
             but it doesn't hurt to call it multiple times when needed.
             </remarks>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicFactory.RemoveInstance``1(System.String)">
      <summary>
             Removes and properly disposes of a named scenario. 
            </summary>
      <typeparam name="T">Sonic Scenario that implements ISonicBase</typeparam>
      <param name="name">The name of the scenario.</param>
      <remarks>There may be an instance where a particular sonic connection is dropped 
             on a particular scenario for one reason or another. 
             This function allows the developer to remove that scenario from the cache.
             </remarks>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicFactory.ReinitializeInstance``1(System.String)">
      <summary>
             Removes and then recreates a named scenario. 
            </summary>
      <typeparam name="T">Sonic Scenario that implements ISonicBase</typeparam>
      <param name="name">The name of the scenario.</param>
      <remarks>There may be an instance where a particular sonic connection is dropped 
             on a particular scenario for one reason or another. 
             This function allows the developer to remove that scenario from the cache and recreate it.
             </remarks>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicFactory.GetInstance``1(System.String,Rock.Framework.Settings.Configuration.MessagingConfiguration)">
      <summary>
            Gets the instance.
            </summary>
      <typeparam name="T">Sonic Scenario that implements ISonicBase</typeparam>
      <param name="name">The name.</param>
      <param name="config">The config.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicFactory.GetInstance``1(System.String,Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Gets the instance.
            </summary>
      <typeparam name="T">Sonic Scenario that implements ISonicBase</typeparam>
      <param name="name">The name.</param>
      <param name="args">The args.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicFactory.GetInstance``1(System.String)">
      <summary>
            Gets the instance.
            </summary>
      <typeparam name="T">Sonic Scenario that implements ISonicBase</typeparam>
      <param name="name">The name.</param>
      <returns>
      </returns>
    </member>
    <member name="E:Rock.Framework.Messaging.SonicMQ.Internal.SonicFactory.ConnectionClosed">
      <summary>
            Occurs when [connection closed].
            </summary>
    </member>
    <member name="E:Rock.Framework.Messaging.SonicMQ.Internal.SonicFactory.ConnectionCreated">
      <summary>
            Occurs when [connection created].
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicMessageCreator.#ctor(Rock.Framework.Messaging.SonicMQ.Internal.ISonicBase)">
      <summary>
            Initializes a new instance of the SonicMessageCreator class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicMessageCreator.CreateMessage(System.String)">
      <summary>
            Creates a Sonic TextMessage. This allows for scenarios where headers need to be added to a message.
            </summary>
      <param name="data">The message data.</param>
      <returns>
            Sonic TextMessage
            </returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicMessageCreator.CreateMessage``1(``0,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Creates the message. Uses the SonicDeliveryMode as specified in the args passed in.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <returns>Sonic TextMessage</returns>
      <remarks>This allows a user to create a TextMessage that allows for unique cases whereby the message needs
            to be altered before sent.</remarks>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicMessageCreator.CreateXmlMessage``1(``0,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Creates the XML message.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <returns>Sonic TextMessage</returns>
      <remarks>This allows a user to create a TextMessage that allows for unique cases whereby the message needs
            to be altered before sent.</remarks>
      <returns>Sonic XMLMessage</returns>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueBase">
      <summary>
            Base class for handling the scenarios that need to communicate with a queue.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueBase.#ctor">
      <summary>
            Initializes a new instance of the SonicQueueBase class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueBase.#ctor(Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueBase" /> class.
            </summary>
      <param name="args">The args.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueBase.Initialize">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase">
      <summary>
            Base class for sending messages to sonic queue.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.#ctor">
      <summary>
            Initializes a new instance of the SonicQueueSenderBase class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.#ctor(Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Initializes a new instance of the SonicQueueSender class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.Send(System.String,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.Send(System.String,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode,System.Int64)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.Send``1(``0,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Sends the message.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.Send``1(``0,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode,Rock.Framework.Serialization.XmlSerializerType,System.Int64)">
      <summary>
            Sends the message.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.Send(Sonic.Jms.TextMessage)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.Send(Sonic.Jms.TextMessage,System.Int64)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.Send(Sonic.Jms.Message)">
      <summary>
            Send a message.
            </summary>
      <param name="msg">The MSG.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.Send(Sonic.Jms.Message,System.Int64)">
      <summary>
            Send a message.
            </summary>
      <param name="msg">The MSG.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.CreateXmlMessage(System.String)">
      <summary>
            Creates the XML message.
            </summary>
      <param name="xmlData">The XML data.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.CreateMessage``1(``0,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Creates the message. Uses the SonicDeliveryMode as specified in the args passed in.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <returns>
            Sonic TextMessage
            </returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.CreateXmlMessage``1(``0,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Creates the XML message.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <returns>
            Sonic TextMessage
            </returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.Send(System.String)">
      <summary>
            Publishes the message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.Send(System.String,System.Int64)">
      <summary>
            Publishes the message.
            </summary>
      <param name="message">The message.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.Send``1(``0,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Publishes the message.
            </summary>
      <typeparam name="T">a type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.Send``1(``0,Rock.Framework.Serialization.XmlSerializerType,System.Int64)">
      <summary>
            Publishes the message.
            </summary>
      <typeparam name="T">a type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.SendXmlMessage(System.String)">
      <summary>
            Publishes the XML message.
            </summary>
      <param name="xmlData">The XML data.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.SendXmlMessage(System.String,System.Int64)">
      <summary>
            Publishes the XML message.
            </summary>
      <param name="xmlData">The XML data.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.CreateMessage(System.String)">
      <summary>
            Creates a Sonic TextMessage. This allows for scenarios where headers need to be added to a message.
            </summary>
      <param name="data">The message data.</param>
      <returns>
            Sonic TextMessage
            </returns>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueSenderBase.MessageProducer">
      <summary>
            Gets or sets the queue sender.
            </summary>
      <value>
            The queue sender.
            </value>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.#ctor(Rock.Framework.Messaging.SonicMQ.Internal.ISonicSender)">
      <summary>
            Initializes a new instance of the SonicSenderBase class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.Send(Sonic.Jms.Message)">
      <summary>
            Sends the message.
            </summary>
      <param name="msg">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.Send(Sonic.Jms.Message,System.Int64)">
      <summary>
            Sends the message.
            </summary>
      <param name="msg">The message.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.Send``1(``0,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Sends the message.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.Send``1(``0,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode,Rock.Framework.Serialization.XmlSerializerType,System.Int64)">
      <summary>
            Sends the message.
            </summary>
      <typeparam name="T">any object type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.Send(Sonic.Jms.TextMessage)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.Send(Sonic.Jms.TextMessage,System.Int64)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.Send(System.String,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.Send(System.String,Rock.Framework.Messaging.SonicMQ.SonicDeliveryMode,System.Int64)">
      <summary>
            Sends the message.
            </summary>
      <param name="message">The message.</param>
      <param name="sonicDeliveryMode">The sonic delivery mode.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.Send(System.String)">
      <summary>
            Publishes the message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.Send(System.String,System.Int64)">
      <summary>
            Publishes the message.
            </summary>
      <param name="message">The message.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.Send``1(``0,Rock.Framework.Serialization.XmlSerializerType)">
      <summary>
            Publishes the message.
            </summary>
      <typeparam name="T">a type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.Send``1(``0,Rock.Framework.Serialization.XmlSerializerType,System.Int64)">
      <summary>
            Publishes the message.
            </summary>
      <typeparam name="T">a type that can be serialized to XML</typeparam>
      <param name="obj">The obj.</param>
      <param name="xmlSerializerType">Type of the XML serializer.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.SendXmlMessage(System.String)">
      <summary>
            Publishes the XML message.
            </summary>
      <param name="xmlData">The XML data.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicSender.SendXmlMessage(System.String,System.Int64)">
      <summary>
            Publishes the XML message.
            </summary>
      <param name="xmlData">The XML data.</param>
      <param name="timeToLive">The TimeToLive for this mesage (in milliseconds).</param>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.ContentType">
      <summary>
            HTTP header for ContentType.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.Internal.ContentType.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.Internal.ContentType.SoapXml">
      <summary>
            Sends the proper soap/xml content type header.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.Internal.ContentType.TextXml">
      <summary>
            Sends the proper text/xml content type header.
            </summary>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.Internal.ContentType.ApplicationXwwwFormUrlEncoded">
      <summary>
            application/x-www-form-urlencoded
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicJmsExceptionEventArgs">
      <summary>
            Jms Exception
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicJmsExceptionEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicJmsExceptionEventArgs" /> class.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicJmsExceptionEventArgs.JmsException">
      <summary>
            Gets or sets the JMS exception.
            </summary>
      <value>The JMS exception.</value>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicReceiverEventArgs">
      <summary>
            Allows access to the <see cref="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicReceiverEventArgs.Message" /> for events.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicReceiverEventArgs.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicReceiverEventArgs.Message">
      <summary>
            The sonic message.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.MessageExtensions">
      <summary>
            ExtProp method for Sonic.Jms.Message.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.MessageExtensions.GetError(Sonic.Jms.Message)">
      <summary>
            Takes a Sonic.Jms.Message and returns the error.
            </summary>
      <param name="msg">the message</param>
      <returns>string error</returns>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.ISonicQueueRequestor">
      <summary>
            Interface to support request scenario with Sonic queues.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicQueueRequestor.QueueRequestor">
      <summary>
            Gets or sets the queue requestor.
            </summary>
      <value>The queue requestor.</value>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.ISonicReceiver">
      <summary>
            Interface for handling Queue consumers or Topic Subscribers.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicReceiver.StartListener">
      <summary>
            Starts the listener.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicReceiver.StartListenerWithSelector(System.String)">
      <summary>
            Starts the listener with selector.
            </summary>
      <param name="selector">The selector.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicReceiver.StartListenerWithSelector(System.String,System.Boolean)">
      <summary>
            Starts the listener with selector.
            </summary>
      <param name="selector">The selector.</param>
      <param name="excludeDeliveryOfLocallyProducedMessages">if set to <c>true</c> [exclude delivery of locally produced messages].</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicReceiver.RestartListener">
      <summary>
            Restarts the listener.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicReceiver.MessageConsumer">
      <summary>
            Gets or sets the message consumer.
            </summary>
      <value>The message consumer.</value>
    </member>
    <member name="E:Rock.Framework.Messaging.SonicMQ.Internal.ISonicReceiver.MessageReceived">
      <summary>
            Occurs when [message received].
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.ISonicRequestReply">
      <summary>
            Handles Request/reply scenarios.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicRequestReply.SendXmlMessage(System.String,Rock.Framework.Messaging.SonicMQ.Internal.ContentType)">
      <summary>
            Sends the XML message.
            </summary>
      <param name="message">The message.</param>
      <param name="contentType">Type of the content.</param>
      <returns>reply message</returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.ISonicRequestReply.SendXmlMessage(Sonic.Jms.Ext.XMLMessage)">
      <summary>
            Sends the XML message.
            </summary>
      <param name="message">The message.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicRequestReply.ServerResponse">
      <summary>
            Gets or sets the server response.
            </summary>
      <value>The server response.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicRequestReply.Response">
      <summary>
            Gets or sets the response.
            </summary>
      <value>The response.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicRequestReply.Retries">
      <summary>
            Gets or sets the number of retries a message should be resent if it fails.  Default is 1.
            </summary>
      <value>The retries.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.ISonicRequestReply.WaitForResponseTimeoutInSeconds">
      <summary>
            The timout interval for waiting for a reply from the called service. Default value is 60 seconds.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.SonicClientLogProvider">
      <summary>
            Allows Smart Clients and applications that do not run on a server to write <see cref="T:Rock.Framework.Logging.LogEntry" /> objects to the centralized store.
            </summary>
      <remarks>
        <para>
            There is no need to set the IsApplicationHostedInternally property mapper as the Rock.Framework will automatically detect it.
            </para>
        <para>
            Note: In edge cases whereby other things need to be changed on the SonicLogProvider the propertyMapper in the config file can be used to 
            alter these settings.
            </para>
      </remarks>
      <example>
        <para>Example for an application irrespective of the environment (internal or midware).</para>
        <code><![CDATA[
            <provider type="Rock.Framework.Messaging.SonicMQ.SonicLogProvider, Rock.Framework <!- DON'T FORGET VERSION INFORMATION THIS IS JUST A SAMPLE -->" />
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicClientLogProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicClientLogProvider" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicClientLogProvider.Write(Rock.Framework.Logging.ILogEntry)">
      <summary>
            Writes the specified entry.
            </summary>
      <param name="entry">The entry.</param>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.SonicClientLogProvider.IsApplicationHostedInternally">
      <summary>
            Gets or sets a value indicating whether this application hosted internally. This property is no longer required nor used.
            </summary>
      <value>
        <c>true</c> if this instance is application hosted internally; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.SonicClientLogProvider.ServerAddress">
      <summary>
            Gets or sets the URL server address messages are posted to.
            </summary>
      <value>
            The server address.
            </value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.SonicClientLogProvider.LoggingLevel">
      <summary>
            Gets or sets the logging level.
            </summary>
      <value>The logging level.</value>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.SonicLogProvider">
      <summary>
            This provider is now deprecated and will be removed in a future release. Use SonicClientLogProvider instead.
            Writes <see cref="T:Rock.Framework.Logging.LogEntry" /> objects to the centralized store.
            </summary>
      <remarks>
        <para>
            There is no need to set the IsApplicationHostedInternally property mapper as the Rock.Framework will automatically detect it.
            </para>
      </remarks>
      <example>
        <para>Example for an application irrespective of the environment (internal or midware).</para>
        <code><![CDATA[
            <provider type="Rock.Framework.Messaging.SonicMQ.SonicLogProvider, Rock.Framework <!- DON'T FORGET VERSION INFORMATION THIS IS JUST A SAMPLE -->" />
            ]]></code>
      </example>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario">
      <summary>
            Scenario which supports getting messages sent to a queue.
            </summary>
      <remarks>
            Should always be loaded from SonicFactory.
            </remarks>
      <example>
        <code><![CDATA[
            ISonicReceiver rec = SonicFactory.GetInstance<SonicQueueConsumerScenario>("coreLogger");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.#ctor(Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario" /> class.  Initialization is costly do not 
            create a new instance per message.
            </summary>
      <param name="args">The args.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.StartListener">
      <summary>
            Starts the listener.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.StartListenerWithSelector(System.String,System.Boolean)">
      <summary>
            Starts the listener with a selector.
            </summary>
      <param name="selector">The selector.</param>
      <param name="excludeDeliveryOfLocallyProducedMessages">if set to <c>true</c> [exclude delivery of locally produced messages].</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.StartListenerWithSelector(System.String)">
      <summary>
            Starts the listener with selector.
            </summary>
      <param name="selector">The selector.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.ReconnectIfConnectionDropped(Sonic.Jms.JMSException)">
      <summary>
            Resumes the connection if connection dropped.
            </summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.RestartListener">
      <summary>
            Restarts the listener.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.onMessage(Sonic.Jms.Message)">
      <summary>
            fires when a message is received, then calls <see cref="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.OnMessageReceived(Sonic.Jms.Message)" /></summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.OnMessageReceived(Sonic.Jms.Message)">
      <summary>
            Called when [message received].
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.MessageConsumer">
      <summary>
            Gets or sets the message consumer.
            </summary>
      <value>The message consumer.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.Selector">
      <summary>
            Gets the selector.
            </summary>
      <value>
            The selector.
            </value>
    </member>
    <member name="E:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueConsumerScenario.MessageReceived">
      <summary>
            Occurs when [message received].
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueProducerScenario">
      <summary>
            Supports the scenario where messages are sent to a queue in Sonic.
            </summary>
      <remarks>
            Should always be loaded from the SonicFactory. 
            </remarks>
      <example>
        <code><![CDATA[
            ISonicSender sender = SonicFactory.GetInstance<SonicQueueProducerScenario>("someName");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueProducerScenario.Initialize">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueProducerScenario.#ctor">
      <summary>
            Initializes a new instance of the SonicQueueProducerScenario class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueProducerScenario.#ctor(Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueProducerScenario" /> class.
            </summary>
      <param name="args">The args.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicQueueProducerScenario.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.SonicReplyException">
      <summary>
            Thrown when there is a problem with a reply coming from Sonic.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicReplyException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicReplyException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicReplyException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicReplyException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicReplyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicReplyException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicReplyException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicReplyException" /> class.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario">
      <summary>
            Supports the scenario where messages are sent to Sonic and then a reply is 
            sent back.  Typically this scenario is used to jump the firewall.
            </summary>
      <remarks>
            Should always be loaded through the SonicFactory.
            </remarks>
      <example>
        <code><![CDATA[
             ISonicRequestReply req = SonicFactory.GetInstance<SonicRequestReplyScenario>("RequestReply");
             string response = req.SendXmlMessage(Helpers.GetLoggerRequestXml(), ContentType.SoapXml);
             ]]></code>
      </example>
    </member>
    <member name="F:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario._xmlMessage">
      <summary>
            Gets the Sonic XML message that was last sent to Sonic.
            </summary>
      <value>The XML message.</value>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.#ctor">
      <summary>
            Initializes a new instance of the SonicRequestReplyScenario class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.#ctor(Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario" /> class.
            </summary>
      <param name="args">The args.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.SendXmlMessage(System.String,Rock.Framework.Messaging.SonicMQ.Internal.ContentType)">
      <summary>
            Sends the Xml message to Sonic.
            </summary>
      <param name="message">xml message to send</param>
      <param name="contentType">either set to soap or text/xml depends on the service being called</param>
      <returns>response from service</returns>
      <exception cref="T:Rock.Framework.Messaging.SonicMQ.SonicReplyException">A reply message was not received.</exception>
      <exception cref="T:Rock.Framework.Messaging.SonicMQ.SonicSendToQueueException">Could not send message.</exception>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.SendXmlMessage(System.String,Rock.Framework.Messaging.SonicMQ.Internal.ContentType,System.String)">
      <summary>
            Sends the Xml message to Sonic.
            </summary>
      <param name="message">xml message to send</param>
      <param name="contentType">either set to soap or text/xml depends on the service being called</param>
      <param name="serverUrl">serverUrl</param>
      <returns>response from service</returns>
      <exception cref="T:Rock.Framework.Messaging.SonicMQ.SonicReplyException">A reply message was not received.</exception>
      <exception cref="T:Rock.Framework.Messaging.SonicMQ.SonicSendToQueueException">Could not send message.</exception>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.CreateXmlMessage(System.String,Rock.Framework.Messaging.SonicMQ.Internal.ContentType,System.String)">
      <summary>
            Create a Sonic XML message
            </summary>
      <param name="message">
      </param>
      <param name="contentType">
      </param>
      <param name="serverUrl">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.SendXmlMessage(Sonic.Jms.Ext.XMLMessage)">
      <summary>
            Sends an XMl message to Sonic. Allows the developer to set custom property headers on the XML 
            message before it is sent.
            </summary>
      <remarks>
            Before an XML message can be sent it must have the proper headers set including Content Type, and 
            probably others such as SOAPACTION (notice the casing) depending on the service being called. The URL used is from the config 
            file, this is set automatically. To set the properties you'll call message.setStringProperty() before 
            calling this function.
            </remarks>
      <param name="message">xml message to send</param>
      <returns>response from service</returns>
      <exception cref="T:Rock.Framework.Messaging.SonicMQ.SonicReplyException">A reply message was not received.</exception>
      <exception cref="T:Rock.Framework.Messaging.SonicMQ.SonicSendToQueueException">Could not send message.</exception>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.Initialize">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.InitializeFactory">
      <summary>
            Initializes the factory.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.InitializeConnection">
      <summary>
            Connects to queue.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.BuildConnectId">
      <summary>
            Builds the connect id.
            </summary>
      <returns>Unique String used for Sonic Connect Id</returns>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.Factory">
      <summary>
            Gets or sets the factory.
            </summary>
      <value>The factory.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.Connection">
      <summary>
            Expose Connection
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.ServerResponse">
      <summary>
            Gets or sets the server response.
            </summary>
      <value>The server response.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.Response">
      <summary>
            Gets or sets the response.
            </summary>
      <value>The response.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.QueueRequestor">
      <summary>
            Gets or sets the queue requestor.
            </summary>
      <value>The queue requestor.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.Retries">
      <summary>
            Default value is 1.  Set this to retry submitting the request.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicRequestReplyScenario.WaitForResponseTimeoutInSeconds">
      <summary>
            The timout interval for waiting for a reply from the called service. Default value is 60 seconds.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.SonicSendToQueueException">
      <summary>
            Thrown when there is a problem sending a message to a queue.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicSendToQueueException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicSendToQueueException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicSendToQueueException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicSendToQueueException" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicSendToQueueException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicSendToQueueException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicSendToQueueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicSendToQueueException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.SonicTimeoutException">
      <summary>
            Thrown when there is a timeout waiting for a reply from Sonic.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicTimeoutException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicTimeoutException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicTimeoutException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicTimeoutException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicTimeoutException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.SonicTimeoutException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.SonicTimeoutException" /> class.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicPublisherScenario">
      <summary>
            Supports the scenario where messages are published to a topic in Sonic.
            </summary>
      <remarks>
            Should always be loaded from SonicFactory.
            </remarks>
      <example>
        <code><![CDATA[
             ISonicSender sender = SonicFactory.GetInstance<SonicTopicPublisherScenario>("something");
             ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicPublisherScenario.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicPublisherScenario" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicPublisherScenario.#ctor(Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicPublisherScenario" /> class.
            </summary>
      <param name="args">The args.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicPublisherScenario.Initialize">
      <summary>
            Initializes the specified args.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicPublisherScenario.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario">
      <summary>
            Supports the scenario where messages are subscribed to via a Topic in Sonic.
            </summary>
      <remarks>
            Should always be loaded from SonicFactory.
            </remarks>
      <example>
        <code><![CDATA[
            ISonicReceiver rec = SonicFactory.GetInstance<SonicTopicSubscriberScenario>("coreLogger");
            ]]></code>
      </example>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario.#ctor">
      <summary>
            Initializes a new instance of the SonicTopicSubscriberScenario class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario.#ctor(Rock.Framework.Messaging.SonicMQ.ISonicArgs)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario" /> class.
            </summary>
      <param name="args">The args.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario.onMessage(Sonic.Jms.Message)">
      <summary>
            Ons the message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario.StartListener">
      <summary>
            Starts the listener.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario.StartListenerWithSelector(System.String,System.Boolean)">
      <summary>
            Starts the listener.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario.StartListenerWithSelector(System.String)">
      <summary>
            Starts the listener with selector.
            </summary>
      <param name="selector">The selector.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario.OnMessageReceived(Sonic.Jms.Message)">
      <summary>
            Called when [message received].
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario.ReconnectIfConnectionDropped(Sonic.Jms.JMSException)">
      <summary>
            Resumes the connection if connection dropped.
            </summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario.RestartListener">
      <summary>
            Restarts the listener.
            </summary>
    </member>
    <member name="M:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario.MessageConsumer">
      <summary>
            Gets or sets the message consumer.
            </summary>
      <value>The message consumer.</value>
    </member>
    <member name="P:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario.Selector">
      <summary>
            Gets the selector.
            </summary>
      <value>
            The selector.
            </value>
    </member>
    <member name="E:Rock.Framework.Messaging.SonicMQ.Internal.SonicTopicSubscriberScenario.MessageReceived">
      <summary>
            Occurs when [message received].
            </summary>
    </member>
    <member name="T:Rock.Framework.WindowsService.IService">
      <summary>
             Standard interface for windows services
            </summary>
    </member>
    <member name="M:Rock.Framework.WindowsService.IService.Start">
      <summary>
             Called on windows service starts. It has to return within 30 seconds.
            </summary>
    </member>
    <member name="M:Rock.Framework.WindowsService.IService.Stop">
      <summary>
             Called when the service stops.
            </summary>
    </member>
    <member name="T:Rock.Framework.WindowsService.RunServiceAs">
      <summary>
             Run service as 
            </summary>
    </member>
    <member name="F:Rock.Framework.WindowsService.RunServiceAs.LocalSystem">
      <summary>
             LocalSystem
            </summary>
    </member>
    <member name="F:Rock.Framework.WindowsService.RunServiceAs.NetworkService">
      <summary>
             NetworkService
            </summary>
    </member>
    <member name="T:Rock.Framework.WindowsService.ServiceFactory">
      <summary>
             Utility to create windows services that can also run as console apps.
            </summary>
    </member>
    <member name="M:Rock.Framework.WindowsService.ServiceFactory.ServiceCreator``1(System.String,System.String,System.String,Rock.Framework.WindowsService.RunServiceAs,System.String[])">
      <summary>
             Create a windows service.
             </summary>
      <typeparam name="T">The type of the service created.</typeparam>
      <param name="name">The name of the windows service.</param>
      <param name="displayName">The display name.</param>
      <param name="description">The description.</param>
      <param name="runServiceAs">Option to run the service as</param>
      <param name="args">The additional arguments required for the service.</param>
      <remarks>
             Make sure the Start and Stop methods are non blocking. 
             Like in a windows service you setup your application (i.e. start the timer, a listener, log the events) and return.
             To install your executable as a service run: {your_exe} install
             To uninstall service from Windows Services: {your_exe} uninstall
             Optional Install/Uninstall Parameters: /instance:{instance_name}
             </remarks>
      <example>
        <code><![CDATA[
            class Program
             {
               static void Main(string[] args)
               {
                   Rock.Framework.WindowsService.ServiceFactory.ServiceCreator<CoreLoggerConsumer>("CoreLogger", 
                       "Core Logger", 
                       "Processes core logs.", 
                       Rock.Framework.WindowsService.RunServiceAs.NetworkService, 
                       args);
               }
            }
            
            public class CoreLoggerConsumer : Rock.Framework.WindowsService.IService
            {
               private static ISonicReceiver _receiver;
               public static ISonicReceiver CoreLoggerReceiver
               {
                   get
                   {
                       if (_receiver == null)
                       {
                           try
                           {
                               Console.WriteLine("Initializing Sonic Factory...");
                               _receiver = SonicFactory.GetInstance<SonicQueueConsumerScenario>("coreLogger");
                               Console.WriteLine("Done initializing Sonic Factory...");
                           }
                           catch (Sonic.Jms.JMSException ex)
                           {
                               Console.WriteLine(ex.FormatToString());
                               ConsumerLogger.LogWriter.Error(ex.Message, ex);
                           }
                       }
                       return _receiver;
                   }
               }
               ////<summary>
               ////Initializes a new instance of the CoreLoggerConsumer class.
               ////</summary>
               public CoreLoggerConsumer()
               {
                   CoreLoggerReceiver.MessageReceived += new EventHandler<SonicReceiverEventArgs>(CoreLoggerReceiver_MessageReceived);
               }
               
               void CoreLoggerReceiver_MessageReceived(object sender, SonicReceiverEventArgs e)
               {
                   TextMessage txtMsg = (TextMessage)e.Message;
                   string receiveMsg = txtMsg.getText();
                   ///do something with the message
                   Console.WriteLine(receiveMsg);
                   ///and then acknowledge if SonicSessionMode.ClientAcknowledge is set
                   e.Message.acknowledge();
               }
               
               public void Start()
               {
                   Console.WriteLine("CoreLoggerConsumer is starting...");
                   CoreLoggerReceiver.StartListener();
                   Console.WriteLine("CoreLoggerConsumer is now listening for messages...");
               }
            
               public void Stop()
               {
                   Console.WriteLine("CoreLoggerConsumer is shuting down...");
                   SonicFactory.CleanUp();
               }
             } 
             ]]></code>
      </example>
    </member>
    <member name="T:Rock.Framework.Authorizer.AuthorizerADMember">
      <summary>
            AD Member class used by Authorizer
            </summary>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizerADMember.DN">
      <summary>
            Gets or sets the Distinguised Name.
            </summary>
      <value>The DN.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizerADMember.Members">
      <summary>
            Gets or sets the members.
            </summary>
      <value>The members.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.ISecurable">
      <summary>
            Common interface for all Authorizer securable objects.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ISecurable.GetOwners">
      <summary>
            Gets the owners.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ISecurable.GetManagers">
      <summary>
            Gets the managers.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ISecurable.GetUsers">
      <summary>
            Gets the users.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ISecurable.GetReaders">
      <summary>
            Gets the readers.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ISecurable.GrantAccessAsOwner(System.String)">
      <summary>
            Grants the access as manager.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ISecurable.GrantAccessAsManager(System.String)">
      <summary>
            Grants the access as manager.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ISecurable.GrantAccessAsUser(System.String)">
      <summary>
            Grants the access as user.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ISecurable.GrantAccessAsReader(System.String)">
      <summary>
            Grants the access as reader.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ISecurable.RevokeAccessAsOwner(System.String)">
      <summary>
            Revokes the access as owner.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ISecurable.RevokeAccessAsManager(System.String)">
      <summary>
            Revokes the access as manager.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ISecurable.RevokeAccessAsUser(System.String)">
      <summary>
            Revokes the access as user.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ISecurable.RevokeAccessAsReader(System.String)">
      <summary>
            Revokes the access as reader.
            </summary>
      <param name="userDN">The SQL login.</param>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.ISecurable.IAmAdmin">
      <summary>
            Gets a value indicating whether [I am admin].
            </summary>
      <value>
        <c>true</c> if [I am admin]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.ISecurable.IAmManager">
      <summary>
            Gets a value indicating whether [I am manager].
            </summary>
      <value>
        <c>true</c> if [I am manager]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.ISecurable.IAmUser">
      <summary>
            Gets a value indicating whether [I am user].
            </summary>
      <value>
        <c>true</c> if [I am user]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.ISecurable.IAmReader">
      <summary>
            Gets a value indicating whether [I am reader].
            </summary>
      <value>
        <c>true</c> if [I am reader]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.ISecurable.IAmOwner">
      <summary>
            Gets a value indicating whether current user is an Owner.
            </summary>
      <value>
        <c>true</c> if [I am owner]; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.IExport">
      <summary>
            Common interface for all Authorizer importable/exportable objects
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IExport.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
      <summary>
            Exports the specified XML writer.
            </summary>
      <param name="xmlWriter">The XML writer.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="ownerOfExport">The owner of export.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.IImport">
      <summary>
            Common interface for all Authorizer importable/exportable objects
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IImport.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,Rock.Framework.Authorizer.MergeOptions)">
      <summary>
            Imports the specified XML reader.
            </summary>
      <param name="xmlNode">The XML node.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="mergeOptions">The merge options.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.IApplication">
      <summary>
            Interfaces Interface for all Applications
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.Update(System.String)">
      <summary>
            Updates the specified application description.
            </summary>
      <param name="applicationDescription">The application description.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.Rename(System.String)">
      <summary>
            Renames application name with the specified new application name.
            </summary>
      <param name="newApplicationName">New name of the application.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.Delete">
      <summary>
            Deletes this application.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.CreateItem(System.String,System.String,Rock.Framework.Authorizer.Interfaces.ItemType)">
      <summary>
            Creates the itemName.
            </summary>
      <param name="itemName">Name of the itemName.</param>
      <param name="itemDescription">The itemName description.</param>
      <param name="itemType">Type of the itemName.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.GetItem(System.String)">
      <summary>
            Gets the itemName.
            </summary>
      <param name="itemName">Name of the itemName.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.GetItems">
      <summary>
            Gets the items.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.GetItems(Rock.Framework.Authorizer.Interfaces.ItemType)">
      <summary>
            Gets the items.
            </summary>
      <param name="itemType">Type of the itemName.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.HasItems(Rock.Framework.Authorizer.Interfaces.ItemType)">
      <summary>
            Determines whether [has child items].
            </summary>
      <param name="itemType">Type of the itemName.</param>
      <returns>
        <c>true</c> if [has child items]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.CreateApplicationGroup(Rock.Framework.Authorizer.Interfaces.ISid,System.String,System.String,System.String,Rock.Framework.Authorizer.GroupType)">
      <summary>
            Creates the application group.
            </summary>
      <param name="sid">The object owner.</param>
      <param name="name">The name.</param>
      <param name="description">The description.</param>
      <param name="lDapQuery">The ldap query.</param>
      <param name="groupType">Type of the group.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.HasApplicationGroups">
      <summary>
            Determines whether [has application groups].
            </summary>
      <returns>
        <c>true</c> if [has application groups]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.GetApplicationGroups">
      <summary>
            Gets the application groups.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.GetApplicationGroup(System.String)">
      <summary>
            Gets the application group.
            </summary>
      <param name="name">The name.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.GetApplicationGroup(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the application group.
            </summary>
      <param name="sid">The object owner.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.GetDBUser(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Finds the DB user.
            </summary>
      <param name="customSid">The custom sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.GetDBUser(System.String)">
      <summary>
            Finds the DB user.
            </summary>
      <param name="userName">The custom sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.GetDBUsers">
      <summary>
            Gets the DB users.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.CreateAttribute(System.String,System.String)">
      <summary>
            Creates an attribute.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.GetAttributes">
      <summary>
            Gets the attributes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.GetAttribute(System.String)">
      <summary>
            Gets the attribute.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.CheckApplicationAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the Application access [FOR Windows Users ONLY].
            </summary>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="validFor">The valid for.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>[true] for access allowd, [false] otherwise.</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplication.CheckApplicationAccess(Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the Application access [FOR DB Users ONLY].
            </summary>
      <param name="dbUser">The db user.</param>
      <param name="validFor">The valid for.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>[true] for access allowd, [false] otherwise.</returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplication.ApplicationId">
      <summary>
            Gets the application id.
            </summary>
      <value>The application id.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplication.Store">
      <summary>
            Gets the store.
            </summary>
      <value>The store.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplication.Name">
      <summary>
            Gets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplication.Description">
      <summary>
            Gets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplication.Items">
      <summary>
            Gets the items.
            </summary>
      <value>The items.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplication.ApplicationGroups">
      <summary>
            Gets the application groups.
            </summary>
      <value>The application groups.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplication.Attributes">
      <summary>
            Gets the attributes.
            </summary>
      <value>The attributes.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplication.Item(System.String)">
      <summary>
            Gets the <see cref="T:IAuthorizationItem" /> with the specified itemName name.
            </summary>
      <value>
      </value>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IApplication.ApplicationAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IApplication.ApplicationDeleted">
      <summary>
            Occurs after a Application object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IApplication.ApplicationUpdated">
      <summary>
            Occurs after a Application object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IApplication.ApplicationRenamed">
      <summary>
            Occurs after a Application object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IApplication.ApplicationGroupCreated">
      <summary>
            Occurs after an Application Group object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IApplication.ItemCreated">
      <summary>
            Occurs after an Item object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IApplication.ApplicationPermissionGranted">
      <summary>
            Occurs after a SQL Login is Granted on the Application.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IApplication.ApplicationPermissionRevoked">
      <summary>
            Occurs after a SQL Login is Revoked on the Application.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.Application">
      <summary>
            Represents an Application stored on Sql Server.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.Update(System.String)">
      <summary>
            Updates the specified application description.
            </summary>
      <param name="newApplicationDescription">The new application description.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.Rename(System.String)">
      <summary>
            Renames application name with the specified new application name.
            </summary>
      <param name="newApplicationName">New name of the application.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.Delete">
      <summary>
            Deletes this application.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.CreateItem(System.String,System.String,Rock.Framework.Authorizer.Interfaces.ItemType)">
      <summary>
            Creates the itemName.
            </summary>
      <param name="itemName">Name of the itemName.</param>
      <param name="itemDescription">The itemName description.</param>
      <param name="itemType">Type of the itemName.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetItem(System.String)">
      <summary>
            Gets the <see cref="T:IAuthorizationItem" /> with the specified itemName name.
            </summary>
      <value>
      </value>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.HasItems(Rock.Framework.Authorizer.Interfaces.ItemType)">
      <summary>
            Determines whether [has child items].
            </summary>
      <param name="itemType">Type of the itemName.</param>
      <returns>
        <c>true</c> if [has child items]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetItems">
      <summary>
            Gets the items.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetItems(Rock.Framework.Authorizer.Interfaces.ItemType)">
      <summary>
            Gets the items.
            </summary>
      <param name="itemType">Type of the itemName.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.CreateApplicationGroup(Rock.Framework.Authorizer.Interfaces.ISid,System.String,System.String,System.String,Rock.Framework.Authorizer.GroupType)">
      <summary>
            Creates the application group.
            </summary>
      <param name="sid">The object owner.</param>
      <param name="name">The name.</param>
      <param name="description">The description.</param>
      <param name="lDapQuery">The ldap query.</param>
      <param name="groupType">Type of the group.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.HasApplicationGroups">
      <summary>
            Determines whether [has application groups].
            </summary>
      <returns>
        <c>true</c> if [has application groups]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetApplicationGroups">
      <summary>
            Gets the application groups.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetApplicationGroup(System.String)">
      <summary>
            Gets the application group.
            </summary>
      <param name="name">The name.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetApplicationGroup(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the application group.
            </summary>
      <param name="sid">The object owner.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetAttributes">
      <summary>
            Gets the application attributes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetAttribute(System.String)">
      <summary>
            Gets the application attribute.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.CreateAttribute(System.String,System.String)">
      <summary>
            Creates an application attribute.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.CheckApplicationAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the Application access [FOR Windows Users ONLY].
            </summary>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="validFor">The valid for.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>
            [true] for access allowd, [false] otherwise.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.CheckApplicationAccess(Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the Application access [FOR DB Users ONLY].
            </summary>
      <param name="dbUser">The db user.</param>
      <param name="validFor">The valid for.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>
            [true] for access allowd, [false] otherwise.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
      <summary>
            Exports the specified XML writer.
            </summary>
      <param name="xmlWriter">The XML writer.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="ownerOfExport">The owner of export.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,Rock.Framework.Authorizer.MergeOptions)">
      <summary>
            Imports the specified XML reader.
            </summary>
      <param name="xmlNode">The XML node.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="mergeOptions">The merge options.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetDBUser(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Finds the DB user.
            </summary>
      <param name="customSid">The custom sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetDBUser(System.String)">
      <summary>
            Finds the DB user.
            </summary>
      <param name="userName">The custom sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetDBUsers">
      <summary>
            Gets the DB users.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetOwners">
      <summary>
            Gets the owners.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetManagers">
      <summary>
            Gets the managers.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetUsers">
      <summary>
            Gets the users.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GetReaders">
      <summary>
            Gets the readers.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GrantAccessAsOwner(System.String)">
      <summary>
            Grants the access as owner.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GrantAccessAsManager(System.String)">
      <summary>
            Grants the access as manager.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GrantAccessAsUser(System.String)">
      <summary>
            Grants the access as user.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.GrantAccessAsReader(System.String)">
      <summary>
            Grants the access as reader.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.RevokeAccessAsOwner(System.String)">
      <summary>
            Revokes the access as owner.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.RevokeAccessAsManager(System.String)">
      <summary>
            Revokes the access as manager.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.RevokeAccessAsUser(System.String)">
      <summary>
            Revokes the access as user.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Application.RevokeAccessAsReader(System.String)">
      <summary>
            Revokes the access as reader.
            </summary>
      <param name="userDN">The user DN.</param>
    </member>
    <member name="P:Rock.Framework.Authorizer.Application.Attributes">
      <summary>
            Gets the attributes.
            </summary>
      <value>The attributes.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Application.ApplicationGroups">
      <summary>
            Gets the application groups.
            </summary>
      <value>The application groups.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Application.Items">
      <summary>
            Gets the items.
            </summary>
      <value>The items.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Application.Store">
      <summary>
            Gets the store.
            </summary>
      <value>The store.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Application.Name">
      <summary>
            Gets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Application.Description">
      <summary>
            Gets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Application.Item(System.String)">
      <summary>
            Gets the <see cref="T:IAuthorizationItem" /> with the specified itemName name.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Application.IAmAdmin">
      <summary>
            Gets a value indicating whether [I am admin].
            </summary>
      <value>
        <c>true</c> if [I am admin]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Application.IAmManager">
      <summary>
            Gets a value indicating whether [I am manager].
            </summary>
      <value>
        <c>true</c> if [I am manager]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Application.IAmUser">
      <summary>
            Gets a value indicating whether [I am user].
            </summary>
      <value>
        <c>true</c> if [I am user]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Application.IAmReader">
      <summary>
            Gets a value indicating whether [I am reader].
            </summary>
      <value>
        <c>true</c> if [I am reader]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Application.IAmOwner">
      <summary>
            Gets a value indicating whether current user is an Owner.
            </summary>
      <value>
        <c>true</c> if [I am owner]; otherwise, <c>false</c>.</value>
    </member>
    <member name="E:Rock.Framework.Authorizer.Application.ApplicationDeleted">
      <summary>
            Occurs after a Application object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Application.ApplicationUpdated">
      <summary>
            Occurs after a Application object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Application.ApplicationRenamed">
      <summary>
            Occurs after a Application object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Application.ApplicationGroupCreated">
      <summary>
            Occurs after an Application Group object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Application.ItemCreated">
      <summary>
            Occurs after an Item object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Application.ApplicationAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Application.ApplicationPermissionGranted">
      <summary>
            Occurs after a user DN is Granted on the Application.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Application.ApplicationPermissionRevoked">
      <summary>
            Occurs after a user DN is Revoked on the Application.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.IAuthorizationAttribute`1">
      <summary>
            Interfaces interface for all Attributes
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationAttribute`1.Update(System.String,System.String)">
      <summary>
            Updates the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationAttribute`1.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationAttribute`1.AttributeId">
      <summary>
            Gets the authorization attribute id.
            </summary>
      <value>The authorization attribute id.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationAttribute`1.Owner">
      <summary>
            Gets the Owner.
            </summary>
      <value>The parent.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationAttribute`1.Key">
      <summary>
            Gets the key.
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationAttribute`1.Value">
      <summary>
            Gets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.AuthorizerAttribute`1">
      <summary>
            Interfaces interface for all Attributes
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerAttribute`1._db">
      <summary>
            AuthorizerModelDataContext object reference
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerAttribute`1._attributeId">
      <summary>
            Attribute Id
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerAttribute`1._owner">
      <summary>
            Attribute Owner
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerAttribute`1._key">
      <summary>
            Attribute Key
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerAttribute`1._value">
      <summary>
            Attribute Value
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerAttribute`1._ens">
      <summary>
            Event Notification System
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerAttribute`1.raiseAttributeDeleted(`0,System.String)">
      <summary>
            Raises the attribute deleted.
            </summary>
      <param name="owner">The owner.</param>
      <param name="key">The key.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerAttribute`1.raiseAttributeUpdated(Rock.Framework.Authorizer.Interfaces.IAuthorizationAttribute{`0},System.String,System.String)">
      <summary>
            Raises the attribute updated.
            </summary>
      <param name="attribute">The attribute.</param>
      <param name="oldKey">The old key.</param>
      <param name="oldValue">The old value.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerAttribute`1.#ctor(Rock.Framework.Authorizer.Model.AuthorizerModelDataContext,`0,System.Int32,System.String,System.String,Rock.Framework.Authorizer.EventNotification)">
      <summary>
            Initializes a new instance of the <see cref="T:Attribute&lt;OWNER&gt;" /> class.
            </summary>
      <param name="db">The db.</param>
      <param name="owner">The owner.</param>
      <param name="attributeId">The attribute id.</param>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <param name="ens">The ens.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerAttribute`1.Update(System.String,System.String)">
      <summary>
            Updates the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerAttribute`1.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerAttribute`1.Dispose">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerAttribute`1.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerAttribute`1.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
      <summary>
            Exports the specified XML writer.
            </summary>
      <param name="xmlWriter">The XML writer.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="ownerOfExport">The owner of export.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerAttribute`1.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizerAttribute`1.AttributeId">
      <summary>
            Gets the attribute id.
            </summary>
      <value>The attribute id.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizerAttribute`1.Owner">
      <summary>
            Gets the Owner.
            </summary>
      <value>The Owner.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizerAttribute`1.Key">
      <summary>
            Gets the key.
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizerAttribute`1.Value">
      <summary>
            Gets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.ApplicationAttribute">
      <summary>
            Application Attribute
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationAttribute.Update(System.String,System.String)">
      <summary>
            Updates the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationAttribute.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.IApplicationGroup">
      <summary>
            Interfaces interface for all Application Groups.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.Update(Rock.Framework.Authorizer.Interfaces.ISid,System.String,Rock.Framework.Authorizer.GroupType)">
      <summary>
            Updates the specified object owner.
            </summary>
      <param name="sid">The object owner.</param>
      <param name="description">The description.</param>
      <param name="groupType">Type of the group.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.UpdateLDapQuery(System.String)">
      <summary>
            Updates the L dap query.
            </summary>
      <param name="newLdapQuery">The new ldap query.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.Rename(System.String)">
      <summary>
            Renames the specified new name.
            </summary>
      <param name="newName">The new name.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.CreateApplicationGroupMember(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,System.Boolean)">
      <summary>
            Creates the application group member.
            </summary>
      <param name="sid">The object owner.</param>
      <param name="whereDefined">Where member is defined.</param>
      <param name="isMember">if set to <c>true</c> [is member].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.GetApplicationGroupMembers">
      <summary>
            Gets the application group members.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.GetApplicationGroupNonMembers">
      <summary>
            Gets the application group non members.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.GetApplicationGroupAllMembers">
      <summary>
            Gets the A application group all members.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.GetApplicationGroupMember(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the application group member.
            </summary>
      <param name="sid">The object owner.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.IsInGroup(System.Security.Principal.WindowsIdentity)">
      <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
      <param name="windowsIdentity">The windows identity.</param>
      <returns>
        <c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.IsInGroup(Rock.Framework.Authorizer.Interfaces.IDbUser)">
      <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
      <param name="dbUser">The db user.</param>
      <returns>
        <c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.ExecuteLDAPQuery">
      <summary>
            Executes the LDAP query.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.ExecuteLDAPQuery(System.String)">
      <summary>
            Executes the LDAP query.
            </summary>
      <param name="testLDapQuery">The test LDap query.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.ApplicationGroupId">
      <summary>
            Gets the application group id.
            </summary>
      <value>The application group id.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.Application">
      <summary>
            Gets the application.
            </summary>
      <value>The application.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.SID">
      <summary>
            Gets the object owner.
            </summary>
      <value>The object owner.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.Name">
      <summary>
            Gets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.Description">
      <summary>
            Gets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.LDAPQuery">
      <summary>
            Gets the LDAP query.
            </summary>
      <value>The LDAP query.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.GroupType">
      <summary>
            Gets the type of the group.
            </summary>
      <value>The type of the group.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.Members">
      <summary>
            Gets the members.
            </summary>
      <value>The members.</value>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.ApplicationGroupDeleted">
      <summary>
            Occurs after a ApplicationGroup object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.ApplicationGroupLDAPQueryUpdated">
      <summary>
            Occurs after a ApplicationGroup LDAPQuery has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.ApplicationGroupUpdated">
      <summary>
            Occurs after a ApplicationGroup object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.ApplicationGroupRenamed">
      <summary>
            Occurs after a ApplicationGroup object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IApplicationGroup.ApplicationGroupMemberCreated">
      <summary>
            Occurs after an ApplicationGroupMember object has been Created.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.ApplicationGroup">
      <summary>
            Application Group class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.Update(Rock.Framework.Authorizer.Interfaces.ISid,System.String,Rock.Framework.Authorizer.GroupType)">
      <summary>
            Updates the specified object owner.
            </summary>
      <param name="sid">The object owner.</param>
      <param name="description">The description.</param>
      <param name="groupType">Type of the group.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.UpdateLDapQuery(System.String)">
      <summary>
            Updates the L dap query.
            </summary>
      <param name="newLdapQuery">The new ldap query.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.Rename(System.String)">
      <summary>
            Renames the specified new name.
            </summary>
      <param name="newName">The new name.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.CreateApplicationGroupMember(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,System.Boolean)">
      <summary>
            Creates the application group member.
            </summary>
      <param name="sid">The object owner.</param>
      <param name="whereDefined">The where defined.</param>
      <param name="isMember">if set to <c>true</c> [is member].</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.GetApplicationGroupMembers">
      <summary>
            Gets the store group members.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.GetApplicationGroupMember(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the application group member.
            </summary>
      <param name="sid">The object owner.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.GetApplicationGroupNonMembers">
      <summary>
            Gets the store group members.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.GetApplicationGroupAllMembers">
      <summary>
            Gets the application group all members.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.IsInGroup(System.Security.Principal.WindowsIdentity)">
      <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
      <param name="windowsIdentity">The windows identity.</param>
      <returns>
        <c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.IsInGroup(Rock.Framework.Authorizer.Interfaces.IDbUser)">
      <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
      <param name="dbUser">The db user.</param>
      <returns>
        <c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.isAMemberOfGroup(System.Boolean,System.Byte[],System.Boolean,System.String,System.Byte[],System.Int32)">
      <summary>
            Determines whether [is A member of group] [the specified group type].
            </summary>
      <param name="groupType">if set to <c>true</c> [group type].</param>
      <param name="GroupSid">The group sid.</param>
      <param name="authorizermodeMode">if set to <c>true</c> [authorizermode mode].</param>
      <param name="rootDsePath">The root dse path.</param>
      <param name="token">The token.</param>
      <param name="userGroupsCount">The user groups count.</param>
      <returns>
        <c>true</c> if [is A member of group] [the specified group type]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
      <summary>
            Exports the specified XML writer.
            </summary>
      <param name="xmlWriter">The XML writer.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="ownerOfExport">The owner of export.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,Rock.Framework.Authorizer.MergeOptions)">
      <summary>
            Imports the specified XML reader.
            </summary>
      <param name="xmlNode">The XML node.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="mergeOptions">The merge options.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.ExecuteLDAPQuery">
      <summary>
            Executes the LDAP query.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.ExecuteLDAPQuery(System.String)">
      <summary>
            Executes the LDAP query.
            </summary>
      <param name="testLDapQuery">The test L dap query.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroup.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroup.Members">
      <summary>
            Gets the members.
            </summary>
      <value>The members.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroup.ApplicationGroupId">
      <summary>
            Gets the application group id.
            </summary>
      <value>The application group id.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroup.Application">
      <summary>
            Gets the application.
            </summary>
      <value>The application.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroup.SID">
      <summary>
            Gets the object owner.
            </summary>
      <value>The object owner.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroup.Name">
      <summary>
            Gets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroup.Description">
      <summary>
            Gets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroup.LDAPQuery">
      <summary>
            Gets the LDAP query.
            </summary>
      <value>The LDAP query.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroup.GroupType">
      <summary>
            Gets the type of the group.
            </summary>
      <value>The type of the group.</value>
    </member>
    <member name="E:Rock.Framework.Authorizer.ApplicationGroup.ApplicationGroupDeleted">
      <summary>
            Occurs after a ApplicationGroup object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.ApplicationGroup.ApplicationGroupLDAPQueryUpdated">
      <summary>
            Occurs after a ApplicationGroup LDAPQuery has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.ApplicationGroup.ApplicationGroupUpdated">
      <summary>
            Occurs after a ApplicationGroup object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.ApplicationGroup.ApplicationGroupRenamed">
      <summary>
            Occurs after a ApplicationGroup object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.ApplicationGroup.ApplicationGroupMemberCreated">
      <summary>
            Occurs after an ApplicationGroupMember object has been Created.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.ExceptionBaseException">
      <summary>
            Authorizer Exception Base class.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.ApplicationGroupException">
      <summary>
            Application Group Exception class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupException.#ctor(Rock.Framework.Authorizer.Interfaces.IApplicationGroup,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:ApplicationGroupException" /> class.
            </summary>
      <param name="applicationGroup">The application group.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupException.#ctor(Rock.Framework.Authorizer.Interfaces.IApplicationGroup,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:ApplicationGroupException" /> class.
            </summary>
      <param name="applicationGroup">The application group.</param>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.ApplicationGroupException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.ApplicationGroupException" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.ApplicationGroupException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.ApplicationGroupException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroupException.ApplicationGroup">
      <summary>
            Gets the application.
            </summary>
      <value>The application.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.IApplicationGroupMember">
      <summary>
            Interfaces interface for all Application Group Members.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroupMember.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IApplicationGroupMember.GetMemberInfo(System.String@)">
      <summary>
            Gets the member info.
            </summary>
      <param name="displayName">Name of the display.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplicationGroupMember.ApplicationGroupMemberId">
      <summary>
            Gets the application group member id.
            </summary>
      <value>The application group member id.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplicationGroupMember.ApplicationGroup">
      <summary>
            Gets the application group.
            </summary>
      <value>The application group.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplicationGroupMember.SID">
      <summary>
            Gets the object owner.
            </summary>
      <value>The object owner.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplicationGroupMember.DefinitionSource">
      <summary>
            Gets where member is defined.
            </summary>
      <value>The where defined.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IApplicationGroupMember.IsMember">
      <summary>
            Gets a value indicating whether this instance is member.
            </summary>
      <value>
        <c>true</c> if this instance is member; otherwise, <c>false</c>.</value>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IApplicationGroupMember.ApplicationGroupMemberDeleted">
      <summary>
            Occurs after a SqlApplicationGroupMember object has been Deleted.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.ApplicationGroupMember">
      <summary>
            Application Group Member class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupMember.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupMember.GetMemberInfo(System.String@)">
      <summary>
            Gets the member info.
            </summary>
      <param name="displayName">Name of the display.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupMember.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
      <summary>
            Exports the specified XML writer.
            </summary>
      <param name="xmlWriter">The XML writer.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="ownerOfExport">The owner of export.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupMember.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean)">
      <summary>
            Imports the specified XML reader.
            </summary>
      <param name="xmlNode">The XML node.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupMember.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroupMember.ApplicationGroupMemberId">
      <summary>
            Gets the application group member id.
            </summary>
      <value>The application group member id.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroupMember.ApplicationGroup">
      <summary>
            Gets the application group.
            </summary>
      <value>The application group.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroupMember.SID">
      <summary>
            Gets the object owner.
            </summary>
      <value>The object owner.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroupMember.DefinitionSource">
      <summary>
            Gets where member is defined.
            </summary>
      <value>The where defined.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroupMember.IsMember">
      <summary>
            Gets a value indicating whether this instance is member.
            </summary>
      <value>
        <c>true</c> if this instance is member; otherwise, <c>false</c>.</value>
    </member>
    <member name="E:Rock.Framework.Authorizer.ApplicationGroupMember.ApplicationGroupMemberDeleted">
      <summary>
            Occurs after a SqlApplicationGroupMember object has been Deleted.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.ApplicationGroupMemberException">
      <summary>
            Application Group Member Exception class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupMemberException.#ctor(Rock.Framework.Authorizer.Interfaces.IApplicationGroupMember,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:ApplicationGroupException" /> class.
            </summary>
      <param name="applicationGroupMember">The application group member.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupMemberException.#ctor(Rock.Framework.Authorizer.Interfaces.IApplicationGroupMember,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:ApplicationGroupException" /> class.
            </summary>
      <param name="applicationGroupMember">The application group member.</param>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.ApplicationGroupMemberException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupMemberException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.ApplicationGroupMemberException" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupMemberException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.ApplicationGroupMemberException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ApplicationGroupMemberException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.ApplicationGroupMemberException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="P:Rock.Framework.Authorizer.ApplicationGroupMemberException.ApplicationGroupMember">
      <summary>
            Gets the application group member.
            </summary>
      <value>The application group member.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.IAuthorization">
      <summary>
            Interfaces interface for all Authorizations
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorization.Update(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,Rock.Framework.Authorizer.AuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Updates the specified authorization type.
            </summary>
      <param name="Owner">The owner.</param>
      <param name="sid">The sid.</param>
      <param name="sidDefinitionSource">The sid where defined.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorization.Update(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,Rock.Framework.Authorizer.AuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
      <summary>
            Updates the specified authorization type.
            </summary>
      <param name="Owner">The owner.</param>
      <param name="sid">The sid.</param>
      <param name="sidDefinitionSource">The sid where defined.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
      <param name="businessHoursOnly">if set to <c>true</c> [business hours only].</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorization.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorization.CreateAttribute(System.String,System.String)">
      <summary>
            Creates an attribute.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorization.GetAttributes">
      <summary>
            Gets the attributes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorization.GetAttribute(System.String)">
      <summary>
            Gets the attribute.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorization.GetMemberInfo(System.String@)">
      <summary>
            Gets the member info.
            </summary>
      <param name="displayName">Display Name of the member.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorization.GetOwnerInfo(System.String@)">
      <summary>
            Gets the owner info.
            </summary>
      <param name="displayName">Display Name of the owner.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorization.AuthorizationId">
      <summary>
            Gets the authorization id.
            </summary>
      <value>The authorization id.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorization.Item">
      <summary>
            Gets the itemName.
            </summary>
      <value>The itemName.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorization.Owner">
      <summary>
            Gets the Owner.
            </summary>
      <value>The Owner object owner.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorization.OwnerSidDefinitionSource">
      <summary>
            Gets the where is defined the Owner.
            </summary>
      <value>The object owner where defined.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorization.SID">
      <summary>
            Gets the object owner.
            </summary>
      <value>The object owner.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorization.SidDefinitionSource">
      <summary>
            Gets the object owner where defined.
            </summary>
      <value>The object owner where defined.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorization.AuthorizationType">
      <summary>
            Gets the type of the authorization.
            </summary>
      <value>The type of the authorization.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorization.ValidFrom">
      <summary>
            Gets the valid from.
            </summary>
      <value>The valid from.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorization.ValidTo">
      <summary>
            Gets the valid to.
            </summary>
      <value>The valid to.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorization.BusinessHoursOnly">
      <summary>
            Indicates whether the authorization is valid only during business hours.
            </summary>
      <value>
        <c>true</c> if [business hours only]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorization.Attributes">
      <summary>
            Gets the attributes.
            </summary>
      <value>The attributes.</value>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IAuthorization.AuthorizationAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IAuthorization.AuthorizationDeleted">
      <summary>
            Occurs after an Authorization object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IAuthorization.AuthorizationUpdated">
      <summary>
            Occurs after an Authorization object has been Updated.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.Authorization">
      <summary>
            Represents an Authorization stored on Sql Server.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Authorization.Update(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,Rock.Framework.Authorizer.AuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Updates the specified authorization type.
            </summary>
      <param name="owner">The owner Sid.</param>
      <param name="sid">The member Sid.</param>
      <param name="sidDefinitionSource ">The object owner where defined.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Authorization.Update(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,Rock.Framework.Authorizer.AuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
      <summary>
            Updates the specified authorization type.
            </summary>
      <param name="owner">The owner Sid.</param>
      <param name="sid">The member Sid.</param>
      <param name="sidDefinitionSource">The sid definition source.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
      <param name="businessHoursOnly">if set to <c>true</c> [business hours only].</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Authorization.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Authorization.GetAttributes">
      <summary>
            Gets the authorization attributes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Authorization.GetAttribute(System.String)">
      <summary>
            Gets the authorization attribute.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Authorization.CreateAttribute(System.String,System.String)">
      <summary>
            Creates an authorization attribute.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Authorization.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Authorization.GetMemberInfo(System.String@)">
      <summary>
            Gets the member info.
            </summary>
      <param name="displayName">Display name of the member.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Authorization.GetOwnerInfo(System.String@)">
      <summary>
            Gets the owner info.
            </summary>
      <param name="displayName">Display name of the Owner.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Authorization.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
      <summary>
            Exports the specified XML writer.
            </summary>
      <param name="xmlWriter">The XML writer.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="ownerOfExport">The owner of export.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Authorization.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,Rock.Framework.Authorizer.MergeOptions)">
      <summary>
            Imports the specified XML reader.
            </summary>
      <param name="xmlNode">The XML node.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="mergeOptions">The merge options.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Authorization.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Authorization.Attributes">
      <summary>
            Gets the attributes.
            </summary>
      <value>The attributes.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Authorization.Item">
      <summary>
            Gets the itemName.
            </summary>
      <value>The itemName.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Authorization.Owner">
      <summary>
            Gets the Owner owner.
            </summary>
      <value>The Owner owner.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Authorization.SID">
      <summary>
            Gets the Member owner.
            </summary>
      <value>The Member owner.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Authorization.SidDefinitionSource">
      <summary>
            Gets the object owner where defined.
            </summary>
      <value>The object owner where defined.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Authorization.OwnerSidDefinitionSource">
      <summary>
            Gets the object owner Sid where defined.
            </summary>
      <value>The object owner where defined.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Authorization.AuthorizationType">
      <summary>
            Gets the type of the authorization.
            </summary>
      <value>The type of the authorization.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Authorization.ValidFrom">
      <summary>
            Gets the valid from.
            </summary>
      <value>The valid from.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Authorization.ValidTo">
      <summary>
            Gets the valid to.
            </summary>
      <value>The valid to.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Authorization.BusinessHoursOnly">
      <summary>
            Indicates whether the authorization is valid only during business hours.
            </summary>
      <value>
        <c>true</c> if [business hours only]; otherwise, <c>false</c>.</value>
    </member>
    <member name="E:Rock.Framework.Authorizer.Authorization.AuthorizationDeleted">
      <summary>
            Occurs after a Authorization object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Authorization.AuthorizationUpdated">
      <summary>
            Occurs after a Authorization object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Authorization.AuthorizationAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.AuthorizerAttribute">
      <summary>
            Authorization Attribute
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerAttribute.Update(System.String,System.String)">
      <summary>
            Updates the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerAttribute.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.AuthorizationException">
      <summary>
            Authorization Exception class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationException.#ctor(Rock.Framework.Authorizer.Interfaces.IAuthorization,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:StoreException" /> class.
            </summary>
      <param name="authorization">The authorization.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationException.#ctor(Rock.Framework.Authorizer.Interfaces.IAuthorization,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:StoreException" /> class.
            </summary>
      <param name="authorization">The authorization.</param>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.AuthorizationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.AuthorizationException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.AuthorizationException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.AuthorizationException" /> class.
            </summary>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizationException.Authorization">
      <summary>
            Gets the name of the authorization.
            </summary>
      <value>The name of the store.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem">
      <summary>
            Interface for all Authorizer Items
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.RemoveMember(Rock.Framework.Authorizer.Interfaces.IAuthorizationItem)">
      <summary>
            Removes the member.
            </summary>
      <param name="member">The member.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.Update(System.String)">
      <summary>
            Updates the specified application description.
            </summary>
      <param name="newItemDescription">The new itemName description.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.Rename(System.String)">
      <summary>
            Renames the specified application with a new application name.
            </summary>
      <param name="newItemName">New name of the itemName.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.Delete">
      <summary>
            Deletes this Item.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.HasMembers">
      <summary>
            Determines whether this instance has members.
            </summary>
      <returns>
        <c>true</c> if this instance has members; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.CreateAuthorization(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,Rock.Framework.Authorizer.AuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
      <summary>
            Creates the authorization.
            </summary>
      <param name="owner">The owner.</param>
      <param name="ownerSidDefinitionSource">The owner sid where defined.</param>
      <param name="sid">The object owner.</param>
      <param name="sidDefinitionSource">The object owner where defined.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
      <param name="businessHoursOnly">if set to <c>true</c> [business hours only].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.CreateAuthorization(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,Rock.Framework.Authorizer.AuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Creates the authorization.
            </summary>
      <param name="owner">The owner.</param>
      <param name="ownerSidDefinitionSource">The owner sid where defined.</param>
      <param name="sid">The object owner.</param>
      <param name="sidDefinitionSource">The object owner where defined.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.GetMembers">
      <summary>
            Gets the members.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.GetItemsWhereIAmAMember">
      <summary>
            Gets the Items where I'am a member.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.AddMember(Rock.Framework.Authorizer.Interfaces.IAuthorizationItem)">
      <summary>
            Adds the member.
            </summary>
      <param name="member">The member.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.GetAuthorizations">
      <summary>
            Gets the authorizations.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.GetAuthorizations(Rock.Framework.Authorizer.AuthorizationType)">
      <summary>
            Gets the authorizations.
            </summary>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.GetAuthorizationsOfMember(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the authorizations by SID.
            </summary>
      <param name="sid">The member owner.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.GetAuthorizationsOfOwner(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the authorizations by Owner SID.
            </summary>
      <param name="owner">The Owner owner.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.GetAuthorizations(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the authorizations by Owner SID and Member SID.
            </summary>
      <param name="owner">The Owner owner.</param>
      <param name="sid">The member owner.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.GetAuthorization(System.Int32)">
      <summary>
            Gets the authorization.
            </summary>
      <param name="authorizationId">The authorization id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.CheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR Windows Users ONLY].
            </summary>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="validFor">The valid for.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.CheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR Windows Users ONLY].
            </summary>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="validFor">The valid for.</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.CheckAccess(Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR DB Users ONLY].
            </summary>
      <param name="dbUser">The db user.</param>
      <param name="validFor">The valid for.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.CheckAccess(Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR DB Users ONLY].
            </summary>
      <param name="dbUser">The db user.</param>
      <param name="validFor">The valid for.</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.BeginCheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [FOR Windows Users ONLY].
            </summary>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="validFor">The valid for.</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.BeginCheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [FOR Windows Users ONLY].
            </summary>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="validFor">The valid for.</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.BeginCheckAccess(Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [FOR DB Users ONLY].
            </summary>
      <param name="dbUser">The db user.</param>
      <param name="validFor">The valid for.</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.BeginCheckAccess(Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [FOR DB Users ONLY].
            </summary>
      <param name="dbUser">The db user.</param>
      <param name="validFor">The valid for.</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.EndCheckAccess(System.IAsyncResult)">
      <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.EndCheckAccess(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
      <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <param name="attributes">The attributes readed.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.EndCheckAccessForDBUsers(System.IAsyncResult)">
      <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.EndCheckAccessForDBUsers(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
      <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <param name="attributes">The attributes readed.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.CreateDelegateAuthorization(System.Security.Principal.WindowsIdentity,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.RestrictedAuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Creates the delegation [Windows Users].
            </summary>
      <param name="delegatingUser">The delegating user.</param>
      <param name="delegateUser">The delegate user.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
      <returns>IAuthorization</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.CreateDelegateAuthorization(Rock.Framework.Authorizer.Interfaces.IDbUser,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.RestrictedAuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Creates the delegation [DB Users].
            </summary>
      <param name="delegatingUser">The delegating user.</param>
      <param name="delegateUser">The delegate user.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
      <returns>IAuthorization</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.CreateDelegateAuthorization(System.Security.Principal.WindowsIdentity,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.RestrictedAuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
      <summary>
            Creates the delegation [Windows Users].
            </summary>
      <param name="delegatingUser">The delegating user.</param>
      <param name="delegateUser">The delegate user.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
      <param name="businessHoursOnly">if set to <c>true</c> [business hours only].</param>
      <returns>IAuthorization</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.CreateDelegateAuthorization(Rock.Framework.Authorizer.Interfaces.IDbUser,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.RestrictedAuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
      <summary>
            Creates the delegation [DB Users].
            </summary>
      <param name="delegatingUser">The delegating user.</param>
      <param name="delegateUser">The delegate user.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
      <param name="businessHoursOnly">if set to <c>true</c> [business hours only].</param>
      <returns>IAuthorization</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.DeleteDelegateAuthorization(System.Security.Principal.WindowsIdentity,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.RestrictedAuthorizationType)">
      <summary>
            Removes the delegate [Windows Users].
            </summary>
      <param name="delegatingUser">The delegating user.</param>
      <param name="delegateUser">The delegate user.</param>
      <param name="authorizationType">Type of the authorization.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.DeleteDelegateAuthorization(Rock.Framework.Authorizer.Interfaces.IDbUser,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.RestrictedAuthorizationType)">
      <summary>
            Removes the delegate [DB Users].
            </summary>
      <param name="delegatingUser">The delegating user.</param>
      <param name="delegateUser">The delegate user.</param>
      <param name="authorizationType">Type of the authorization.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.CreateAttribute(System.String,System.String)">
      <summary>
            Creates an attribute.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.GetAttributes">
      <summary>
            Gets the attributes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.GetAttribute(System.String)">
      <summary>
            Gets the attribute.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.ReloadBizRule(System.String,Rock.Framework.Authorizer.BizRuleSourceLanguage)">
      <summary>
            Reloads the biz rule.
            </summary>
      <param name="bizRule">The biz rule.</param>
      <param name="bizRuleLanguage">The biz rule language.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.ClearBizRule">
      <summary>
            Clears the biz rule.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.LoadBizRuleAssembly">
      <summary>
            Loads the biz rule compiled assembly.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.ItemId">
      <summary>
            Gets the itemName id.
            </summary>
      <value>The itemName id.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.Application">
      <summary>
            Gets the application.
            </summary>
      <value>The application.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.Name">
      <summary>
            Gets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.BizRuleSource">
      <summary>
            Gets the biz rule.
            </summary>
      <value>The biz rule.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.Description">
      <summary>
            Gets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.ItemType">
      <summary>
            Is the type of the Item (Role, Task or Operation).
            </summary>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.Members">
      <summary>
            Gets the members.
            </summary>
      <value>The members.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.ItemsWhereIAmAMember">
      <summary>
            Gets the items where I am A member.
            </summary>
      <value>The items where I am A member.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.Attributes">
      <summary>
            Gets the attributes.
            </summary>
      <value>The attributes.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.Authorizations">
      <summary>
            Gets the authorizations.
            </summary>
      <value>The authorizations.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.Item(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the <see cref="T:IAuthorization[]" /> with the specified owner.
            </summary>
      <value>
      </value>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.ItemAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.ItemDeleted">
      <summary>
            Occurs after a SqlAuthorizationItem object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.ItemUpdated">
      <summary>
            Occurs after a SqlAuthorizationItem object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.BizRuleUpdated">
      <summary>
            Occurs after a SqlAuthorizationItem Biz Rule has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.ItemRenamed">
      <summary>
            Occurs after a SqlAuthorizationItem object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.AuthorizationCreated">
      <summary>
            Occurs after an Authorization object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.DelegateCreated">
      <summary>
            Occurs after a Delegated has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.DelegateDeleted">
      <summary>
            Occurs after a Delegate has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.MemberAdded">
      <summary>
            Occurs after an Item object has been Added as a member Item.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IAuthorizationItem.MemberRemoved">
      <summary>
            Occurs after an Item object has been Removed as a member Item.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.AuthorizationItem">
      <summary>
            Represents an AuthorizationItem stored on Sql Server.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.Update(System.String)">
      <summary>
            Updates the specified itemName description.
            </summary>
      <param name="newItemDescription">The new itemName description.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.GetMembers">
      <summary>
            Gets the members.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.GetItemsWhereIAmAMember">
      <summary>
            Gets the Items where I'am a member.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.MembershipAllowed(Rock.Framework.Authorizer.Interfaces.IAuthorizationItem,Rock.Framework.Authorizer.Interfaces.IAuthorizationItem)">
      <summary>
            Determines whether an Item can be a member of a parent Item.
            </summary>
      <param name="parentItem">The parent itemName.</param>
      <param name="childItem">The child itemName.</param>
      <returns>
        <c>true</c> if this instance [can be an itemName A son of] the specified parent itemName; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.AddMember(Rock.Framework.Authorizer.Interfaces.IAuthorizationItem)">
      <summary>
            Adds the member.
            </summary>
      <param name="member">The member.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.RemoveMember(Rock.Framework.Authorizer.Interfaces.IAuthorizationItem)">
      <summary>
            Removes the member.
            </summary>
      <param name="member">The member.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.Rename(System.String)">
      <summary>
            Renames the specified itemName with a new itemName name.
            </summary>
      <param name="newItemName">New name of the itemName.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.LoadBizRuleAssembly">
      <summary>
            Loads the biz rule compiled assembly.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.ClearBizRule">
      <summary>
            Clears the biz rule.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.ReloadBizRule(System.String,Rock.Framework.Authorizer.BizRuleSourceLanguage)">
      <summary>
            Reloads the biz rule.
            </summary>
      <param name="bizRule">The biz rule.</param>
      <param name="bizRuleLanguage">The biz rule language.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.Delete">
      <summary>
            Deletes this Item.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.HasMembers">
      <summary>
            Determines whether [has child items].
            </summary>
      <returns>
        <c>true</c> if [has child items]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.CreateAuthorization(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,Rock.Framework.Authorizer.AuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Creates the authorization.
            </summary>
      <param name="owner">The owner owner.</param>
      <param name="ownerSidDefinitionSource">The owner sid where defined.</param>
      <param name="sid">The object owner.</param>
      <param name="sidDefinitionSource">The object owner where defined.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.CreateAuthorization(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,Rock.Framework.Authorizer.AuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
      <summary>
            Creates the authorization.
            </summary>
      <param name="owner">The owner owner.</param>
      <param name="ownerSidDefinitionSource">The owner sid where defined.</param>
      <param name="sid">The object owner.</param>
      <param name="sidDefinitionSource">The object owner where defined.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
      <param name="businessHoursOnly">if set to <c>true</c> [business hours only].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.GetAuthorizations(Rock.Framework.Authorizer.AuthorizationType)">
      <summary>
            Gets the authorizations.
            </summary>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.GetAuthorizations">
      <summary>
            Gets the authorizations.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.GetAuthorizations(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the authorizations.
            </summary>
      <param name="owner">The owner Sid.</param>
      <param name="Sid">The member sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.GetAuthorizationsOfMember(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the authorizations by SID.
            </summary>
      <param name="sid">The object owner.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.GetAuthorizationsOfOwner(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the authorizations by Owner SID.
            </summary>
      <param name="owner">The owner Sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.GetAuthorization(System.Int32)">
      <summary>
            Gets the authorization.
            </summary>
      <param name="authorizationId">The authorization id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.CheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR Windows Users only].
            </summary>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="validFor">The valid for.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.CheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR Windows Users only].
            </summary>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="validFor">The valid for.</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.CheckAccess(Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR Windows Users only].
            </summary>
      <param name="dbUser">The db user.</param>
      <param name="validFor">The valid for.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.CheckAccess(Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR Windows Users only].
            </summary>
      <param name="dbUser">The db user.</param>
      <param name="validFor">The valid for.</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.BeginCheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [FOR Windows Users ONLY].
            </summary>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="validFor">The valid for.</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.BeginCheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [FOR Windows Users ONLY].
            </summary>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="validFor">The valid for.</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.BeginCheckAccess(Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [FOR DB Users ONLY].
            </summary>
      <param name="dbUser">The db user.</param>
      <param name="validFor">The valid for.</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.BeginCheckAccess(Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [FOR DB Users ONLY].
            </summary>
      <param name="dbUser">The db user.</param>
      <param name="validFor">The valid for.</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.EndCheckAccess(System.IAsyncResult)">
      <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.EndCheckAccess(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
      <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <param name="attributes">The attributes readed.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.EndCheckAccessForDBUsers(System.IAsyncResult)">
      <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.EndCheckAccessForDBUsers(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
      <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <param name="attributes">The attributes readed.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.CreateDelegateAuthorization(System.Security.Principal.WindowsIdentity,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.RestrictedAuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Creates the delegation [Windows Users].
            </summary>
      <param name="delegatingUser">The delegating user.</param>
      <param name="delegateUser">The delegate user.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
      <returns>IAuthorization</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.CreateDelegateAuthorization(System.Security.Principal.WindowsIdentity,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.RestrictedAuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
      <summary>
            Creates the delegation [Windows Users].
            </summary>
      <param name="delegatingUser">The delegating user.</param>
      <param name="delegateUser">The delegate user.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
      <param name="businessHoursOnly">if set to <c>true</c> [business hours only].</param>
      <returns>IAuthorization</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.CreateDelegateAuthorization(Rock.Framework.Authorizer.Interfaces.IDbUser,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.RestrictedAuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Creates the delegation [DB Users].
            </summary>
      <param name="delegatingUser">The delegating user.</param>
      <param name="delegateUser">The delegate user.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
      <returns>IAuthorization</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.CreateDelegateAuthorization(Rock.Framework.Authorizer.Interfaces.IDbUser,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.RestrictedAuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
      <summary>
            Creates the delegation [DB Users].
            </summary>
      <param name="delegatingUser">The delegating user.</param>
      <param name="delegateUser">The delegate user.</param>
      <param name="authorizationType">Type of the authorization.</param>
      <param name="validFrom">The valid from.</param>
      <param name="validTo">The valid to.</param>
      <param name="businessHoursOnly">if set to <c>true</c> [business hours only].</param>
      <returns>IAuthorization</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.DeleteDelegateAuthorization(System.Security.Principal.WindowsIdentity,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.RestrictedAuthorizationType)">
      <summary>
            Removes the delegate [Windows Users].
            </summary>
      <param name="delegatingUser">The delegating user.</param>
      <param name="delegateUser">The delegate user.</param>
      <param name="authorizationType">Type of the authorization.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.DeleteDelegateAuthorization(Rock.Framework.Authorizer.Interfaces.IDbUser,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.RestrictedAuthorizationType)">
      <summary>
            Removes the delegate [DB Users].
            </summary>
      <param name="delegatingUser">The delegating user.</param>
      <param name="delegateUser">The delegate user.</param>
      <param name="authorizationType">Type of the authorization.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.GetAttributes">
      <summary>
            Gets the itemName attributes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.GetAttribute(System.String)">
      <summary>
            Gets the itemName attribute.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.CreateAttribute(System.String,System.String)">
      <summary>
            Creates an itemName attribute.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
      <summary>
            Exports the specified XML writer.
            </summary>
      <param name="xmlWriter">The XML writer.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="ownerOfExport">The owner of export.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,Rock.Framework.Authorizer.MergeOptions)">
      <summary>
            Imports the specified XML reader.
            </summary>
      <param name="xmlNode">The XML node.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="mergeOptions">The merge options.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.areEquals(Rock.Framework.Authorizer.Interfaces.IAuthorization,Rock.Framework.Authorizer.Interfaces.IAuthorization)">
      <summary>
            Detect if auth1 is the same of auth2
            </summary>
      <param name="auth1">The auth1.</param>
      <param name="auth2">The auth2.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizationItem.ClearBizRuleAssemblyCache">
      <summary>
            Clears the biz rule assembly cache.
            </summary>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizationItem.Authorizations">
      <summary>
            Gets the authorizations.
            </summary>
      <value>The authorizations.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizationItem.Attributes">
      <summary>
            Gets the attributes.
            </summary>
      <value>The attributes.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizationItem.Members">
      <summary>
            Gets the members.
            </summary>
      <value>The members.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizationItem.ItemsWhereIAmAMember">
      <summary>
            Gets the items where I am A member.
            </summary>
      <value>The items where I am A member.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizationItem.ItemType">
      <summary>
            Gets the type of the itemName.
            </summary>
      <value>The type of the itemName.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizationItem.Application">
      <summary>
            Gets the application.
            </summary>
      <value>The application.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizationItem.Name">
      <summary>
            Gets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizationItem.BizRuleSource">
      <summary>
            Gets the biz rule.
            </summary>
      <value>The biz rule.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizationItem.BizRuleSourceLanguage">
      <summary>
            Gets the biz rule source language.
            </summary>
      <value>The biz rule script language.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizationItem.Description">
      <summary>
            Gets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizationItem.Item(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the <see cref="T:IAuthorization[]" /> with the specified owner.
            </summary>
      <value>
      </value>
    </member>
    <member name="E:Rock.Framework.Authorizer.AuthorizationItem.ItemDeleted">
      <summary>
            Occurs after a AuthorizationItem object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.AuthorizationItem.ItemUpdated">
      <summary>
            Occurs after a AuthorizationItem object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.AuthorizationItem.BizRuleUpdated">
      <summary>
            Occurs after a Biz Rule has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.AuthorizationItem.ItemRenamed">
      <summary>
            Occurs after a AuthorizationItem object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.AuthorizationItem.AuthorizationCreated">
      <summary>
            Occurs after an Authorization object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.AuthorizationItem.DelegateCreated">
      <summary>
            Occurs after a Delegate has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.AuthorizationItem.DelegateDeleted">
      <summary>
            Occurs after a Delegate has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.AuthorizationItem.MemberAdded">
      <summary>
            Occurs after an Item object has been Added as a member Item.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.AuthorizationItem.MemberRemoved">
      <summary>
            Occurs after an Item object has been Removed as a member Item.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.AuthorizationItem.ItemAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.AuthorizationType">
      <summary>
            Authorization Type
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizationType.Neutral">
      <summary>
            Neutral.
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizationType.Allow">
      <summary>
            Allow.
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizationType.Deny">
      <summary>
            Deny.
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizationType.AllowWithDelegation">
      <summary>
            Allow with delegation
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.AuthorizerApplicationException">
      <summary>
            Application Exception class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerApplicationException.#ctor(Rock.Framework.Authorizer.Interfaces.IApplication,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:StoreException" /> class.
            </summary>
      <param name="application">The application.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerApplicationException.#ctor(Rock.Framework.Authorizer.Interfaces.IApplication,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:StoreException" /> class.
            </summary>
      <param name="application">The application.</param>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.AuthorizerApplicationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerApplicationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.AuthorizerApplicationException" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerApplicationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.AuthorizerApplicationException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.AuthorizerApplicationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.AuthorizerApplicationException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="P:Rock.Framework.Authorizer.AuthorizerApplicationException.Application">
      <summary>
            Gets the name of the application.
            </summary>
      <value>The name of the store.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.AuthorizerIsolationLevel">
      <summary>
            Specifies the transaction locking behavior for store operations. 
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerIsolationLevel.ReadCommitted">
      <summary>
            Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data. 
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerIsolationLevel.ReadUncommitted">
      <summary>
            A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored. 
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerIsolationLevel.RepeatableRead">
      <summary>
            Locks are placed on all data that is used in a query, preventing other users from updating the data. Prevents non-repeatable reads but phantom rows are still possible. 
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerIsolationLevel.Snapshot">
      <summary>
            Reduces blocking by storing a version of data that one application can read while another is modifying the same data. Indicates that from one transaction you cannot see changes made in other transactions, even if you requery. 
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.AuthorizerMode">
      <summary>
            Authorizer Manager Mode. Authorizer can work in two different ways:
            “Administrator” and “Developer”; the first one doesn’t regard local
            Users/Groups/Well Know SIDs but only the Domain or Forest Active Directory
            Users/Groups/Well Know SIDs and doesn’t allow the Operation manipulation
            (because considered at developers use); the second one regards both . The
            “Developer” way has been done just for the development time, when the
            Deployment environment isn’t available or not even known. In this way the
            developer has to define from which are the Operations that make up each Task
            (previously defined by the analyst). To change this way it’s necessary to use
            the console and, by right clicking on the.NET Sql Authorization Manager node,
            choose the Options menu.
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerMode.Administrator">
      <summary>
            Administrator Mode
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerMode.Developer">
      <summary>
            Developer Mode
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.Model.AuthorizerModelDataContext">
      <summary>
            AuthorizerModelDataContext
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Model.AuthorizerModelDataContext.GetDBUsersEx(System.String,System.String,System.Byte[],System.String)">
      <summary>
            Gets the DB users ex.
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="applicationName">Name of the application.</param>
      <param name="dBUserSid">The d B user sid.</param>
      <param name="dBUserName">Name of the d B user.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Model.AuthorizerModelDataContext.BuildUserPermissionCache(System.String,System.String)">
      <summary>
            Builds the user permission cache.
            </summary>
      <param name="sTORENAME">The s TORENAME.</param>
      <param name="aPPLICATIONNAME">A PPLICATIONNAME.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Model.AuthorizerModelDataContext.CurrentUserCommonId">
      <summary>
            Gets or sets the current user common id.
            </summary>
      <value>The current user common id.</value>
    </member>
    <member name="M:Rock.Framework.Authorizer.Model.BuildUserPermissionCacheResult2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.Model.BuildUserPermissionCacheResult2" /> class.
            </summary>
      <param name="info">The info.</param>
      <param name="context">The context.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Model.BuildUserPermissionCacheResult2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="T:Rock.Framework.Authorizer.AuthorizerPermission">
      <summary>
            AuthorizerPermission
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerPermission.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerPermission.Reader">
      <summary>
            Reader
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerPermission.User">
      <summary>
            User
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerPermission.Manager">
      <summary>
            Manager
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.AuthorizerPermission.Owner">
      <summary>
            Owner
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.BizRuleSourceLanguage">
      <summary>
            Source Code Language for Biz Rules
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.BizRuleSourceLanguage.VBNet">
      <summary>
            VBNet
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.BizRuleSourceLanguage.CSharp">
      <summary>
            CSharp
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.Cache.ItemCheckAccessResult">
      <summary>
            ItemCheckAccessResult cache result.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.ItemCheckAccessResult.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.Cache.ItemCheckAccessResult" /> class.
            </summary>
      <param name="itemName">Name of the item.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.ItemCheckAccessResult.ClonedForItem(System.String)">
      <summary>
            Cloneds for item.
            </summary>
      <param name="itemName">Name of the item.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Cache.ItemCheckAccessResult.ItemName">
      <summary>
            Gets or sets the name of the item.
            </summary>
      <value>The name of the item.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Cache.ItemCheckAccessResult.AuthorizationType">
      <summary>
            Gets or sets the type of the authorization.
            </summary>
      <value>The type of the authorization.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Cache.ItemCheckAccessResult.Attributes">
      <summary>
            Gets or sets the attributes.
            </summary>
      <value>The attributes.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Cache.ItemCheckAccessResult.ValidFrom">
      <summary>
            Gets or sets the valid from.
            </summary>
      <value>The valid from.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Cache.ItemCheckAccessResult.ValidTo">
      <summary>
            Gets or sets the valid to.
            </summary>
      <value>The valid to.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Cache.ItemCheckAccessResult.Inherited">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Framework.Authorizer.Cache.ItemCheckAccessResult" /> is inherited.
            </summary>
      <value>
        <c>true</c> if inherited; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.Cache.StorageCache">
      <summary>
            Storage Cache class able to cache all Storage data without querying the DB Storage.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.StorageCache.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.Cache.StorageCache" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.StorageCache.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.Cache.StorageCache" /> class.
            </summary>
      <param name="connectionString">The connection string.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.StorageCache.BuildStorageCache">
      <summary>
            Build a cache version of the Storage.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.StorageCache.BuildStorageCache(System.String)">
      <summary>
            Build a cache version of the Storage.
            </summary>
      <param name="storeNameFilter">The store name filter.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.StorageCache.BuildStorageCache(System.String,System.String)">
      <summary>
            Build a cache version of the Storage.
            </summary>
      <param name="storeNameFilter">The store name filter.</param>
      <param name="applicationNameFilter">The application name filter.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.StorageCache.CheckAccess(System.String,System.String,System.String,System.String,System.String[],System.DateTime,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [WINDOWS USERS ONLY].
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="applicationName">Name of the application.</param>
      <param name="itemName">Name of the item.</param>
      <param name="userSSid">The user S sid.</param>
      <param name="groupsSSid">The groups S sid.</param>
      <param name="validFor">The valid for.</param>
      <param name="operationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="attributes">The attributes.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.StorageCache.CheckAccess(System.String,System.String,System.String,System.String,System.String[],System.DateTime,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [WINDOWS USERS ONLY].
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="applicationName">Name of the application.</param>
      <param name="itemName">Name of the item.</param>
      <param name="userSSid">The user S sid.</param>
      <param name="groupsSSid">The groups S sid.</param>
      <param name="validFor">The valid for.</param>
      <param name="operationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.StorageCache.CheckAccess(System.String,System.String,System.String,System.String,System.DateTime,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [DB USERS ONLY].
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="applicationName">Name of the application.</param>
      <param name="itemName">Name of the item.</param>
      <param name="DBuserSSid">The D buser S sid.</param>
      <param name="validFor">The valid for.</param>
      <param name="operationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="attributes">The attributes.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.StorageCache.CheckAccess(System.String,System.String,System.String,System.String,System.DateTime,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [DB USERS ONLY].
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="applicationName">Name of the application.</param>
      <param name="itemName">Name of the item.</param>
      <param name="DBuserSSid">The D buser S sid.</param>
      <param name="validFor">The valid for.</param>
      <param name="operationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.StorageCache.Dispose">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.StorageCache.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.StorageCache.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Rock.Framework.Authorizer.Cache.StorageCache.ConnectionString">
      <summary>
            Gets or sets the connection string.
            </summary>
      <value>The connection string.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Cache.StorageCache.Storage">
      <summary>
            Gets the storage.
            </summary>
      <value>The storage.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.Cache.UserCache">
      <summary>
            UserPermissionCache class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.UserCache.#ctor(Rock.Framework.Authorizer.Interfaces.IStorage,System.String,System.String,System.Security.Principal.WindowsIdentity,System.Boolean,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.Cache.UserCache" /> class.
            </summary>
      <param name="storage">The storage.</param>
      <param name="storeName">Name of the store.</param>
      <param name="applicationName">Name of the application.</param>
      <param name="windowsIdentity">The windows identity.</param>
      <param name="retrieveAttributes">if set to <c>true</c> [retrieve attributes].</param>
      <param name="multiThreadBuild">if set to <c>true</c> [multi thread build].</param>
      <param name="contextParameters">The context parameters.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.UserCache.#ctor(Rock.Framework.Authorizer.Interfaces.IStorage,System.String,System.String,Rock.Framework.Authorizer.Interfaces.IDbUser,System.Boolean,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.Cache.UserCache" /> class.
            </summary>
      <param name="storage">The storage.</param>
      <param name="storeName">Name of the store.</param>
      <param name="applicationName">Name of the application.</param>
      <param name="dbUser">The db user.</param>
      <param name="retrieveAttributes">if set to <c>true</c> [retrieve attributes].</param>
      <param name="multiThreadBuild">if set to <c>true</c> [multi thread build].</param>
      <param name="contextParameters">The context parameters.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.UserCache.CheckAccess(System.String,System.DateTime,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
      <summary>
            Checks the access.
            </summary>
      <param name="itemName">Name of the operation.</param>
      <param name="validFor">The valid for.</param>
      <param name="attributes">The attributes.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.UserCache.CheckAccess(System.String,System.DateTime)">
      <summary>
            Checks the access.
            </summary>
      <param name="itemName">Name of the itemName.</param>
      <param name="validFor">The valid for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.UserCache.CheckAccess(System.String)">
      <summary>
            Checks the access.
            </summary>
      <param name="itemName">Name of the itemName.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.UserCache.CheckAccess(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
      <summary>
            Checks the access.
            </summary>
      <param name="itemName">Name of the itemName.</param>
      <param name="attributes">The attributes.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.UserCache.Dispose">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Cache.UserCache.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:Rock.Framework.Authorizer.Cache.UserCache.Items">
      <summary>
            Gets Item names.
            </summary>
      <value>The items.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.IDbUser">
      <summary>
            Common Interface for All Database Custom Users
            </summary>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IDbUser.CustomSid">
      <summary>
            Custom Unique identifier of the DB User
            </summary>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IDbUser.UserName">
      <summary>
            Username of the DB User
            </summary>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IDbUser.CustomColumns">
      <summary>
            Gets the custom columns.
            </summary>
      <value>The custom columns.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.DbUser">
      <summary>
            DBUser class for custom DB User.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.DbUser.#ctor(Rock.Framework.Authorizer.Interfaces.ISid,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.DbUser" /> class.
            </summary>
      <param name="customSid">The custom sid.</param>
      <param name="userName">Name of the user.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.DbUser.#ctor(System.Data.DataRow)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.DbUser" /> class.
            </summary>
      <param name="DBUserDataRow">The DB user data row.</param>
    </member>
    <member name="P:Rock.Framework.Authorizer.DbUser.CustomSid">
      <summary>
            Custom Unique identifier of the DB User
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Rock.Framework.Authorizer.DbUser.UserName">
      <summary>
            Username of the DB User
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Rock.Framework.Authorizer.DbUser.CustomColumns">
      <summary>
            Gets the custom columns.
            </summary>
      <value>The custom columns.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.DefinitionSource">
      <summary>
            Position of where objects are defined
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.DefinitionSource.Store">
      <summary>
            Defined at store-level
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.DefinitionSource.Application">
      <summary>
            Defined at application-level
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.DefinitionSource.LDAP">
      <summary>
            Defined at LDAP-level
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.DefinitionSource.Local">
      <summary>
            Defined on Local machine
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.DefinitionSource.Database">
      <summary>
            Defined on a Database
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.IEventNotification">
      <summary>
            Interface for ENS (Event Notification System).
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationDeleted">
      <summary>
            Occurs after a Application object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationUpdated">
      <summary>
            Occurs after a Application object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationRenamed">
      <summary>
            Occurs after a Application object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationGroupCreated">
      <summary>
            Occurs after an Application Group object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ItemCreated">
      <summary>
            Occurs after an Item object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationPermissionGranted">
      <summary>
            Occurs after a SQL Login is Granted on the Application.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationPermissionRevoked">
      <summary>
            Occurs after a SQL Login is Revoked on the Application.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationGroupDeleted">
      <summary>
            Occurs after a ApplicationGroup object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationGroupLDAPQueryUpdated">
      <summary>
            Occurs after a ApplicationGroup LDAPQuery has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationGroupUpdated">
      <summary>
            Occurs after a ApplicationGroup object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationGroupRenamed">
      <summary>
            Occurs after a ApplicationGroup object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationGroupMemberCreated">
      <summary>
            Occurs after an ApplicationGroupMember object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreGroupDeleted">
      <summary>
            Occurs after a StoreGroup object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreGroupLDAPQueryUpdated">
      <summary>
            Occurs after a StoreGroup LDAPQuery has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreGroupUpdated">
      <summary>
            Occurs after a StoreGroup object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreGroupRenamed">
      <summary>
            Occurs after a StoreGroup object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreGroupMemberCreated">
      <summary>
            Occurs after an StoreGroupMember object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.AuthorizationDeleted">
      <summary>
            Occurs after a Authorization object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.AuthorizationUpdated">
      <summary>
            Occurs after a Authorization object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreAttributeDeleted">
      <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreAttributeUpdated">
      <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationAttributeDeleted">
      <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationAttributeUpdated">
      <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ItemAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ItemAttributeDeleted">
      <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ItemAttributeUpdated">
      <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.AuthorizationAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.AuthorizationAttributeDeleted">
      <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.AuthorizationAttributeUpdated">
      <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationGroupMemberDeleted">
      <summary>
            Occurs after a SqlApplicationGroupMember object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreGroupMemberDeleted">
      <summary>
            Occurs after a SqlStoreGroupMember object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ItemDeleted">
      <summary>
            Occurs after a SqlAuthorizationItem object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ItemUpdated">
      <summary>
            Occurs after a SqlAuthorizationItem object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.BizRuleUpdated">
      <summary>
            Occurs after a SqlAuthorizationItem BizRule has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ItemRenamed">
      <summary>
            Occurs after a SqlAuthorizationItem object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.AuthorizationCreated">
      <summary>
            Occurs after an Authorization object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.DelegateCreated">
      <summary>
            Occurs after a Delegate has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.DelegateDeleted">
      <summary>
            Occurs after a Delegate has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.MemberAdded">
      <summary>
            Occurs after an Item object has been Added as a member Item.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.MemberRemoved">
      <summary>
            Occurs after an Item object has been Removed as a member Item.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreCreated">
      <summary>
            Occurs after a Store object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreOpened">
      <summary>
            Occurs after a Store object has been Opened.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.TransactionStarted">
      <summary>
            Occurs after a Storage Transaction has benn initiated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.TransactionTerminated">
      <summary>
            Occurs after a Storage Transaction has benn terminated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.AuthorizerModeChanged">
      <summary>
            Occurs after AuthorizerMode has ben changed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreDeleted">
      <summary>
            Occurs after a Store object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreUpdated">
      <summary>
            Occurs after a Store object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreRenamed">
      <summary>
            Occurs after a Store object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationCreated">
      <summary>
            Occurs after an Application object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StoreGroupCreated">
      <summary>
            Occurs after a StoreGroup object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.ApplicationOpened">
      <summary>
            Occurs after an Application object has been Opened.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StorePermissionGranted">
      <summary>
            Occurs after a SQL Login is Granted on the Store.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.IEventNotification.StorePermissionRevoked">
      <summary>
            Occurs after a SQL Login is Revoked on the Store.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.EventNotification">
      <summary>
             Event Notification System.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.EventNotification.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.EventNotification" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.EventNotification.AddPublisher(Rock.Framework.Authorizer.Interfaces.IApplication)">
      <summary>
            Adds an IApplication publisher.
            </summary>
      <param name="publisher">The application.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.EventNotification.AddPublisher(Rock.Framework.Authorizer.Interfaces.IApplicationGroup)">
      <summary>
            Adds an IApplicationGroup publisher.
            </summary>
      <param name="publisher">The applicationGroup.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.EventNotification.AddPublisher(Rock.Framework.Authorizer.Interfaces.IStoreGroup)">
      <summary>
            Adds an IStoreGroup publisher.
            </summary>
      <param name="publisher">The storeGroup.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.EventNotification.AddPublisher(Rock.Framework.Authorizer.Interfaces.IAuthorization)">
      <summary>
            Adds an IAuthorization publisher.
            </summary>
      <param name="publisher">The publisher.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.EventNotification.AddPublisher(Rock.Framework.Authorizer.Interfaces.IAuthorizationAttribute{Rock.Framework.Authorizer.Interfaces.IAuthorization})">
      <summary>
            Adds an IAttribute publisher.
            </summary>
      <param name="publisher">The publisher.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.EventNotification.AddPublisher(Rock.Framework.Authorizer.Interfaces.IAuthorizationAttribute{Rock.Framework.Authorizer.Interfaces.IStore})">
      <summary>
            Adds an IAttribute publisher.
            </summary>
      <param name="publisher">The publisher.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.EventNotification.AddPublisher(Rock.Framework.Authorizer.Interfaces.IAuthorizationAttribute{Rock.Framework.Authorizer.Interfaces.IApplication})">
      <summary>
            Adds an IAttribute publisher.
            </summary>
      <param name="publisher">The publisher.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.EventNotification.AddPublisher(Rock.Framework.Authorizer.Interfaces.IAuthorizationAttribute{Rock.Framework.Authorizer.Interfaces.IAuthorizationItem})">
      <summary>
            Adds an IAttribute publisher.
            </summary>
      <param name="publisher">The publisher.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.EventNotification.AddPublisher(Rock.Framework.Authorizer.Interfaces.IApplicationGroupMember)">
      <summary>
            Adds an IApplicationGroupMember publisher.
            </summary>
      <param name="publisher">The publisher.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.EventNotification.AddPublisher(Rock.Framework.Authorizer.Interfaces.IStoreGroupMember)">
      <summary>
            Adds an IStoreGroupMember publisher.
            </summary>
      <param name="publisher">The publisher.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.EventNotification.AddPublisher(Rock.Framework.Authorizer.Interfaces.IAuthorizationItem)">
      <summary>
            Adds the IAuthorizationItem publisher.
            </summary>
      <param name="publisher">The publisher.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.EventNotification.AddPublisher(Rock.Framework.Authorizer.Interfaces.IStorage)">
      <summary>
            Adds the IStorage publisher.
            </summary>
      <param name="publisher">The publisher.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.EventNotification.AddPublisher(Rock.Framework.Authorizer.Interfaces.IStore)">
      <summary>
            Adds the IStore publisher.
            </summary>
      <param name="publisher">The publisher.</param>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationDeleted">
      <summary>
            Occurs after a Application object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationUpdated">
      <summary>
            Occurs after a Application object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationRenamed">
      <summary>
            Occurs after a Application object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationGroupCreated">
      <summary>
            Occurs after an Application Group object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ItemCreated">
      <summary>
            Occurs after an Item object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationPermissionGranted">
      <summary>
            Occurs after a SQL Login is Granted on the Application.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationPermissionRevoked">
      <summary>
            Occurs after a SQL Login is Revoked on the Application.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationGroupDeleted">
      <summary>
            Occurs after a ApplicationGroup object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationGroupLDAPQueryUpdated">
      <summary>
            Occurs after a ApplicationGroup LDAPQuery has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationGroupUpdated">
      <summary>
            Occurs after a ApplicationGroup object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationGroupRenamed">
      <summary>
            Occurs after a ApplicationGroup object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationGroupMemberCreated">
      <summary>
            Occurs after an ApplicationGroupMember object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreGroupDeleted">
      <summary>
            Occurs after a StoreGroup object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreGroupLDAPQueryUpdated">
      <summary>
            Occurs after a StoreGroup LDAPQuery has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreGroupUpdated">
      <summary>
            Occurs after a StoreGroup object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreGroupRenamed">
      <summary>
            Occurs after a StoreGroup object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreGroupMemberCreated">
      <summary>
            Occurs after an StoreGroupMember object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.AuthorizationDeleted">
      <summary>
            Occurs after a Authorization object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.AuthorizationUpdated">
      <summary>
            Occurs after a Authorization object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreAttributeDeleted">
      <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreAttributeUpdated">
      <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationAttributeDeleted">
      <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationAttributeUpdated">
      <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ItemAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ItemAttributeDeleted">
      <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ItemAttributeUpdated">
      <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.AuthorizationAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.AuthorizationAttributeDeleted">
      <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.AuthorizationAttributeUpdated">
      <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationGroupMemberDeleted">
      <summary>
            Occurs after a SqlApplicationGroupMember object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreGroupMemberDeleted">
      <summary>
            Occurs after a SqlStoreGroupMember object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ItemDeleted">
      <summary>
            Occurs after a SqlAuthorizationItem object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ItemUpdated">
      <summary>
            Occurs after a SqlAuthorizationItem object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.BizRuleUpdated">
      <summary>
            Occurs after a SqlAuthorizationItem BizRule has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ItemRenamed">
      <summary>
            Occurs after a SqlAuthorizationItem object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.AuthorizationCreated">
      <summary>
            Occurs after an Authorization object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.DelegateCreated">
      <summary>
            Occurs after a Delegate has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.DelegateDeleted">
      <summary>
            Occurs after a Delegate has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.MemberAdded">
      <summary>
            Occurs after an Item object has been Added as a member Item.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.MemberRemoved">
      <summary>
            Occurs after an Item object has been Removed as a member Item.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreCreated">
      <summary>
            Occurs after a Store object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreOpened">
      <summary>
            Occurs after a Store object has been Opened.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.TransactionStarted">
      <summary>
            Occurs after a Storage Transaction has benn initiated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.TransactionTerminated">
      <summary>
            Occurs after a Storage Transaction has benn terminated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.AuthorizerModeChanged">
      <summary>
            Occurs after AuthorizerMode has ben changed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreDeleted">
      <summary>
            Occurs after a Store object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreUpdated">
      <summary>
            Occurs after a Store object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreRenamed">
      <summary>
            Occurs after a Store object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationCreated">
      <summary>
            Occurs after an Application object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StoreGroupCreated">
      <summary>
            Occurs after a StoreGroup object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.ApplicationOpened">
      <summary>
            Occurs after an Application object has been Opened.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StorePermissionGranted">
      <summary>
            Occurs after a SQL Login is Granted on the Store.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.EventNotification.StorePermissionRevoked">
      <summary>
            Occurs after a SQL Login is Revoked on the Store.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ApplicationDeletedDelegate">
      <summary>
            Delegate for Application Deleted events.
            </summary>
      <param name="ownerStore">The owner store.</param>
      <param name="applicationName">Name of the application.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ApplicationRenamedDelegate">
      <summary>
            Delegate for Application Renamed events.
            </summary>
      <param name="application">The application.</param>
      <param name="oldName">The old name.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ApplicationUpdatedDelegate">
      <summary>
            Delegate for Application Updated events.
            </summary>
      <param name="application">The application.</param>
      <param name="oldDescription">The old description.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ApplicationGroupCreatedDelegate">
      <summary>
            Delegate for ApplicationGroupCreated events.
            </summary>
      <param name="application">The application.</param>
      <param name="applicationGroupCreated">The application group created.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ItemCreatedDelegate">
      <summary>
            Delegate for ItemCreated events.
            </summary>
      <param name="application">The application.</param>
      <param name="itemCreated">The itemName created.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ApplicationPermissionGrantedDelegate">
      <summary>
            Delegate for ApplicationPermissionGranted events
            </summary>
      <param name="application">The Application.</param>
      <param name="sqlLogin">The SQL Login.</param>
      <param name="role">The Authorizer Role.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ApplicationPermissionRevokedDelegate">
      <summary>
            Delegate for ApplicationPermissionRevoked events
            </summary>
      <param name="application">The Application</param>
      <param name="sqlLogin">The SQL Login</param>
      <param name="role">The Authorizer Role.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ApplicationGroupDeletedDelegate">
      <summary>
            Delegate for ApplicationGroup Deleted events.
            </summary>
      <param name="ownerApplication">The owner application.</param>
      <param name="applicationGroupName">Name of the applicationGroup.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ApplicationGroupRenamedDelegate">
      <summary>
            Delegate for ApplicationGroup Renamed events.
            </summary>
      <param name="applicationGroup">The applicationGroup.</param>
      <param name="oldName">The old name.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ApplicationGroupUpdatedDelegate">
      <summary>
            Delegate for ApplicationGroup Updated events.
            </summary>
      <param name="applicationGroup">Application Group updated</param>
      <param name="oldSid">The old SID</param>
      <param name="oldDescription">The old Description</param>
      <param name="oldGroupType">The old Group Type</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ApplicationGroupLDAPQueryUpdatedDelegate">
      <summary>
            Delegate for ApplicationGroup LDAPQueryUpdated events.
            </summary>
      <param name="applicationGroup">Application Group updated</param>
      <param name="oldLDapQuery">The old LDapQuery</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ApplicationGroupMemberCreatedDelegate">
      <summary>
            Delegate for ItemCreated events.
            </summary>
      <param name="applicationGroup">The applicationGroup.</param>
      <param name="memberCreated">The member created.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.StoreGroupDeletedDelegate">
      <summary>
            Delegate for StoreGroup Deleted events.
            </summary>
      <param name="ownerStore">The owner Store.</param>
      <param name="storeGroupName">Name of the storeGroup.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.StoreGroupRenamedDelegate">
      <summary>
            Delegate for StoreGroup Renamed events.
            </summary>
      <param name="storeGroup">The storeGroup.</param>
      <param name="oldName">The old name.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.StoreGroupUpdatedDelegate">
      <summary>
            Delegate for StoreGroup Updated events.
            </summary>
      <param name="storeGroup">Application Group updated</param>
      <param name="oldSid">The old SID</param>
      <param name="oldDescription">The old Description</param>
      <param name="oldGroupType">The old Group Type</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.StoreGroupLDAPQueryUpdatedDelegate">
      <summary>
            Delegate for StoreGroup LDAPQueryUpdated events.
            </summary>
      <param name="storeGroup">Application Group updated</param>
      <param name="oldLDapQuery">The old LDapQuery</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.StoreGroupMemberCreatedDelegate">
      <summary>
            Delegate for ItemCreated events.
            </summary>
      <param name="storeGroup">The storeGroup.</param>
      <param name="memberCreated">The member created.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.AuthorizationDeletedDelegate">
      <summary>
            Delegate for Authorization Deleted events.
            </summary>
      <param name="ownerItem">The owner Item.</param>
      <param name="owner">Owner Sid of the authorization.</param>
      <param name="sid">Sid of the authorization.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.AuthorizationUpdatedDelegate">
      <summary>
            Delegate for Authorization Updated events.
            </summary>
      <param name="authorization">The authorization updated object.</param>
      <param name="oldOwner">The old Owner.</param>
      <param name="oldOwnerSidDefinitionSource">The old OwnerSidDefinitionSource.</param>
      <param name="oldSid">The old Sid.</param>
      <param name="oldSidDefinitionSource">The old SidDefinitionSource.</param>
      <param name="oldAuthorizationType">The old AuthorizationType.</param>
      <param name="oldValidFrom">The old ValidFrom.</param>
      <param name="oldValidTo">The old ValidTo.</param>
      <param name="oldBusinessHoursOnly">The old BusinessHoursOnly.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.AttributeCreatedDelegate`1">
      <summary>
            Delegate for AttributeCreated events.
            </summary>
      <param name="owner">The Owner.</param>
      <param name="attributeCreated">The Attribute created.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.AttributeDeletedDelegate`1">
      <summary>
            Delegate for AttributeDeleted events.
            </summary>
      <param name="owner">The owner Authorization.</param>
      <param name="key">The key of the AuthorizationAttribute.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.AttributeUpdatedDelegate`1">
      <summary>
            Delegate for AttributeUpdated events.
            </summary>
      <param name="attribute">The attribute object.</param>
      <param name="oldKey">The old key.</param>
      <param name="oldValue">The old value.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ApplicationGroupMemberDeletedDelegate">
      <summary>
            Delegate for ApplicationGroupMember Deleted events.
            </summary>
      <param name="ownerApplicationGroup">The owner Application Group.</param>
      <param name="sid">The owner of the ApplicationGroupMember.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.StoreGroupMemberDeletedDelegate">
      <summary>
            Delegate for StoreGroupMember Deleted events.
            </summary>
      <param name="ownerStoreGroup">The owner Store Group.</param>
      <param name="sid">The owner of the StoreGroupMember.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ItemDeletedDelegate">
      <summary>
            Delegate for Item Deleted events.
            </summary>
      <param name="applicationContainer">The Application Container.</param>
      <param name="itemName">Name of the itemName.</param>
      <param name="itemType">Type of the itemName.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ItemRenamedDelegate">
      <summary>
            Delegate for Item Renamed events.
            </summary>
      <param name="item">The itemName.</param>
      <param name="oldName">The old name.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ItemUpdatedDelegate">
      <summary>
            Delegate for Item Updated events.
            </summary>
      <param name="item">The itemName.</param>
      <param name="oldDescription">The old description.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.BizRuleUpdatedDelegate">
      <summary>
            Delegate for Biz Rule Updated events.
            </summary>
      <param name="item">The itemName.</param>
      <param name="oldBizRule">The old Biz Rule.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.AuthorizationCreatedDelegate">
      <summary>
            Delegate for AuthorizationCreated events.
            </summary>
      <param name="item">The itemName.</param>
      <param name="authorizationCreated">The Authorization created.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.DelegateCreatedDelegate">
      <summary>
            Delegate for DelegationCreated events.
            </summary>
      <param name="item">The itemName.</param>
      <param name="delegationCreated">The Delegation created.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.DelegateDeletedDelegate">
      <summary>
            Delegate for DelegationDeleted events.
            </summary>
      <param name="item">The itemName.</param>
      <param name="delegatingUserSid">The delegating User.</param>
      <param name="delegatedUserSid">The delegated User.</param>
      <param name="authorizationType">The authorization Type.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.MemberAddedDelegate">
      <summary>
            Delegate for MemberAdded events.
            </summary>
      <param name="item">The itemName.</param>
      <param name="memberAdded">The member added.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.MemberRemovedDelegate">
      <summary>
            Delegate for MemberRemoved events.
            </summary>
      <param name="item">The itemName.</param>
      <param name="memberRemoved">The member removed.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.StoreCreatedDelegate">
      <summary>
            Delegate for StoreCreated events.
            </summary>
      <param name="storeCreated">The Store created.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.StoreOpenedDelegate">
      <summary>
            Delegate for StoreOpened events.
            </summary>
      <param name="store">The Store opened.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.TransactionStartedDelegate">
      <summary>
            Delegate for Begin Transaction Events.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.TransactionTerminatedDelegate">
      <summary>
            Delegate for Commit/Rollback Transaction Events.
            </summary>
      <param name="success">
      </param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.AuthorizerModeChangeDelegate">
      <summary>
            Delegate for Authorizer Mode Changed Events.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.StoreDeletedDelegate">
      <summary>
            Delegate for Store Deleted events.
            </summary>
      <param name="ownerStorage">The owner Storage.</param>
      <param name="storeName">Name of the store.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.StoreRenamedDelegate">
      <summary>
            Delegate for Store Renamed events.
            </summary>
      <param name="store">The store.</param>
      <param name="oldName">The old name.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.StoreUpdatedDelegate">
      <summary>
            Delegate for Store Updated events.
            </summary>
      <param name="store">The store.</param>
      <param name="oldDescription">The old description.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ApplicationCreatedDelegate">
      <summary>
            Delegate for StoreChildStoreCreated events.
            </summary>
      <param name="store">The store.</param>
      <param name="applicationCreated">The Application created.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.StoreGroupCreatedDelegate">
      <summary>
            Delegate for StoreCreated events.
            </summary>
      <param name="store">The store.</param>
      <param name="storeGroupCreated">The StoreGroup created.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.ApplicationOpenedDelegate">
      <summary>
            Delegate for ApplicationOpened events.
            </summary>
      <param name="application">The Application opened.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.StorePermissionGrantedDelegate">
      <summary>
            Delegate for StorePermissionGranted events
            </summary>
      <param name="store">The Store</param>
      <param name="sqlLogin">The SQL Login</param>
      <param name="role">The Authorizer Role.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.Delegates.StorePermissionRevokedDelegate">
      <summary>
            Delegate for StorePermissionRevoked events
            </summary>
      <param name="store">The Store</param>
      <param name="sqlLogin">The SQL Login</param>
      <param name="role">The Authorizer Role.</param>
    </member>
    <member name="T:Rock.Framework.Authorizer.GroupType">
      <summary>
            Type of Group for Store Groups and Application Groups
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.GroupType.Basic">
      <summary>
            Basic group
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.GroupType.LDapQuery">
      <summary>
            Dynamic Group (LDAP query)
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.HexEncoding">
      <summary>
            Summary description for HexEncoding.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.HexEncoding.GetByteCount(System.String)">
      <summary>
            Gets the byte count.
            </summary>
      <param name="hexString">The hex string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.HexEncoding.GetBytes(System.String,System.Int32@)">
      <summary>
            Creates a byte array from the hexadecimal string. Each two characters are combined
            to create one byte. First two hexadecimal characters become first byte in returned array.
            Non-hexadecimal characters are ignored. 
            </summary>
      <param name="hexString">string to convert to byte array</param>
      <param name="discarded">number of characters in string ignored</param>
      <returns>byte array, in the same left-to-right order as the hexString</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.HexEncoding.ToString(System.Byte[])">
      <summary>
            To the string.
            </summary>
      <param name="bytes">The bytes.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.HexEncoding.InHexFormat(System.String)">
      <summary>
            Determines if given string is in proper hexadecimal string format
            </summary>
      <param name="hexString">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.HexEncoding.IsHexDigit(System.Char)">
      <summary>
            Returns true is c is a hexadecimal digit (A-F, a-f, 0-9)
            </summary>
      <param name="c">Character to test</param>
      <returns>true if hex digit, false if not</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.HexEncoding.HexToByte(System.String)">
      <summary>
            Converts 1 or 2 character string into equivalant byte value
            </summary>
      <param name="hex">1 or 2 character string</param>
      <returns>byte</returns>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.IBizRule">
      <summary>
            Public Interface for All Authorizer Business Rules
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IBizRule.Execute(System.Collections.Hashtable,Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.Interfaces.IAuthorizationItem,Rock.Framework.Authorizer.AuthorizationType@)">
      <summary>
            Executes the specified Business Rule.
            </summary>
      <param name="contextParameters">The context parameters.</param>
      <param name="identity">The identity.</param>
      <param name="ownerItem">The owner itemName.</param>
      <param name="ForcedCheckAccessResult">The ForcedCheckAccessResult property sets a value that indicates whether the Business Rule (BizRule) forces CheckAccess result to some value.</param>
      <returns>True or False</returns>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.ISid">
      <summary>
            Represents a Security IDentifier (SID)
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ISid.Equals(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Equalses the specified sid.
            </summary>
      <param name="sid">The sid.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.ISid.BinaryValue">
      <summary>
            Gets the binary value.
            </summary>
      <value>The binary value.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.ISid.StringValue">
      <summary>
            Gets the string value.
            </summary>
      <value>The string value.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.ITransactable">
      <summary>
            Interfaces interface for all Authorizer Transactable objects
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ITransactable.BeginTransaction">
      <summary>
            Begins the transaction.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ITransactable.BeginTransaction(Rock.Framework.Authorizer.AuthorizerIsolationLevel)">
      <summary>
            Begins the transaction.
            </summary>
      <param name="isolationLevel">The isolation level.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ITransactable.CommitTransaction">
      <summary>
            Commits the transaction.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.ITransactable.RollBackTransaction">
      <summary>
            Rollback the transaction.
            </summary>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.ITransactable.TransactionInProgress">
      <summary>
            Gets a value indicating whether [transaction in progress].
            </summary>
      <value>
        <c>true</c> if [transaction in progress]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.IStorage">
      <summary>
            Interfaces interface for all Storage
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.GetDBUser(System.String)">
      <summary>
            Finds the DB user.
            </summary>
      <param name="userName">The custom sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.GetDBUsers">
      <summary>
            Gets the DB users.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.GetDBUser(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Finds the DB user.
            </summary>
      <param name="customSid">The custom sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.OpenConnection">
      <summary>
            Opens the connection.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.CloseConnection">
      <summary>
            Closes the connection.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.CreateStore(System.String,System.String)">
      <summary>
            Creates the specified store name.
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="storeDescription">The store description.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.GetStore(System.String)">
      <summary>
            Opens the specified store name.
            </summary>
      <param name="storeName">Name of the store.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.HasStores">
      <summary>
            Determines whether this instance has stores.
            </summary>
      <returns>
        <c>true</c> if this instance has stores; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.GetStores">
      <summary>
            Gets the stores.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.CheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR Windows Users ONLY].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="windowsIdentity">The windows identity.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.CheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR Windows Users ONLY].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="windowsIdentity">The windows identity.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.CheckAccess(System.String,System.String,System.String,Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR DB Users ONLY].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="dbUser">The db user.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.CheckAccess(System.String,System.String,System.String,Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR DB Users ONLY].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="dbUser">The db user.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.BeginCheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [FOR Windows Users ONLY].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.BeginCheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [FOR Windows Users ONLY].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.BeginCheckAccess(System.String,System.String,System.String,Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [FOR DB Users ONLY].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="dbUser">The db user.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.BeginCheckAccess(System.String,System.String,System.String,Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [FOR DB Users ONLY].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="dbUser">The db user.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.EndCheckAccess(System.IAsyncResult)">
      <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.EndCheckAccess(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
      <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <param name="attributes">The attributes readed.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.EndCheckAccessForDBUsers(System.IAsyncResult)">
      <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStorage.EndCheckAccessForDBUsers(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
      <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <param name="attributes">The attributes readed.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStorage.StorageTimeOut">
      <summary>
            Gets or sets the storage time out. This is useful for operation that take longer than the default timeout value.
            </summary>
      <value>The storage time out.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStorage.EventNotification">
      <summary>
            Gets the ENS (Event Notification System).
            </summary>
      <value>The ENS.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStorage.IAmAdmin">
      <summary>
            Gets a value indicating whether I am a Authorizer_Administrators member.
            </summary>
      <value>
        <c>true</c> if [I am admin]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStorage.Mode">
      <summary>
            Gets the mode.
            </summary>
      <value>The mode.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStorage.ConnectionString">
      <summary>
            Gets or sets the connection string.
            </summary>
      <value>The connection string.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStorage.DBUsers">
      <summary>
            Gets the DB users.
            </summary>
      <value>The DB users.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStorage.Stores">
      <summary>
            Gets the stores.
            </summary>
      <value>The stores.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStorage.Item(System.String)">
      <summary>
            Gets the <see cref="T:IStore" /> with the specified store name.
            </summary>
      <value>
      </value>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStorage.StoreCreated">
      <summary>
            Occurs after a Store object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStorage.StoreOpened">
      <summary>
            Occurs after a Store object has been Opened.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStorage.TransactionStarted">
      <summary>
            Occurs after a Storage Transaction has been initiated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStorage.TransactionTerminated">
      <summary>
            Occurs after a Storage Transaction has been terminated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStorage.AuthorizerModeChanged">
      <summary>
            Occurs after Authorizer Mode has been changed.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.IStore">
      <summary>
            Interfaces interface for all Stores
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.GetApplication(System.String)">
      <summary>
            Opens the application.
            </summary>
      <param name="applicationName">Name of the application.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.Update(System.String)">
      <summary>
            Updates store info with the specified store description and LDap path.
            </summary>
      <param name="storeDescription">The store description.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.Rename(System.String)">
      <summary>
            Renames the specified new store name.
            </summary>
      <param name="newStoreName">New name of the store.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.Delete">
      <summary>
            Deletes current Store.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.CreateApplication(System.String,System.String)">
      <summary>
            Creates the application.
            </summary>
      <param name="applicationName">Name of the application.</param>
      <param name="applicationDescription">The application description.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.GetApplications">
      <summary>
            Gets the applications.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.CreateStoreGroup(Rock.Framework.Authorizer.Interfaces.ISid,System.String,System.String,System.String,Rock.Framework.Authorizer.GroupType)">
      <summary>
            Creates the store group.
            </summary>
      <param name="sid">The object owner.</param>
      <param name="name">The name.</param>
      <param name="description">The description.</param>
      <param name="lDapQuery">The ldap query.</param>
      <param name="groupType">Type of the group.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.HasStoreGroups">
      <summary>
            Determines whether [has store groups].
            </summary>
      <returns>
        <c>true</c> if [has store groups]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.GetStoreGroups">
      <summary>
            Gets the store groups.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.GetStoreGroup(System.String)">
      <summary>
            Gets the store group.
            </summary>
      <param name="name">The name.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.GetStoreGroup(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the store group.
            </summary>
      <param name="sid">The object owner.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.GetDBUser(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Finds the DB user.
            </summary>
      <param name="customSid">The custom sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.GetDBUser(System.String)">
      <summary>
            Finds the DB user.
            </summary>
      <param name="userName">The custom sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.GetDBUsers">
      <summary>
            Gets the DB users.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.CreateAttribute(System.String,System.String)">
      <summary>
            Creates an attribute.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.GetAttributes">
      <summary>
            Gets the attributes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.GetAttribute(System.String)">
      <summary>
            Gets the attribute.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.CheckStoreAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the Store access [FOR Windows Users ONLY].
            </summary>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="validFor">The valid for.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>[true] for access allowd, [false] otherwise.</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStore.CheckStoreAccess(Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the Store access [FOR DB Users ONLY].
            </summary>
      <param name="dbUser">The db user.</param>
      <param name="validFor">The valid for.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>[true] for access allowd, [false] otherwise.</returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStore.StoreId">
      <summary>
            Gets the store id.
            </summary>
      <value>The store id.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStore.Name">
      <summary>
            Gets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStore.Description">
      <summary>
            Gets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStore.Applications">
      <summary>
            Gets the applications.
            </summary>
      <value>The applications.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStore.StoreGroups">
      <summary>
            Gets the store groups.
            </summary>
      <value>The store groups.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStore.Attributes">
      <summary>
            Gets the attributes.
            </summary>
      <value>The attributes.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStore.Storage">
      <summary>
            Gets the storage.
            </summary>
      <value>The storage.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStore.Item(System.String)">
      <summary>
            Gets the <see cref="T:IApplication" /> with the specified application name.
            </summary>
      <value>
      </value>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStore.StoreAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStore.StoreDeleted">
      <summary>
            Occurs after a Store object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStore.StoreUpdated">
      <summary>
            Occurs after a Store object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStore.StoreRenamed">
      <summary>
            Occurs after a Store object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStore.ApplicationCreated">
      <summary>
            Occurs after an Application object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStore.StoreGroupCreated">
      <summary>
            Occurs after a StoreGroup object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStore.ApplicationOpened">
      <summary>
            Occurs after an Application object has been Opened.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStore.StorePermissionGranted">
      <summary>
            Occurs after a SQL Login is Granted on the Store.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStore.StorePermissionRevoked">
      <summary>
            Occurs after a SQL Login is Revoked on the Store.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.IStoreGroup">
      <summary>
            Interfaces interface for all Store Groups.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroup.Update(Rock.Framework.Authorizer.Interfaces.ISid,System.String,Rock.Framework.Authorizer.GroupType)">
      <summary>
            Updates the specified object owner.
            </summary>
      <param name="sid">The object owner.</param>
      <param name="description">The description.</param>
      <param name="groupType">Type of the group.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroup.UpdateLDapQuery(System.String)">
      <summary>
            Updates the L dap query.
            </summary>
      <param name="newLdapQuery">The new ldap query.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroup.Rename(System.String)">
      <summary>
            Renames the specified new name.
            </summary>
      <param name="newName">The new name.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroup.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroup.CreateStoreGroupMember(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,System.Boolean)">
      <summary>
            Creates the store group member.
            </summary>
      <param name="sid">The object owner.</param>
      <param name="whereDefined">Where member is defined.</param>
      <param name="isMember">if set to <c>true</c> [is member].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroup.GetStoreGroupMembers">
      <summary>
            Gets the store group members.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroup.GetStoreGroupNonMembers">
      <summary>
            Gets the store group non members.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroup.GetStoreGroupAllMembers">
      <summary>
            Gets the store group all members.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroup.GetStoreGroupMember(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the store group member.
            </summary>
      <param name="sid">The object owner.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroup.IsInGroup(System.Security.Principal.WindowsIdentity)">
      <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
      <param name="windowsIdentity">The windows identity.</param>
      <returns>
        <c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroup.IsInGroup(Rock.Framework.Authorizer.Interfaces.IDbUser)">
      <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
      <param name="dbUser">The db user.</param>
      <returns>
        <c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroup.ExecuteLDAPQuery">
      <summary>
            Executes the LDAP query.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroup.ExecuteLDAPQuery(System.String)">
      <summary>
            Executes the LDAP query.
            </summary>
      <param name="testLDapQuery">The test LDap query.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStoreGroup.StoreGroupId">
      <summary>
            Gets the store group id.
            </summary>
      <value>The store group id.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStoreGroup.Store">
      <summary>
            Gets the store.
            </summary>
      <value>The store.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStoreGroup.SID">
      <summary>
            Gets the object owner.
            </summary>
      <value>The object owner.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStoreGroup.Name">
      <summary>
            Gets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStoreGroup.Description">
      <summary>
            Gets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStoreGroup.LDAPQuery">
      <summary>
            Gets the LDAP query.
            </summary>
      <value>The LDAP query.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStoreGroup.GroupType">
      <summary>
            Gets the type of the group.
            </summary>
      <value>The type of the group.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStoreGroup.Members">
      <summary>
            Gets the members.
            </summary>
      <value>The members.</value>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStoreGroup.StoreGroupDeleted">
      <summary>
            Occurs after a StoreGroup object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStoreGroup.StoreGroupLDAPQueryUpdated">
      <summary>
            Occurs after a StoreGroup LDAPQuery has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStoreGroup.StoreGroupUpdated">
      <summary>
            Occurs after a StoreGroup object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStoreGroup.StoreGroupRenamed">
      <summary>
            Occurs after a StoreGroup object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStoreGroup.StoreGroupMemberCreated">
      <summary>
            Occurs after an StoreGroupMember object has been Created.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.IStoreGroupMember">
      <summary>
            Interfaces interface for all Store Group Members.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroupMember.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Interfaces.IStoreGroupMember.GetMemberInfo(System.String@)">
      <summary>
            Gets the member info.
            </summary>
      <param name="displayName">Name of the display.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStoreGroupMember.StoreGroupMemberId">
      <summary>
            Gets the store group member id.
            </summary>
      <value>The store group member id.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStoreGroupMember.StoreGroup">
      <summary>
            Gets the store group.
            </summary>
      <value>The store group.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStoreGroupMember.SID">
      <summary>
            Gets the object owner.
            </summary>
      <value>The object owner.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStoreGroupMember.DefinitionSource">
      <summary>
            Gets where member is defined.
            </summary>
      <value>The where defined.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Interfaces.IStoreGroupMember.IsMember">
      <summary>
            Gets a value indicating whether this instance is member.
            </summary>
      <value>
        <c>true</c> if this instance is member; otherwise, <c>false</c>.</value>
    </member>
    <member name="E:Rock.Framework.Authorizer.Interfaces.IStoreGroupMember.StoreGroupMemberDeleted">
      <summary>
            Occurs after a StoreGroupMember object has been Deleted.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.ItemAttribute">
      <summary>
            Item Attribute
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.ItemAttribute.Update(System.String,System.String)">
      <summary>
            Updates the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ItemAttribute.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.ItemException">
      <summary>
            Store Exception class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.ItemException.#ctor(Rock.Framework.Authorizer.Interfaces.IAuthorizationItem,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:StoreException" /> class.
            </summary>
      <param name="item">The itemName.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ItemException.#ctor(Rock.Framework.Authorizer.Interfaces.IAuthorizationItem,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:StoreException" /> class.
            </summary>
      <param name="item">The itemName.</param>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ItemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.ItemException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:Rock.Framework.Authorizer.ItemException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.ItemException" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.ItemException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.ItemException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.ItemException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.ItemException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="P:Rock.Framework.Authorizer.ItemException.Item">
      <summary>
            Gets the name of the itemName.
            </summary>
      <value>The name of the store.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.Interfaces.ItemType">
      <summary>
            Is the Item Type categorization for Items. An itemName can be of one of these types.
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.Interfaces.ItemType.Role">
      <summary>
            A Role itemName can contain: Roles, Tasks, Operations.
            </summary>
      <remarks>Administrative purpose only. Do not use in the Applications.</remarks>
    </member>
    <member name="F:Rock.Framework.Authorizer.Interfaces.ItemType.Task">
      <summary>
            A Task itemName can contain: Tasks, Operations.
            </summary>
      <remarks>Administrative purpose only. Do not use in the Applications.</remarks>
    </member>
    <member name="F:Rock.Framework.Authorizer.Interfaces.ItemType.Operation">
      <summary>
            An Operation can contain: Operations.
            </summary>
      <remarks>Administrative and Developer purpose. Invoke Operations CheckAccess in the Applications.</remarks>
    </member>
    <member name="T:Rock.Framework.Authorizer.MemberType">
      <summary>
            Type of member
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.MemberType.StoreGroup">
      <summary>
            StoreGroup type
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.MemberType.ApplicationGroup">
      <summary>
            ApplicationGroup type
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.MemberType.WindowsNTGroup">
      <summary>
            WindowsNTGroup type
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.MemberType.WindowsNTUser">
      <summary>
            WindowsNTUser type
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.MemberType.AnonymousSID">
      <summary>
            AnonymousSID type
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.MemberType.DatabaseUser">
      <summary>
            DatabaseUser type
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.MergeOptions">
      <summary>
            Merge Options (Import)
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.MergeOptions.NoMerge">
      <summary>
            No merge
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.MergeOptions.CreatesNewItems">
      <summary>
            Create New Items
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.MergeOptions.OverwritesExistingItems">
      <summary>
            Overwrites Existing Items
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.MergeOptions.DeleteMissingItems">
      <summary>
            Delete Missing Items 
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.MergeOptions.CreatesNewItemAuthorizations">
      <summary>
            Creates New Item Authorizations  
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.MergeOptions.OverwritesExistingItemAuthorization">
      <summary>
            Overwrites Existing Item Authorization
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.MergeOptions.DeleteMissingItemAuthorizations">
      <summary>
            Delete Missing Item Authorizations
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.MergeUtilities">
      <summary>
            Merge Utilities
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.MergeUtilities.IsOn(Rock.Framework.Authorizer.MergeOptions,Rock.Framework.Authorizer.MergeOptions)">
      <summary>
            Determines whether the specified merge options is on.
            </summary>
      <param name="mergeOptions">The merge options.</param>
      <param name="option">The option.</param>
      <returns>
        <c>true</c> if the specified merge options is on; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Rock.Framework.Authorizer.RestrictedAuthorizationType">
      <summary>
            Restricted Authorization Type
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.RestrictedAuthorizationType.Allow">
      <summary>
            Allow.
            </summary>
    </member>
    <member name="F:Rock.Framework.Authorizer.RestrictedAuthorizationType.Deny">
      <summary>
            Deny.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.Sid">
      <summary>
            Represent a Security IDentifier (SID)
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SID" /> class.
            </summary>
      <param name="sddlForm">The SDDL (Security Descriptor Definition Language).</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:SID" /> class.
            </summary>
      <param name="sddlForm">The SDDL form.</param>
      <param name="customSid">if set to <c>true</c> [custom sid].</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.#ctor(System.Security.Principal.SecurityIdentifier)">
      <summary>
            Initializes a new instance of the <see cref="T:SID" /> class.
            </summary>
      <param name="sid">The sid.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:SID" /> class.
            </summary>
      <param name="binaryForm">The binary form.</param>
      <remarks>Valid only for SecurityIdentifier(s) and Guid(s)</remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.#ctor(System.Byte[],System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:SID" /> class.
            </summary>
      <param name="binaryForm">The binary form.</param>
      <param name="customSid">if set to <c>true</c> [custom sid].</param>
      <remarks>Valid only for custom Sid (DB Users)</remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.NewSid">
      <summary>
            News Sid.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.op_Equality(Rock.Framework.Authorizer.Sid,System.Byte[])">
      <summary>
            Operator == for SID.
            </summary>
      <param name="sid">The sid.</param>
      <param name="binaryForm">The binary form.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.op_Inequality(Rock.Framework.Authorizer.Sid,System.Byte[])">
      <summary>
            Operator != for SID.
            </summary>
      <param name="sid">The owner.</param>
      <param name="binaryForm">The binary form.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.op_Implicit(System.Security.Principal.WindowsIdentity)~Rock.Framework.Authorizer.Sid">
      <summary>
            Implicit operators the specified windows identity.
            </summary>
      <param name="windowsIdentity">The windows identity.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
      <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
      <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.Equals(System.Security.Principal.SecurityIdentifier)">
      <summary>
            Equalses the specified sid.
            </summary>
      <param name="sid">The sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.Equals(System.Guid)">
      <summary>
            Equalses the specified GUID.
            </summary>
      <param name="guid">The GUID.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.Equals(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Equalses the specified sid.
            </summary>
      <param name="sid">The sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.GetBytesFromInt32(System.Int32)">
      <summary>
            Gets the bytes from int32.
            </summary>
      <param name="n">The n.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.GetInt32">
      <summary>
            Gets the int32 from binary value.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.Int32ToSid(System.Int32)">
      <summary>
            SIDs to int32.
            </summary>
      <param name="n">The n.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.Sid" /> class.
            </summary>
      <param name="info">The info.</param>
      <param name="context">The context.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Sid.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:Rock.Framework.Authorizer.Sid.BinaryValue">
      <summary>
            Gets the binary value.
            </summary>
      <value>The binary value.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Sid.StringValue">
      <summary>
            Gets the string value.
            </summary>
      <value>The string value.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.Storage">
      <summary>
            Authorizer Storage Class.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.Storage.AsyncCheckAccess">
      <summary>
            Delegate for Async Check Access [FOR Windows Users ONLY].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="windowsIdentity">The windows identity.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="attributes">The Attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="T:Rock.Framework.Authorizer.Storage.AsyncCheckAccessForDBUsers">
      <summary>
            Delegate for Async Check Access [FOR DB Users ONLY].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="dbUser">The db user.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="attributes">The Attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.Storage" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Store" /> class.
            </summary>
      <param name="connectionString">The connection string.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.OpenConnection">
      <summary>
            Opens the connection.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.CloseConnection">
      <summary>
            Closes the connection.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.VerifyStorageDB(System.String)">
      <summary>
            Verifies if the database is a valid Authorizer Storage DB.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.GetStore(System.String)">
      <summary>
            Opens the specified store name.
            </summary>
      <param name="storeName">Name of the store.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.HasStores">
      <summary>
            Determines whether this instance has stores.
            </summary>
      <returns>
        <c>true</c> if this instance has stores; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.GetStores">
      <summary>
            Gets the stores.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.CreateStore(System.String,System.String)">
      <summary>
            Creates the specified store name.
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="storeDescription">The store description.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.CheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR Windows Users only].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="windowsIdentity">The windows identity.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.CheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR Windows Users only].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="windowsIdentity">The windows identity.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.CheckAccess(System.String,System.String,System.String,Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR DB Users only].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="dbUser">The db user.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.CheckAccess(System.String,System.String,System.String,Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access [FOR DB Users only].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="dbUser">The db user.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.BeginCheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [ONLY FOR Windows Users].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.BeginCheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [ONLY FOR Windows Users].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.BeginCheckAccess(System.String,System.String,System.String,Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [ONLY FOR DB Users].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="dbUser">The db user.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.BeginCheckAccess(System.String,System.String,System.String,Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the access in async way [ONLY FOR DB Users].
            </summary>
      <param name="StoreName">Name of the store.</param>
      <param name="ApplicationName">Name of the application.</param>
      <param name="ItemName">Name of the itemName.</param>
      <param name="dbUser">The db user.</param>
      <param name="ValidFor">The valid for.</param>
      <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
      <param name="callBack">The call back.</param>
      <param name="stateObject">The state object.</param>
      <param name="attributes">The attributes readed.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>AuthorizationType</returns>
      <remarks>
        <para>Remeber to: </para>
        <para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
        <para>2) Storage Connection must be manually opened and closed.</para>
      </remarks>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.EndCheckAccess(System.IAsyncResult)">
      <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.EndCheckAccess(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
      <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <param name="attributes">The attributes readed.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.EndCheckAccessForDBUsers(System.IAsyncResult)">
      <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.EndCheckAccessForDBUsers(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
      <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
      <param name="asyncResult">The async authorizationType.</param>
      <param name="attributes">The attributes readed.</param>
      <returns>AuthorizationType</returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.BeginTransaction">
      <summary>
            Begins the transaction.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.BeginTransaction(Rock.Framework.Authorizer.AuthorizerIsolationLevel)">
      <summary>
            Begins the transaction.
            </summary>
      <param name="isolationLevel">The isolation level.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.CommitTransaction">
      <summary>
            Commits the transaction.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.RollBackTransaction">
      <summary>
            Rollback the transaction.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
      <summary>
            Exports the specified XML writer.
            </summary>
      <param name="xmlWriter">The XML writer.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="ownerOfExport">The owner of export.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,Rock.Framework.Authorizer.MergeOptions)">
      <summary>
            Imports the specified XML reader.
            </summary>
      <param name="xmlNode">The XML node.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="mergeOptions">The merge options.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.GetDBUser(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Finds the DB user.
            </summary>
      <param name="customSid">The custom sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.GetDBUser(System.String)">
      <summary>
            Finds the DB user.
            </summary>
      <param name="userName">The custom sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.GetDBUsers">
      <summary>
            Gets the DB users.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Storage.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Storage.RootDSEPath">
      <summary>
            Gets or sets the root dse path.
            </summary>
      <value>The root DSE path.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Storage.StorageTimeOut">
      <summary>
            Gets or sets the storage time out.
            </summary>
      <value>The storage time out.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Storage.DBUsers">
      <summary>
            Gets the DB users.
            </summary>
      <value>The DB users.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Storage.Stores">
      <summary>
            Gets the stores.
            </summary>
      <value>The stores.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Storage.ConnectionString">
      <summary>
            Gets or sets the connection string.
            </summary>
      <value>The connection string.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Storage.Item(System.String)">
      <summary>
            Gets the <see cref="T:IStore" /> with the specified store name.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Storage.IAmAdmin">
      <summary>
            Gets a value indicating whether I am a Authorizer_Administrators member.
            </summary>
      <value>
        <c>true</c> if [I am admin]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Storage.TransactionInProgress">
      <summary>
            Gets a value indicating whether [transaction in progress].
            </summary>
      <value>
        <c>true</c> if [transaction in progress]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Storage.Mode">
      <summary>
            Gets the mode.
            </summary>
      <value>The mode.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Storage.EventNotification">
      <summary>
            Gets the ENS (Event Notification System).
            </summary>
      <value>The ENS.</value>
    </member>
    <member name="E:Rock.Framework.Authorizer.Storage.StoreCreated">
      <summary>
            Occurs after a Store object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Storage.StoreOpened">
      <summary>
            Occurs after a Store object has been Opened.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Storage.TransactionStarted">
      <summary>
            Occurs after a Storage Transaction has benn initiated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Storage.TransactionTerminated">
      <summary>
            Occurs after a Storage Transaction has benn terminated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Storage.AuthorizerModeChanged">
      <summary>
            Occurs after Authorizer Mode has been changed.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.StorageException">
      <summary>
            Storage Exception class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.StorageException.#ctor(Rock.Framework.Authorizer.Interfaces.IStorage,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:StorageException" /> class.
            </summary>
      <param name="storage">The storage.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StorageException.#ctor(Rock.Framework.Authorizer.Interfaces.IStorage,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:StorageException" /> class.
            </summary>
      <param name="storage">The storage.</param>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StorageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StorageException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:Rock.Framework.Authorizer.StorageException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StorageException" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.StorageException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StorageException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StorageException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StorageException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="P:Rock.Framework.Authorizer.StorageException.Storage">
      <summary>
            Gets the name of the storage.
            </summary>
      <value>The name of the storage.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.Store">
      <summary>
            Represents an Store stored on SqlServer.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.Update(System.String)">
      <summary>
            Updates store info with the specified store description and LDap path.
            </summary>
      <param name="storeDescription">The store description.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.Rename(System.String)">
      <summary>
            Renames the specified new store name.
            </summary>
      <param name="newStoreName">New name of the store.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.Delete">
      <summary>
            Deletes current Store.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.CreateApplication(System.String,System.String)">
      <summary>
            Creates the specified application name.
            </summary>
      <param name="applicationName">Name of the application.</param>
      <param name="applicationDescription">The application description.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.GetApplication(System.String)">
      <summary>
            Opens the application.
            </summary>
      <param name="applicationName">Name of the application.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.GetApplications">
      <summary>
            Gets the applications.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.CreateStoreGroup(Rock.Framework.Authorizer.Interfaces.ISid,System.String,System.String,System.String,Rock.Framework.Authorizer.GroupType)">
      <summary>
            Creates the store group.
            </summary>
      <param name="sid">The object owner.</param>
      <param name="name">The name.</param>
      <param name="description">The description.</param>
      <param name="lDapQuery">The ldap query.</param>
      <param name="groupType">Type of the group.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.HasStoreGroups">
      <summary>
            Determines whether [has store groups].
            </summary>
      <returns>
        <c>true</c> if [has store groups]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.GetStoreGroups">
      <summary>
            Gets the store groups.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.GetStoreGroup(System.String)">
      <summary>
            Gets the store group.
            </summary>
      <param name="name">The name.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.GetStoreGroup(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the store group.
            </summary>
      <param name="sid">The object owner.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.GetAttributes">
      <summary>
            Gets the store attributes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.GetAttribute(System.String)">
      <summary>
            Gets the store attribute.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.CreateAttribute(System.String,System.String)">
      <summary>
            Creates a store attribute.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.CheckStoreAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the Store access. [FOR Windows Users ONLY].
            </summary>
      <param name="windowsIdentity">The windows identity.</param>
      <param name="validFor">The valid for.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.CheckStoreAccess(Rock.Framework.Authorizer.Interfaces.IDbUser,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks the Store access [FOR DB Users ONLY].
            </summary>
      <param name="dbUser">The db user.</param>
      <param name="validFor">The valid for.</param>
      <param name="contextParameters">The context parameters.</param>
      <returns>
            [true] for access allowd, [false] otherwise.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
      <summary>
            Exports the specified XML writer.
            </summary>
      <param name="xmlWriter">The XML writer.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="ownerOfExport">The owner of export.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,Rock.Framework.Authorizer.MergeOptions)">
      <summary>
            Imports the specified XML reader.
            </summary>
      <param name="xmlNode">The XML node.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="mergeOptions">The merge options.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.GetDBUser(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Finds the DB user.
            </summary>
      <param name="customSid">The custom sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.GetDBUser(System.String)">
      <summary>
            Finds the DB user.
            </summary>
      <param name="userName">The custom sid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.Store.GetDBUsers">
      <summary>
            Gets the DB users.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.Store.StoreGroups">
      <summary>
            Gets the store groups.
            </summary>
      <value>The store groups.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Store.Attributes">
      <summary>
            Gets the attributes.
            </summary>
      <value>The attributes.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Store.Applications">
      <summary>
            Gets the applications.
            </summary>
      <value>The applications.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Store.Storage">
      <summary>
            Gets the storage.
            </summary>
      <value>The storage.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Store.Name">
      <summary>
            Gets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Store.Description">
      <summary>
            Gets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.Store.Item(System.String)">
      <summary>
            Gets the <see cref="T:IApplication" /> with the specified application name.
            </summary>
      <value>
      </value>
    </member>
    <member name="E:Rock.Framework.Authorizer.Store.StoreDeleted">
      <summary>
            Occurs after a Store object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Store.StoreUpdated">
      <summary>
            Occurs after a Store object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Store.StoreRenamed">
      <summary>
            Occurs after a Store object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Store.ApplicationCreated">
      <summary>
            Occurs after an Application object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Store.StoreGroupCreated">
      <summary>
            Occurs after a StoreGroup object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Store.ApplicationOpened">
      <summary>
            Occurs after an Application object has been Opened.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Store.StoreAttributeCreated">
      <summary>
            Occurs after an Attribute object has been Created.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Store.StorePermissionGranted">
      <summary>
            Occurs after a SQL Login is Granted on the Store.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.Store.StorePermissionRevoked">
      <summary>
            Occurs after a SQL Login is Revoked on the Store.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.StoreAttribute">
      <summary>
            Store Attribute
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreAttribute.Update(System.String,System.String)">
      <summary>
            Updates the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreAttribute.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.StoreException">
      <summary>
            Store Exception class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreException.#ctor(Rock.Framework.Authorizer.Interfaces.IStore,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:StoreException" /> class.
            </summary>
      <param name="store">The store.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreException.#ctor(Rock.Framework.Authorizer.Interfaces.IStore,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:StoreException" /> class.
            </summary>
      <param name="store">The store.</param>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StoreException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StoreException" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StoreException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StoreException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreException.Store">
      <summary>
            Gets the name of the store.
            </summary>
      <value>The name of the store.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.StoreGroup">
      <summary>
            Store Group class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.Update(Rock.Framework.Authorizer.Interfaces.ISid,System.String,Rock.Framework.Authorizer.GroupType)">
      <summary>
            Updates the specified object owner.
            </summary>
      <param name="sid">The object owner.</param>
      <param name="description">The description.</param>
      <param name="groupType">Type of the group.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.UpdateLDapQuery(System.String)">
      <summary>
            Updates the L dap query.
            </summary>
      <param name="newLdapQuery">The new ldap query.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.Rename(System.String)">
      <summary>
            Renames the specified new name.
            </summary>
      <param name="newName">The new name.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.CreateStoreGroupMember(Rock.Framework.Authorizer.Interfaces.ISid,Rock.Framework.Authorizer.DefinitionSource,System.Boolean)">
      <summary>
            Creates the store group member.
            </summary>
      <param name="sid">The object owner.</param>
      <param name="whereDefined">Where member is defined.</param>
      <param name="isMember">if set to <c>true</c> [is member].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.GetStoreGroupAllMembers">
      <summary>
            Gets the store group members.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.GetStoreGroupMembers">
      <summary>
            Gets the store group members.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.GetStoreGroupMember(Rock.Framework.Authorizer.Interfaces.ISid)">
      <summary>
            Gets the store group member.
            </summary>
      <param name="sid">The object owner.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.GetStoreGroupNonMembers">
      <summary>
            Gets the store group non members.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.IsInGroup(System.Security.Principal.WindowsIdentity)">
      <summary>
            Determines whether the specified windows identity is in group.
            </summary>
      <param name="windowsIdentity">The windows identity.</param>
      <returns>
        <c>true</c> if the specified windows identity is in group; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.IsInGroup(Rock.Framework.Authorizer.Interfaces.IDbUser)">
      <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
      <param name="dbUser">The db user.</param>
      <returns>
        <c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.isAMemberOfGroup(System.Boolean,System.Byte[],System.Boolean,System.String,System.Byte[],System.Int32)">
      <summary>
            Determines whether [is A member of group] [the specified group type].
            </summary>
      <param name="groupType">if set to <c>true</c> [group type].</param>
      <param name="GroupSid">The group sid.</param>
      <param name="authorizermodeMode">if set to <c>true</c> [authorizermode mode].</param>
      <param name="rootDsePath">The root dse path.</param>
      <param name="token">The token.</param>
      <param name="userGroupsCount">The user groups count.</param>
      <returns>
        <c>true</c> if [is A member of group] [the specified group type]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
      <summary>
            Exports the specified XML writer.
            </summary>
      <param name="xmlWriter">The XML writer.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="ownerOfExport">The owner of export.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,Rock.Framework.Authorizer.MergeOptions)">
      <summary>
            Imports the specified XML reader.
            </summary>
      <param name="xmlNode">The XML node.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="mergeOptions">The merge options.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.ExecuteLDAPQuery">
      <summary>
            Executes the LDAP query.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.ExecuteLDAPQuery(System.String)">
      <summary>
            Executes the LDAP query.
            </summary>
      <param name="testLDapQuery">The test L dap query.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroup.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroup.Members">
      <summary>
            Gets the members.
            </summary>
      <value>The members.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroup.StoreGroupId">
      <summary>
            Gets the store group id.
            </summary>
      <value>The store group id.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroup.Store">
      <summary>
            Gets the store.
            </summary>
      <value>The store.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroup.SID">
      <summary>
            Gets the object owner.
            </summary>
      <value>The object owner.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroup.Name">
      <summary>
            Gets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroup.Description">
      <summary>
            Gets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroup.LDAPQuery">
      <summary>
            Gets the LDAP query.
            </summary>
      <value>The LDAP query.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroup.GroupType">
      <summary>
            Gets the type of the group.
            </summary>
      <value>The type of the group.</value>
    </member>
    <member name="E:Rock.Framework.Authorizer.StoreGroup.StoreGroupDeleted">
      <summary>
            Occurs after a StoreGroup object has been Deleted.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.StoreGroup.StoreGroupLDAPQueryUpdated">
      <summary>
            Occurs after a StoreGroup LDAPQuery has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.StoreGroup.StoreGroupUpdated">
      <summary>
            Occurs after a StoreGroup object has been Updated.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.StoreGroup.StoreGroupRenamed">
      <summary>
            Occurs after a StoreGroup object has been Renamed.
            </summary>
    </member>
    <member name="E:Rock.Framework.Authorizer.StoreGroup.StoreGroupMemberCreated">
      <summary>
            Occurs after an StoreGroupMember object has been Created.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.StoreGroupException">
      <summary>
            Store Group Exception class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupException.#ctor(Rock.Framework.Authorizer.Interfaces.IStoreGroup,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:StoreGroupException" /> class.
            </summary>
      <param name="storeGroup">The store group.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupException.#ctor(Rock.Framework.Authorizer.Interfaces.IStoreGroup,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:StoreGroupException" /> class.
            </summary>
      <param name="storeGroup">The store group.</param>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StoreGroupException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StoreGroupException" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StoreGroupException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StoreGroupException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroupException.StoreGroup">
      <summary>
            Gets the store.
            </summary>
      <value>The store.</value>
    </member>
    <member name="T:Rock.Framework.Authorizer.StoreGroupMember">
      <summary>
            Store Group Member class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupMember.GetMemberInfo(System.String@)">
      <summary>
            Gets the member info.
            </summary>
      <param name="displayName">Name of the display.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupMember.Delete">
      <summary>
            Deletes this instance.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupMember.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
      <summary>
            Exports the specified XML writer.
            </summary>
      <param name="xmlWriter">The XML writer.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <param name="ownerOfExport">The owner of export.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupMember.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean)">
      <summary>
            Imports the specified XML reader.
            </summary>
      <param name="xmlNode">The XML node.</param>
      <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
      <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupMember.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroupMember.StoreGroupMemberId">
      <summary>
            Gets the store group member id.
            </summary>
      <value>The store group member id.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroupMember.StoreGroup">
      <summary>
            Gets the store group.
            </summary>
      <value>The store group.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroupMember.SID">
      <summary>
            Gets the object owner.
            </summary>
      <value>The object owner.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroupMember.DefinitionSource">
      <summary>
            Gets where member is defined.
            </summary>
      <value>The where defined.</value>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroupMember.IsMember">
      <summary>
            Gets a value indicating whether this instance is member.
            </summary>
      <value>
        <c>true</c> if this instance is member; otherwise, <c>false</c>.</value>
    </member>
    <member name="E:Rock.Framework.Authorizer.StoreGroupMember.StoreGroupMemberDeleted">
      <summary>
            Occurs after a SqlStoreGroupMember object has been Deleted.
            </summary>
    </member>
    <member name="T:Rock.Framework.Authorizer.StoreGroupMemberException">
      <summary>
            Store Group Member Exception class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupMemberException.#ctor(Rock.Framework.Authorizer.Interfaces.IStoreGroupMember,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:StoreGroupException" /> class.
            </summary>
      <param name="storeGroupMember">The store group member.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupMemberException.#ctor(Rock.Framework.Authorizer.Interfaces.IStoreGroupMember,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:StoreGroupException" /> class.
            </summary>
      <param name="storeGroupMember">The store group member.</param>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StoreGroupMemberException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupMemberException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StoreGroupMemberException" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupMemberException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StoreGroupMemberException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Rock.Framework.Authorizer.StoreGroupMemberException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Authorizer.StoreGroupMemberException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="ex">The ex.</param>
    </member>
    <member name="P:Rock.Framework.Authorizer.StoreGroupMemberException.StoreGroupMember">
      <summary>
            Gets the store.
            </summary>
      <value>The store.</value>
    </member>
    <member name="T:Rock.Framework.Web.Net.Detectors">
      <summary>
            Various helper methods for Web
            </summary>
    </member>
    <member name="M:Rock.Framework.Web.Net.Detectors.GetFirstRespondingWebServer(System.String[])">
      <summary>
             Returns the first server that is reachable.
            </summary>
      <param name="servers">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Web.Net.Detectors.GetFirstRespondingWebServer(System.Int32,System.String[])">
      <summary>
            Returns the first server that is reachable.
            </summary>
      <param name="timeoutSeconds">timeout</param>
      <param name="servers">web addresses to check</param>
      <returns>
      </returns>
      <exception cref="T:System.Net.WebException">
      </exception>
    </member>
    <member name="M:Rock.Framework.Web.Net.Detectors.WebServerDetector(System.String,System.Int32)">
      <summary>
            Verifies whether a server is reachable
            </summary>
      <param name="webAddress">web server address to detect</param>
      <param name="timeoutSeconds">timeout in seconds</param>
      <returns>
      </returns>
    </member>
    <member name="T:Rock.Framework.Web.Net.HttpWrapper">
      <summary>
		Helper class for HttpWebResponse and HttpWebRequest that allows posting
		and retrieving of data from a web server.  It supports asynchronous calls,
		several authentication types and also retries.
	</summary>
      <remarks>
        <para>
          <h2>About HttpWrapper</h2>
			The HttpWrapper simplifies posting data to a web server and wraps the functionality required
			for these types of requests.

			<h3>Features</h3>
			The following features are supported by the HttpWrapper.
			<h4>Asynchronous calls</h4>
			There are two ways to invoke a web request, synchronously and asynchronously.  For applications that
			need immediate feedback synchronous processing is typically used, and is the default.  For other
			applications (such as Smart Clients, Windows Services, etc) it is better to utilize asynchronous calls
			as to not block the application.

			<h4>Authentication</h4>
			HttpWrapper supports the abilility for basic authentication using a username/password as well as integrated authentcation for Windows.  See <see cref="T:Rock.Framework.Web.Net.HttpWrapper.RequestAuthenticationType" />.

			<h4>Retry Submissions</h4>
			HttpWrapper supports the ability to retry failed requests.  It works by first initiating a request
			to the specified server. If the request fails or times out, it will wait a specified amount of time
			and then retry the submission again until the limit of retries has been reached.
		</para>
      </remarks>
      <example>
        <para>
          <h3>Posting XML To A Service</h3>
        </para>
        <code><![CDATA[
				 HttpWrapper target = new HttpWrapper("http://WebServiceAddress");
				 string dataToPost = @"<?xml version=""1.0""?><AddressValidationService><Vendor>avsdatabase</Vendor><RequestSource>CoreTeam</RequestSource><RequestType>11</RequestType><RequestToken>AVSbeta</RequestToken><ZipLookup><City>Detroit</City><State>MI</State></ZipLookup></AddressValidationService>";
				 target.AuthenticationType = HttpWrapper.RequestAuthenticationType.Basic;
				 target.UserName = "UserName";
				 target.Password = "Password";
				 string response = target.Post(dataToPost);
				]]></code>
        <para>
          <h3>Making an Asynchronous Web Request</h3>
			This example makes an asynchronous get to a URL.  It uses an anonymous delegate just as a
			sample to shorten the example.  A standard event can be created.
		</para>
        <code><![CDATA[ 
						HttpWrapper target = new HttpWrapper("http://avsbeta/avs/AVSWebService?vendor=&client=Web&token=AVSbeta&zip=48152&operation.invoke=lookupCounty");
			            target.ResponseReceived += ((sender, e) =>
                                            {
                                                Assert.IsNull(e.Exception);
                                                Assert.IsTrue(e.ResponseData.Contains(@"xsi:type=""xsd:string""&gt;48152&lt;/zip5&gt;"));
                                            });
			            target.GetAsync();
					 ]]></code>
        <para>
          <h3>Retrying Submissions</h3>
			The following will retry 3 times and wait 1 second in between calls.
		</para>
        <code><![CDATA[
					HttpWrapper target = new HttpWrapper("http://localhost/default.aspx");
					target.AuthenticationType = HttpWrapper.RequestAuthenticationType.AutoLogOn;
					target.Timeout = 3000; //milliseconds
					target.Retries = 3;  // retry 3 times to submit the request (total of 4)
					target.RetrySleep = 1000; //milliseconds to wait between retries
					string data = @"<?xml version=""1.0""?><AddressValidationService><Vendor>avsdatabase</Vendor><RequestSource>CoreTeam</RequestSource><RequestType>11</RequestType><RequestToken>AVSbeta</RequestToken><ZipLookup><City>Detroit</City><State>MI</State></ZipLookup></AddressValidationService>";
					string actual;
					actual = target.Post(data);				
				]]></code>
      </example>
    </member>
    <member name="T:Rock.Framework.Web.Net.HttpWrapper.RequestAuthenticationType">
      <summary>
            Authentication Types
            </summary>
    </member>
    <member name="T:Rock.Framework.Web.Net.HttpWrapper.RequestContentType">
      <summary>
            Content types
            </summary>
    </member>
    <member name="M:Rock.Framework.Web.Net.HttpWrapper.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Web.Net.HttpWrapper" /> class using the default timeout setting
            and no authentication
            </summary>
      <param name="postUrl">The post URL.</param>
    </member>
    <member name="M:Rock.Framework.Web.Net.HttpWrapper.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Web.Net.HttpWrapper" /> class with no authentication.
            </summary>
      <param name="postUrl">The post URL.</param>
      <param name="postTimeout">The connection timeout is seconds (between 0 and 300).</param>
    </member>
    <member name="M:Rock.Framework.Web.Net.HttpWrapper.#ctor(System.String,System.Int32,Rock.Framework.Web.Net.HttpWrapper.RequestAuthenticationType)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Web.Net.HttpWrapper" /> class.
            </summary>
      <param name="postUrl">The post URL.</param>
      <param name="postTimeout">The connection timeout in seconds (between 0 and 300).</param>
      <param name="authenticationType">Type of the authentication.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="postTimeout" /> should be between 0 and 300</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="authenticationType" /> is out of range</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="postUrl" /> is null</exception>
    </member>
    <member name="M:Rock.Framework.Web.Net.HttpWrapper.#ctor(System.String,System.Int32,Rock.Framework.Web.Net.HttpWrapper.RequestAuthenticationType,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Web.Net.HttpWrapper" /> class.
            </summary>
      <param name="postUrl">The post URL.</param>
      <param name="postTimeout">The connection timeout is secconds (between 0 and 300).</param>
      <param name="authenticationType">Type of the authentication.</param>
      <param name="retries">The number of time the application will try before it throws an exception.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="postTimeout" /> should be between 0 and 300</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="authenticationType" /> is out of range</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="postUrl" /> is null</exception>
    </member>
    <member name="M:Rock.Framework.Web.Net.HttpWrapper.Post(System.String)">
      <summary>
            Posts the specified data.
            </summary>
      <param name="data">The string to be posted.</param>
      <returns>The response string</returns>
      <exception cref="T:System.NotSupportedException">The request cache validator indicated that the response for this request can be served from the cache; however, this request includes data to be sent to the server. Requests that send data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented. </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort">
        </see> was previously called.-or- The time-out period for the request expired.-or- An error occurred while processing the request. </exception>
      <exception cref="T:System.InvalidOperationException">The stream is already in use by a previous call to <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see>.-or- <see cref="P:System.Net.HttpWebRequest.TransferEncoding"></see> is set to a value and <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false. </exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method">
        </see> is GET or HEAD, and either <see cref="P:System.Net.HttpWebRequest.ContentLength"></see> is greater or equal to zero or <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is true.-or- <see cref="P:System.Net.HttpWebRequest.KeepAlive"></see> is true, <see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering"></see> is false, <see cref="P:System.Net.HttpWebRequest.ContentLength"></see> is -1, <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false, and <see cref="P:System.Net.HttpWebRequest.Method"></see> is POST or PUT. </exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="M:Rock.Framework.Web.Net.HttpWrapper.GenerateNewRequestObject">
      <summary>
            Create a new httpwebrequest using values from the existing one
            </summary>
      <returns>HttpWebRequest populated with values from old one</returns>
    </member>
    <member name="M:Rock.Framework.Web.Net.HttpWrapper.Get">
      <summary>
            Retrieve data using GET method.
            </summary>
      <returns>The response string</returns>
      <exception cref="T:System.NotSupportedException">The request cache validator indicated that the response for this request can be served from the cache; however, this request includes data to be sent to the server. Requests that send data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented. </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort">
        </see> was previously called.-or- The time-out period for the request expired.-or- An error occurred while processing the request. </exception>
      <exception cref="T:System.InvalidOperationException">The stream is already in use by a previous call to <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see>.-or- <see cref="P:System.Net.HttpWebRequest.TransferEncoding"></see> is set to a value and <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false. </exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method">
        </see> is GET or HEAD, and either <see cref="P:System.Net.HttpWebRequest.ContentLength"></see> is greater or equal to zero or <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is true.-or- <see cref="P:System.Net.HttpWebRequest.KeepAlive"></see> is true, <see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering"></see> is false, <see cref="P:System.Net.HttpWebRequest.ContentLength"></see> is -1, <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false, and <see cref="P:System.Net.HttpWebRequest.Method"></see> is POST or PUT. </exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="M:Rock.Framework.Web.Net.HttpWrapper.OnPostCompleted(Rock.Framework.Web.Net.ReceivedEventArgs)">
      <summary>
            Raises the <see cref="E:Rock.Framework.Web.Net.HttpWrapper.ResponseReceived" /> event.
            </summary>
      <param name="e">The <see cref="T:Rock.Framework.Web.Net.ReceivedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Rock.Framework.Web.Net.HttpWrapper.PostAsync(System.String)">
      <summary>
            Asynchronously posts and retrieve data from the web server.
            </summary>
      <param name="data">The data.</param>
    </member>
    <member name="M:Rock.Framework.Web.Net.HttpWrapper.PostAsync(System.String,System.ComponentModel.RunWorkerCompletedEventHandler)">
      <summary>
            Asynchronously posts and retrieve data from the web server.
            </summary>
      <param name="data">The data.</param>
      <param name="postCompletedCallback">The post completed callback.</param>
    </member>
    <member name="M:Rock.Framework.Web.Net.HttpWrapper.GetAsync">
      <summary>
            Asynchronously retrieve data from the web server.
            </summary>
    </member>
    <member name="P:Rock.Framework.Web.Net.HttpWrapper.Retries">
      <summary>
            Gets or sets the number of times a request will be retried.  
            </summary>
      <value>The retries.</value>
    </member>
    <member name="P:Rock.Framework.Web.Net.HttpWrapper.RetrySleep">
      <summary>
            Gets or sets how long the retry value is in case it has to retry the request.  Default is 300 milliseconds. 
            </summary>
      <value>The retry sleep.</value>
    </member>
    <member name="P:Rock.Framework.Web.Net.HttpWrapper.Url">
      <summary>
            Gets or sets the URL.
            </summary>
      <value>The URL.</value>
    </member>
    <member name="P:Rock.Framework.Web.Net.HttpWrapper.UserName">
      <summary>
            User name for authentication.
            </summary>
    </member>
    <member name="P:Rock.Framework.Web.Net.HttpWrapper.Password">
      <summary>
            Password for authentication.
            </summary>
    </member>
    <member name="P:Rock.Framework.Web.Net.HttpWrapper.ContentType">
      <summary>
            Gets or sets the type of the content.
            </summary>
      <value>The type of the content.</value>
    </member>
    <member name="P:Rock.Framework.Web.Net.HttpWrapper.Timeout">
      <summary>
            Timeout for the Web request in milliseconds. Times out on connection, read and send operations.
            Default is 30 seconds.
            </summary>
    </member>
    <member name="P:Rock.Framework.Web.Net.HttpWrapper.AuthenticationType">
      <summary>
            Gets or sets the type of the authentication.
            </summary>
      <value>The type of the authentication.</value>
    </member>
    <member name="P:Rock.Framework.Web.Net.HttpWrapper.InitializeRequestOnRetry">
      <summary>
            Set to true if you want the Request object to initialize on every try
            Certain errors leave the request object in a bad state ("Stream not writable")
            Initializing it again fixes the error
            </summary>
    </member>
    <member name="P:Rock.Framework.Web.Net.HttpWrapper.Request">
      <summary>
            Gets the HttpWebRequest object.
            </summary>
      <value>The HttpWebRequest object.</value>
    </member>
    <member name="P:Rock.Framework.Web.Net.HttpWrapper.Response">
      <summary>
            Gets or sets the response.
            </summary>
      <value>The response.</value>
    </member>
    <member name="E:Rock.Framework.Web.Net.HttpWrapper.ResponseReceived">
      <summary>
            Occurs when <see cref="M:Rock.Framework.Web.Net.HttpWrapper.OnPostCompleted(Rock.Framework.Web.Net.CompletedEventArgs)" /> is called.
            </summary>
    </member>
    <member name="T:Rock.Framework.Web.Net.ReceivedEventArgs">
      <summary>
            Provides data for PostCompleted event
            </summary>
    </member>
    <member name="P:Rock.Framework.Web.Net.ReceivedEventArgs.ResponseData">
      <summary>
            Gets the response data.
            </summary>
      <value>The response data.</value>
    </member>
    <member name="P:Rock.Framework.Web.Net.ReceivedEventArgs.Response">
      <summary>
            Gets the HttpWebResponse.
            </summary>
      <value>The HttpWebResponse object.</value>
    </member>
    <member name="P:Rock.Framework.Web.Net.ReceivedEventArgs.Exception">
      <summary>
            Gets the exception.
            </summary>
      <value>The exception.</value>
    </member>
    <member name="T:Rock.Framework.Web.Validation.Url">
      <summary>
            Provides standard validations for the web.
            </summary>
    </member>
    <member name="M:Rock.Framework.Web.Validation.Url.ValidateUrlFormat(System.String)">
      <summary>
            Validates that a URL is formatted correctly.  Supports http, https and ftp protocols.
            </summary>
      <param name="value">The URL that is to be validated.</param>
      <returns>
            True if url is valid or false if it is not.
            </returns>
      <remarks>The following TLD's are supported:
            <list type="bullet"><listheader>Valid TLD's</listheader><item>aero</item><item>arpa</item><item>biz</item><item>com</item><item>com</item><item>coop</item><item>edu</item><item>gov</item><item>info</item><item>int</item><item>mil</item><item>museum</item><item>name</item><item>net</item><item>org</item><item>pro</item></list></remarks>
    </member>
    <member name="T:Rock.Framework.Infrastructure.Workflow.IKeyWordSender">
      <summary>
            Interface for objects that send keywords to different providers
            <remarks>
            For development and unit tests project you can use the ConsoleKeyWordSenderProvider or create your own provider.
            In test and above you should use the OnBaseKeyWordSenderProvider for integration with onbase.   
            You will need rights to the onbase keyword staging sonic queue in the different environments.
            </remarks></summary>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.IKeyWordSender.Send(System.Collections.Generic.IEnumerable{Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord})">
      <summary>
             Send keywords to the current provider
             <remarks>
             In a dev environment and testing you could use the Console provider or another custom provider.
             </remarks></summary>
      <param name="keyWords">
      </param>
    </member>
    <member name="T:Rock.Framework.Infrastructure.Workflow.ConsoleKeyWordSenderProvider">
      <summary>
            Provider typically used in development and unit tests we are not hitting onbase test environment with unit tests.
            <remarks>
            Sends the keywords to the console.
            </remarks></summary>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.ConsoleKeyWordSenderProvider.Send(System.Collections.Generic.IEnumerable{Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord})">
      <summary>
            Send keywords to the current provider
            <remarks>
            In a dev environment and testing you could use the Console provider or another custom provider.
            </remarks></summary>
      <param name="keyWords">
      </param>
    </member>
    <member name="T:Rock.Framework.Infrastructure.Workflow.KeyWordRequestBuilder">
      <summary>
             Class to help build Update KeyWords for a loan.
             <example>
                 var builder = new KeyWordRequestBuilder(LolaKeyWordFromApplicationId, _loanNumber, _requestId);
            
                 builder.AddKeyWordUpdate(KnownOnBaseKeyWord.LoanNumber, _loanNumber.ToString())
                        .AddKeyWordUpdate(KnownOnBaseKeyWord.PrimaryClient, loan.BorrowerName)
                        .AddKeyWordUpdate(KnownOnBaseKeyWord.IsEmployeeLoan, (loan.EmployeeLoan) ? "YES REVERSE" : "NO REVERSE")
                        .AddKeyWordUpdate(KnownOnBaseKeyWord.Borrower2Name, loan.Borrower2Name)
                        .AddKeyWordUpdate(KnownOnBaseKeyWord.Branch, loan.Branch)
                        .AddKeyWordUpdate(KnownOnBaseKeyWord.CompanyName, loan.CompanyName)
                        .AddKeyWordUpdate(KnownOnBaseKeyWord.CondoProjectName, loan.CondoProjectName)
                        .AddKeyWordUpdate(KnownOnBaseKeyWord.CondoOwnersAssociation, loan.CondoOwnersAssociation);
                  var keyWordSender = KeyWordSenderDefaultFactory.GetInstance(string.Empty);
                  var words = builder.Build();
                  keyWordSender.Send(words);
             </example></summary>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.KeyWordRequestBuilder.#ctor(System.Int32,System.Int64,System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Infrastructure.Workflow.KeyWordRequestBuilder" /> class.
            </summary>
      <param name="fromApplicationCoreCommonId">From application core common id.</param>
      <param name="loanNumber">The loan number.</param>
      <param name="requestId">
            The request id.  Your incremental Id from your system.  Latest record should always have the higher value.  
            Onbase will optimize and only run the latest if multiple updates are sent in.  
            </param>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.KeyWordRequestBuilder.AddKeyWordUpdate(System.Int32,System.String)">
      <summary>
            Adds the specified key word number.
            </summary>
      <param name="keyWordNumber">The key word number.</param>
      <param name="keyWordValue">The key word value.</param>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.KeyWordRequestBuilder.AddKeyWordUpdate(Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord,System.String)">
      <summary>
            Adds the specified key word.
            </summary>
      <param name="keyWord">The key word.</param>
      <param name="keyWordValue">The key word value.</param>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.KeyWordRequestBuilder.AddCreateHTMLKeyWord(System.Int32,System.Collections.Generic.IEnumerable{Rock.Framework.Infrastructure.Workflow.PackagedKeyWord})">
      <summary>
            CreateHtml kicks off a workflow which usually printing some type of package.
            </summary>
      <param name="package">The DocumentPackage that we are sending to onbase</param>
      <param name="keyWordList">Triggers that onbase uses.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.KeyWordRequestBuilder.AddCreateHTMLKeyWord(Rock.Framework.Infrastructure.Workflow.KnownDocumentPackageType,System.Collections.Generic.IEnumerable{Rock.Framework.Infrastructure.Workflow.PackagedKeyWord})">
      <summary>
            Adds the specified key word number.
            </summary>
      <param name="documentPackageType">Type of the document package.</param>
      <param name="keyWordList">Not sure yet.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.KeyWordRequestBuilder.Build">
      <summary>
            Builds the keywords created for this request.
            </summary>
      <returns>KeyWords for this request</returns>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.KeyWordRequestBuilder.BuildKeyWordForUpdate(System.Int32,System.Int64,System.Int32,System.String,System.Int64)">
      <summary>
            Builds the key word for update.
            </summary>
      <param name="fromApplicationCoreCommonId">From application core common id.</param>
      <param name="loanNumber">The loan number.</param>
      <param name="keyWordNumber">The key word number.  This is the onbase assigned number for that keyword.</param>
      <param name="keyWordValue">The key word value. if this is equal to string.Empty or "" it will update the value to null</param>
      <param name="requestId">The RequestId of the current system.  This has to be auto incrementing number the client provides.  The system will use the one with the hightest number when creating docs.</param>
      <returns>KeyWord object that can be sent to onbase.</returns>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.KeyWordRequestBuilder.BuildKeyWordForKnownDocumentPackage(System.Int32,System.Int64,Rock.Framework.Infrastructure.Workflow.KnownDocumentPackageType,System.Int64,System.Collections.Generic.IEnumerable{Rock.Framework.Infrastructure.Workflow.PackagedKeyWord})">
      <summary>
            Builds the create HTML on base key word.
            <example></example></summary>
      <param name="fromApplicationCoreCommonId">The CommonId of the application that is stored in the Core.</param>
      <param name="loanNumber">The loan number we are creating HTML base keyword.</param>
      <param name="packageType">Type of package you are requesting.</param>
      <param name="requestId">The RequestId of the current system.  This has to be auto incrementing number the client provides.  The system will use the one with the hightest number when creating docs.</param>
      <param name="keyWordList">The key word list.</param>
      <returns>
            KeyWord object that can be sent to onbase.
            </returns>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.KeyWordRequestBuilder.BuildCreateHtmlKeyWord(System.Int32,System.Int64,System.Int32,System.Int64,System.Collections.Generic.IEnumerable{Rock.Framework.Infrastructure.Workflow.PackagedKeyWord})">
      <summary>
            Builds the CreateHTML onbasekeyword object needed to make a createHTML request.
            <remarks>
            If the DocType is a known type to the core please use the BuildKeyWordForKnownDocumentPackage that accepts the correct enumeration.
            </remarks></summary>
      <param name="fromApplicationCoreCommonId">The CommonId of the application that is stored in the Core.</param>
      <param name="loanNumber">The loan number we are creating HTML base keyword.</param>
      <param name="docTypeNum">The known onbase doctype number.</param>
      <param name="requestId">The RequestId of the current system.  This has to be auto incrementing number the client provides.  The system will use the one with the hightest number when creating docs.</param>
      <param name="keyWordList">The key word list used with a package.</param>
      <returns>
            KeyWord object that can be sent to onbase.
            </returns>
    </member>
    <member name="T:Rock.Framework.Infrastructure.Workflow.KeyWordSenderDefaultFactory">
      <summary>
            Default factory to get the KeyWordSender.  
            If you are in Dev environment it will return ConsoleSender otherwise it will return the OnbaseSender  
            <remarks>
            For development and unit tests project you can use the ConsoleKeyWordSenderProvider or create your own provider and factory to return that provider.
            In test, beta and production environment you should use the OnBaseKeyWordSenderProvider for integration with onbase.   
            You will need to get rights to the "various.db.onbase.staging" queue in the different environments from Sonic support team.
            </remarks></summary>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.KeyWordSenderDefaultFactory.GetInstance(System.String)">
      <summary>
            Gets the instance.
            </summary>
      <param name="queueName">Name of the queue.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Rock.Framework.Infrastructure.Workflow.KnownDocumentPackageType">
      <summary>
            Known document package types in the core
            <remarks>
            These are used to print a doc package and typically kick off a workflow in onbase.
            </remarks></summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownDocumentPackageType.LoanStatusDocument">
      <summary>
            680 is the Application Package
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownDocumentPackageType.PrintCenterControlDoc">
      <summary>
            1161 is the PrintCenterControlDoc
            </summary>
    </member>
    <member name="T:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord">
      <summary>
             Known Keyword numbers used to integrate with Onbase
             <remarks>
             Onbase may add keywords at anytime until the new keyword is added to the the enumeration you will have to use the number.
             </remarks></summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.LoanNumber">
      <summary>
            101 LoanNumber/Jacket Number
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.PrimaryClient">
      <summary>
            Primary Client Name on a loan
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.IsEmployeeLoan">
      <summary>
            294 Is this a quicken loans teammember
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.Borrower2Name">
      <summary>
            758 Name of second barrower on a loan
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.Branch">
      <summary>
            115 Branch of the owner
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.CompanyName">
      <summary>
            113 The name of company this loan is for 
            <remarks>Quicken or One Reverse</remarks></summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.CondoProjectName">
      <summary>
            1129 Condo Project Name
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.CondoOwnersAssociation">
      <summary>
            1130 Condo Owners Association
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.CondoOwnersAssociationPhone">
      <summary>
            1131 Condo Owners Association Phone
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.Division">
      <summary>
            114 Division
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.DocumentationType">
      <summary>
            488 DocumentationType
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.HomeownersCompany">
      <summary>
            449 HomeownersCompany
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.HomeownersCompanyPhone">
      <summary>
            450 HomeownersCompanyPhone
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.LienType">
      <summary>
            301 LienType
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.LoanClass">
      <summary>
            1126 LoanClass
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.LoanPurpose">
      <summary>
            112 LoanPurpose
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.MortgageBanker">
      <summary>
            281 MortgageBanker
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.MortgageBankerEmail">
      <summary>
            274 MortgageBankerEmail 
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.MortgageBankerID">
      <summary>
            946 MortgageBankerID 
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.POARequired">
      <summary>
            822 POARequired
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.Product">
      <summary>
            110 Product
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.PropertyType">
      <summary>
            300 PropertyType
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.PurposeofRefinance">
      <summary>
            1127 PurposeofRefinance
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.SalesDirector">
      <summary>
            420 SalesDirector
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.SalesDirectorEmail">
      <summary>
            524 SalesDirectorEmail
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.SalesDirectorId">
      <summary>
            949 SalesDirectorId
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.RegionalVicePresidentName">
      <summary>
            1090 RegionalVicePresidentName
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.RegionalVicePresidentCommonId">
      <summary>
            1091 RegionalVicePresidentCommonId
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.SubjectPropertyCity">
      <summary>
            258 SubjectPropertyCity
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.SubjectPropertyCounty">
      <summary>
            723 SubjectPropertyCounty
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.SubjectPropertyLineOne">
      <summary>
            257 SubjectPropertyLineOne
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.SubjectPropertyState">
      <summary>
            259 SubjectPropertyState
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.SubjectPropertyZipPlus4">
      <summary>
            275 SubjectPropertyZipPlus4
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.TrustRequired">
      <summary>
            1128 TrustRequired
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.ProductFeatureSet">
      <summary>
            1132 ProductFeatureSet
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.PreferredMailingAddressName">
      <summary>
            1135 PreferredMailingAddressName
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.PreferredMailingAddress">
      <summary>
            1136 PreferredMailingAddress
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.PreferredMailingAddressCity">
      <summary>
            1137 PreferredMailingAddressCity
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.PreferredMailingAddressState">
      <summary>
            1138 PreferredMailingAddressState
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.PreferredMailingAddressZip">
      <summary>
            1139 PreferredMailingAddressZip
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.PreferredMailingAddressPhone">
      <summary>
            1140 PreferredMailingAddressPhone
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.MortgageBankerExtension">
      <summary>
            698 MortgageBankerExtension
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.ApplicationDate">
      <summary>
            1248 Application Date of Loan
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord.LoanStatus">
      <summary>
            105 - LoanStatus 
            </summary>
    </member>
    <member name="T:Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord">
      <summary>
            Class that represents an onbase Keyword.
            <remarks>
            This is the end object that gets send to onbase sql preparer to insert keywords into onbase
            Please use the Static xxx methods to create the correct OnBaseKeyWord
            </remarks></summary>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord" /> class.
            </summary>
    </member>
    <member name="P:Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord.FromApplicationId">
      <summary>
            Gets or sets from application id.
            </summary>
      <value>From application id.</value>
    </member>
    <member name="P:Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord.LoanNumber">
      <summary>
            Gets or sets the loan number.
            </summary>
      <value>The loan number.</value>
    </member>
    <member name="P:Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord.RequestType">
      <summary>
            Gets or sets the type of the request.  CreateHTML (document workflow request) or KeyWordUpdate
            </summary>
      <value>The type of the request.</value>
    </member>
    <member name="P:Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord.KeyWordNumber">
      <summary>
            Gets or sets the key word number.  This numbers are used to send KeyWord Information Updates to onbase.
            </summary>
      <value>The key word number.</value>
    </member>
    <member name="P:Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord.KeyWordValue">
      <summary>
            Gets or sets the key word value.  New Value for a KeyWordNumber
            </summary>
      <value>The key word value.</value>
    </member>
    <member name="P:Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord.Priority">
      <summary>
            Gets or sets the priority.  This is not required field possible values 1-4
            </summary>
      <value>The priority.</value>
    </member>
    <member name="P:Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord.FromApplicationRequestId">
      <summary>
            This is a passthrough Id for the application.  This should be a unique id for the current Request.  
            </summary>
      <value>Application Specific requestId.</value>
    </member>
    <member name="P:Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord.DocumentTypeNum">
      <summary>
            Gets or sets the document type num this is used when sending CreateHTML or Document Print Requests to Onbase.  
            These type of requests tell onbase to start a workflow (Deliver a package).
            </summary>
      <value>The document type num.</value>
    </member>
    <member name="P:Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord.PackageKeywordList">
      <summary>
            Gets or sets the keyword list that can be used when ordering Onbase packages or sending multiple update keywords to onbase in one shot.
            These are typically additional controls user when printing documents.
            </summary>
      <value>The keyword list.</value>
    </member>
    <member name="T:Rock.Framework.Infrastructure.Workflow.OnbaseKeyWordSenderProvider">
      <summary>
             Provider responsible for sending keywords to an actual OnbaseQueue.
             <remarks>
             You must have rights to the prep sonic queue and should have a sonic queue registered in the configuration.
            <code><sonic name="OnBaseSqlPrep" destination="various.db.onbase.staging" brokerServerAddresses="tcp://qlsonitest:2506,tcp://qlsonictest:2506" userName="xxxx" password="xxxx" /></code></remarks></summary>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.OnbaseKeyWordSenderProvider.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Infrastructure.Workflow.OnbaseKeyWordSenderProvider" /> class.
            </summary>
      <param name="queueConfigName">Name of the queue config that contains the queue information and the environment.</param>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.OnbaseKeyWordSenderProvider.Send(System.Collections.Generic.IEnumerable{Rock.Framework.Infrastructure.Workflow.OnBaseKeyWord})">
      <summary>
            Sends the keywords.  Fire and forgets.
            Possible sonic exceptions if your Queue is not setup correctly in the configuration.
            </summary>
      <param name="keyWords">The key words.</param>
    </member>
    <member name="P:Rock.Framework.Infrastructure.Workflow.OnbaseKeyWordSenderProvider.KeyWordSender">
      <summary>
            Gets the key word sender.
            </summary>
    </member>
    <member name="T:Rock.Framework.Infrastructure.Workflow.OnBasePriority">
      <summary>
            The Priority of the message we are sending to onbase.  
            <remarks>
            Onbase will execute higher priority first.  
            Most application should use Low priority.
            </remarks></summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.OnBasePriority.Critical">
      <summary>
            Number 1 priority for onbase
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.OnBasePriority.High">
      <summary>
            Number 2 priority for onbase
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.OnBasePriority.Medium">
      <summary>
            Number 3 priority for onbase
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.OnBasePriority.Low">
      <summary>
            Number 4 priority for onbase
            </summary>
    </member>
    <member name="T:Rock.Framework.Infrastructure.Workflow.OnBaseRequestType">
      <summary>
            OnBase request type.  
            Each request type has different required fields and provides different onbase functionality.
            </summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.OnBaseRequestType.UpdateKeyword">
      <summary>
            Updates a keyword value in Onbase for a Loan
            <see cref="T:Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord" /></summary>
    </member>
    <member name="F:Rock.Framework.Infrastructure.Workflow.OnBaseRequestType.CreateHTML">
      <summary>
             Only thing required is KeyWordNum and standard application number.
             <remarks>
             CreateHTML is typeically used to kick off an onbase workflow for documents.
            
             Some examples:  ReverseGuide or ApplicationPackage workflow 
              
             </remarks></summary>
    </member>
    <member name="T:Rock.Framework.Infrastructure.Workflow.PackagedKeyWord">
      <summary>
            Number/Value pair wrapper used to package keywords together when sending packaged keywords.
            </summary>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.PackagedKeyWord.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Infrastructure.Workflow.PackagedKeyWord" /> class.
            </summary>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.PackagedKeyWord.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Infrastructure.Workflow.PackagedKeyWord" /> class.  Use this initializer when the keywordnumber is not a KnownKeyWordNumber
            </summary>
      <param name="keywordNumber">The keyword number.</param>
      <param name="keyWordValue">The key word value.</param>
    </member>
    <member name="M:Rock.Framework.Infrastructure.Workflow.PackagedKeyWord.#ctor(Rock.Framework.Infrastructure.Workflow.KnownOnBaseKeyWord,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Rock.Framework.Infrastructure.Workflow.PackagedKeyWord" /> class.
            <remarks>Recommend that use this initializer</remarks></summary>
      <param name="knownKeyWord">The known key word.</param>
      <param name="keyWordValue">The key word value.</param>
    </member>
    <member name="P:Rock.Framework.Infrastructure.Workflow.PackagedKeyWord.KeyWordNumber">
      <summary>
            Gets or sets the key word number.
            </summary>
      <value>The key word number.</value>
    </member>
    <member name="P:Rock.Framework.Infrastructure.Workflow.PackagedKeyWord.KeyWordValue">
      <summary>
            Gets or sets the key word value.
            </summary>
      <value>The key word value.</value>
    </member>
  </members>
</doc>